[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Book Squirrel"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w11-4/main[image:https://travis-ci.org/cs2103-ay1819s2-w11-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "https://https://coveralls.io/github/cs2103-ay1819s2-w11-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w11-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "https://app.codacy.com/project/0blivious/main/dashboard[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Book Squirrel is a desktop app for the user to take notes when reading book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It can be used to record books read, give tags and ratings to books, and record book reviews."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* More importantly, Book Squirrel is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Want to capture idea and inspirations from reading books? Jump to the \u003c\u003cUserGuide#, User Guide\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* This application is developed from the codebase of https://github.com/se-edu/addressbook-level4[AddressBook-level 4]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 2,
      "-": 29,
      "0blivious": 2
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u0027site-name\u0027: \u0027Book-Squirrel\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w11-4/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 235,
      "0blivious": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d Book Squirrel - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W11-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "By: `Team W11-4`      Since: `Jun 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `cs2103-ay1819s2-w11-4/main` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `cs2103-ay1819s2-w11-4/main`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete n/Alice`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".Component interactions for `deleteBook n/Alice` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image::SDforDeleteBook.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".  `Logic` uses the `BookShelfParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a book)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deleteBook n/Alice\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".Interactions Inside the Logic Component for the `deleteBook n/Alice` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image::DeleteBookSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* stores the Book Shelf data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Book Shelf`, which `Book` can reference. This would allow `Book Shelf` to only require one `Tag` object per unique `Tag`, instead of each `Book` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* can save the Book Shelf data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* users are not supposed to touch the data file (file inside the `data` folder) directly. If the user insists on doing so, the data might be corrupted."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* users are not supposed to add data files into the app manually. If you accidentally do so and find the data corrupted, you should reinstall the app and all previous data will get lost."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedBookShelf`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `BookShelf` with an undo/redo history, stored internally as an `BookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `VersionedBookShelf#commit()` -- Saves the current book shelf state in its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `VersionedBookShelf#undo()` -- Restores the previous book shelf state from its history."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `VersionedBookShelf#redo()` -- Restores a previously undone book shelf state from its history."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitBookShelf()`, `Model#undoBookShelf()` and `Model#redoBookShelf()` respectively."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial book shelf state, and the `currentStatePointer` pointing to that single book shelf state."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 2. The user executes `deleteBook n/Alice` command to delete the book called Alice in the book list. The `deleteBook` command calls `Model#commitBookShelf()`, causing the modified state of the book list after the `deleteBook n/Alice` command executes to be saved in the `BookShelfStateList`, and the `currentStatePointer` is shifted to the newly inserted book list state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 3. The user executes `addBook n/David ...` to add a new book. The `addBook` command also calls `Model#commitBookShelf()`, causing another modified address book state to be saved into the `BookShelfStateList`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If a command fails its execution, it will not call `Model#commitBookShelf()`, so the book shelf state will not be saved into the `BookShelfStateList`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 4. The user now decides that adding the book was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoBookShelf()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous book shelf state, and restores the book shelf to that state."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial book shelf state, then there are no previous book shelf states to restore. The `undo` command uses `Model#canundoBookShelf()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoBookShelf()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the book shelf to that state."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If the `currentStatePointer` is at index `BookShelfStateList.size() - 1`, pointing to the latest book shelf state, then there are no undone book shelf states to restore. The `redo` command uses `Model#canredoBookShelf()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 5. The user then decides to execute the command `listBook`. Commands that do not modify the book shelf, such as `listBook`, will usually not call `Model#commitBookShelf()`, `Model#undoBookShelf()` or `Model#redoBookShelf()`. Thus, the `BookShelfStateList` remains unchanged."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitBookShelf()`. Since the `currentStatePointer` is not pointing at the end of the `BookShelfStateList`, all book shelf states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `addBook n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire book list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: Will use less memory (e.g. for `deleteBook`, just save the book being deleted)."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of book list states."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedBookShelf`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0blivious"
        },
        "content": "// tag::addBook[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d AddBook feature"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The addBook mechanism is facilitated by `BookShelf`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0blivious"
        },
        "content": "It contains `UniqueBookList` in which all the book data are stored and duplicates are not allowed."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Additionally, it uses the following operations from `BookShelf`:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `model#hasBook()` -- Check if the book already exists in the book shelf."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `model#addBook()` -- To add the new book into book shelf."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `model#commitBookShelf()` -- Saves the current book shelf state for undo/redo.."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0blivious"
        },
        "content": "These operations are exposed in the `Model` interface."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Given below is an example usage scenario and how the addBook mechanism behaves at each step."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial book shelf state, and the `currentStatePointer` pointing to that single book shelf state."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Step 2. The user executes `addBook n/Alice a/HR m/5 tag/fantasy` command to add the book called Alice, written by HR, with rating of 5 and tag of fantasy in the book list. The `addBook` command calls `Model#hasBook()`, checking if the book already exists in the book shelf."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If the book already exists, CommandException(MESSAGE_DUPLICATE_BOOK) will be thrown. It will not call `Model#commitBookShelf()`, so the book shelf state will not be saved into the `BookShelfStateList`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Step 4. The book shelf now adds the book to the book list after making sure there is no duplicates, and calls Model#commitBookShelf(), causing the modified state of the book list after the `addBook` command executes to be saved in the BookShelfStateList"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How addBook executes"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire book as one object contains different components such as author, rating, etc."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Pros: Easy to implement delete and other features that change an entire book."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Cons: May be more difficult to implement the summary feature which needs to obtain statistics of all separate components, eg. find the most popular author."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 2:** Components stored as individual objects."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Pros: Easier to obtain statistics regarding each component."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Cons: It is hard to manage book object as we need to find a way to connect all components together."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0blivious"
        },
        "content": "// end::addBook[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// tag::addReview[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d AddReview Feature"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage and how addReview feature behaves at each step."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial book shelf state, and the `currentStatePointer` pointing to that single book shelf state."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `addReview n/Alice in Wonderland rt/Carroll has depicted a unique world I hadn\u0027t seen before r/Alice\u0027s Adventures in Wonderland by Lewis Carroll is a story about Alice who falls down a rabbit hole and lands into a fantasy world that is full of weird, wonderful people and animals.`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The `AddReviewCommandParser` parses this command, and returns an `AddReviewCommand`. Exception will be thrown if the command is invalid."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The `AddReviewCommand` creates a `Review` object based on the parameter the user keyed in."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The `AddReviewCommand` executes. The command checks if the book to which the review is added exists in the `BookShelf`, based on `BookNameContainsExactKeywordPredicate`. If the book does not exist, an exception is thrown. If the book exists, the `Review` object is added to the set of reviews of the book."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store Reviews"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a Set to store all Reviews, just like tags."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to code and manage because it is the same implementation as tags."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Set does not allow duplicate reviews. Need to check for duplicate reviews added."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use a List to store Reviews"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: There will be an order for the reviews added based on time created. More clear to users."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have unforeseen bugs or implications."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Where to store Reviews"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a Set within a Book, just like tags."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to code and manage because it is the same implementation as tags. The design makes sense because Reviews belong to Books."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: It is not known whether this design is compatible with the UI component."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Have another ObservableList for Reviews."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Maybe makes it easier for the UI to implement."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// end::addReview[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// tag::listBook[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d ListBook Feature"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Given below is an example usage and how listBook feature behaves at each step."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial book shelf state, and the `currentStatePointer` pointing to that single book shelf state."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 2. The user executes `listBook n/Life`."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 3. The `ListBookCommandParser` parses this command, and returns an `ListBookCommand`. Exception will be thrown if the command is invalid."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 4. The `ListBookCommand` executes. The command checks all the book in the `BookShelf`, filters out books whose name contain `Life` based on `BookNameContainsKeywordPredicate`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to select books."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* **Alternative 1 (current choice):** Only books match all criteria provided will be selected."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: Easy to test and manage."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Cons: Such searching technique may fail to provide the user with enough inforamtion."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* **Alternative 2:** Select books that match at least one criteria."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: More likely to find the book that the user is looking for."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Cons: Hard to test and manage."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// end::listBook[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "A project often depends on third-party libraries. For example, Book Shelf depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* has a need to manage a significant number of book reviews"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*Value proposition*: manage book reviews faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "0blivious"
        },
        "content": "|`* * *` |user |add a new book |"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "0blivious"
        },
        "content": "|`* * *` |user |delete a book |remove entries that I no longer need"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "0blivious"
        },
        "content": "|`* * *` |user |find a book by name |locate details of books without having to go through the entire list"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |update a book\u0027s review |edit base on current content"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |exist the program |"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |select a book |"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |save |able to save data in local"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |show history |able to see what you did"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |undo |able to undo your operation"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |redo |able to redo your undo"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |clear |clear all entires"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |entrypt |entrypt your review"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |detrypt |detrypt your entrypted review"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |guideline |by typing help to show all commands"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |sort |sort the list in alphabetical order"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "0blivious"
        },
        "content": "(For all use cases below, the *System* is the `Book Squirrel` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Use case: Delete book"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "0blivious"
        },
        "content": "1.  User requests to delete a book and all its reviews by the book\u0027s exact name"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "0blivious"
        },
        "content": "2.  Book Squirrel deletes the book"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".  Should be able to hold up to 1000 books without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d Deleting a book"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "0blivious"
        },
        "content": ". Deleting a book by its name"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Prerequisites: The book is inside the list. User knows the full name of the book."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Test case: `deleteBook n/Alice` +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: The book named Alice is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Test case: `deleteBook 0` +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Other incorrect delete commands to try: `deleteBook` +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 4,
      "EleenYang": 67,
      "0blivious": 55,
      "-": 673
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d Book Squirrel - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w11-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "By: `Team W11-04`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "BookSquirrel is for those who *want to keep record of books they\u0027ve read*. More importantly, BookSquirrel is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookSquirrel can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".  Download the latest `bookSquirrel.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Book Shelf."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* **`addBook`**`n/Alice in Wonderland a/Lewis Carroll m/5 t/fantasy t/fairy tale` : adds a book named `Alice in Wonderland` to the record."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* **`deleteBook`**`n/Alice` : deletes the record of books whose name contains \u0027Alice\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Alice in Wonderland t/fantasy` or as `n/Alice in Wonderland`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/fantasy`, `t/fantasy t/textbook` etc."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME a/AUTHOR`, `a/AUTHOR n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Adding a book: `addBook`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Adds a book to the book list +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `addBook n/BOOKNAME a/author m/RATING(0-10) [t/TAG]…​`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `addBook n/Alice in Wonderland a/Lewis Carroll m/5 t/fantasy t/fairy tale`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `addBook n/Structure and Interpretation of Computer Programs a/Hal Abelson Jerry Sussman m/4 t/textbook`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Adding a book review: `addReview`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Adds a book review to a certain book in the book list +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addReview n/BOOKNAME rt/REVIEW TITLE r/REVIEW MESSAGE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* `addReview n/Alice in Wonderland rt/An interesting child book r/While Lewis Carroll purists will scoff at the aging of his curious young protagonist, most movie audiences will enjoy this colorful world.`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* `addReview n/Structure and Interpretation of Computer Programs rt/Computing Bible r/A very difficult book:(`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Listing book entries : `listBook`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Shows a list of all book entries, with the specified TAG and RATING. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Format: `listBook [n/BOOKNAME] [a/AUTHOR] [t/TAG] [m/RATING]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The order of the keywords does not matter. e.g. `Alice Wonderland` will match `Wonderland Alice`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Only books match all the search criteria will be returned"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* If no search criteria given, the command will give the complete list of the books"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* For book name searching, books matching at least one keyword will be returned. e.g. `Alice` will return `Alice in Wonderland`, `the Westminster Alice`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* For author name searching, books whose author name matching at least one keyword will be returned. e.g. `James` will return books whose author name is `Henry James`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* For tag searching, books containing at least one tag will be returned. e.g. `computer` will return `Computer Organisation`, `Computer Networks`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* For rating search, books whose rating are included will be returned."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `listBook t/textbook m/5`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listBook n/CS2104T t/textbook`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `listBook m/5`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Listing book reviews of a certain book : `listReview`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Shows a list of all review entries of a book. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Format: `listReview n/BOOKNAME`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The book name need to match exactly"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The search by book name is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The order of the keywords does matter. e.g. `Alice Wonderland` will not match `Wonderland Alice`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `listReview n/Alice in Wonderland`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Editing book entry : `editBook`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Edits an existing book entry (eg. edit the mark, author or tag). +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `editBook INDEX [n/BOOKNAME] [a/AUTHOR] [m/RATING] [t/TAG]...`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Edits the book at the specified INDEX. The index refers to the index number shown in the displayed book list. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* When editing tags, the existing tags of the book will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* You can remove all the book’s tags by typing t/ without specifying any tags after it."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `edit 1 n/Alice in Wonderland a/some author t/some tag` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Change the name, author, tag of the first book to Alice in Wonderland, some author, some tag."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `edit 2 t/` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Clear all the existing tags of the second book in the result list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d Deleting a book : `deleteBook`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Deletes the specified book from the book list. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `deleteBook INDEX`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Deletes the book of the specified `INDEX`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The index refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listBook n/Computer Security` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`deleteBook 1` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Deletes the 1st person in the results of the listBook command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Deleting a book review: `deleteReview`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Deletes the review of the specified book from the review list. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteReview rt/REVIEW TITLE`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes of the book with the specified REVIEW TITLE."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* The REVIEW TITLE must only contain alphanumeric characters"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* and exist in the review list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listBook` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`deleteBook 2` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Deletes the 2nd person in the book shelf."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listReview n/Alice in Wonderland` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "`deleteReview rt/An interesting children\u0027s book` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the review with the title \"An interesting children\u0027s book\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Restores the records to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Undoable commands: those commands that modify the records content (`addBook`, `addReview`, ``deleteBook`, `deleteReview`, `editBook` and `clear`)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteBook n/Computer Security` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`listBook n/Alice` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "`undo` (reverses the `deleteBook Computer Security` command) +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listBook a/James` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteBook n/Alice` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "`undo` (reverses the `deleteBook Alice` command) +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteBook n/Alice` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "`undo` (reverses the `deleteBook Alice` command) +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "`redo` (reapplies the `deleteBook Alice` command) +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteBook n/Hello World` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Give a summary of all the books read : `summary`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Generate a summary of all the books read so far. +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Format: `summary`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `summary`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "An example of a summary `You have read 100 books so far. Your favourite book is Alice in Wonderland. You wrote 13 reviews for it. The tag you use most commonly is “textbook.” Your favourite author is “John Doe”, you read 11 books written by him. The book that you gave the lowest rating is “Algorithms”`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Clears all entries from the book shelf. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Book review data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Book Squirrel folder."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *AddBook* `addBook n/BOOKNAME a/author m/RATING(0-10) [t/TAG]…` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0blivious"
        },
        "content": "e.g. `addBook n/Alice in Wonderland a/Lewis Carroll m/5 t/fantasy t/textbook`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *AddReview* `addReview n/BOOKNAME r/review` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "e.g. `addReview n/Alice in Wonderland r/While Lewis Carroll purists will scoff at the aging of his curious young protagonist, most movie audiences will enjoy this colorful world.`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *DeleteBook* : `deleteBook n/BOOKNAME` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "e.g. `deleteBook n/Alice in Wonderland`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* *DeleteReview* : `deleteReview rt/REVIEW TITLE`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *EditBook* : `edit n/BOOKNAME [a/AUTHOR] [m/RATING]...` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "e.g. `edit n/Alice in Wonderland a/some author`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *ListBook* : `listBook [n/NAME] [t/TAG] [m/RATING] [a/Author]` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "e.g. `listBook t/textbook m/5`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *ListReview* : `listReview n/BOOKNAME` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "e.g. `listReview n/Alice in Wonderland`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Summary* : `summary`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "EleenYang": 58,
      "-": 171,
      "0blivious": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.BookShelfStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BookShelf ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelfStorage bookShelfStorage \u003d new JsonBookShelfStorage(userPrefs.getBookShelfFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        storage \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Optional\u003cReadOnlyBookShelf\u003e bookShelfOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ReadOnlyBookShelf initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bookShelfOptional \u003d storage.readBookShelf();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (!bookShelfOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookShelf\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            initialData \u003d bookShelfOptional.orElseGet(SampleDataUtil::getSampleBookShelf);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookShelf\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            initialData \u003d new BookShelf();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookShelf\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            initialData \u003d new BookShelf();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookShelf\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        logger.info(\"Starting BookShelf \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping BookShelf ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 8,
      "-": 168,
      "0blivious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK \u003d \"The book name provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_BOOKS_LISTED_OVERVIEW \u003d \"%1$d books listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 1,
      "-": 13,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the BookShelf."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see seedu.address.model.Model#getBookShelf()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ReadOnlyBookShelf getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the BookShelf."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see seedu.address.model.Model#getBookShelf()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    ReadOnlyBookShelf getBookShelf();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the user prefs\u0027 book shelf file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Selected person in the filtered books list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see seedu.address.model.Model#selectedBookProperty()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    ReadOnlyProperty\u003cBook\u003e selectedBookProperty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedBook(Book)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void setSelectedBook(Book book);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 30,
      "-": 69,
      "0blivious": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.parser.BookShelfParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookShelfParser bookShelfParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private boolean bookShelfModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookShelfParser \u003d new BookShelfParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model.getBookShelf().addListener(observable -\u003e bookShelfModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfModified \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Command command \u003d bookShelfParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (bookShelfModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            logger.info(\"Bookshelf modified, saving to file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                storage.saveBookShelf(model.getBookShelf());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ReadOnlyBookShelf getAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return model.getBookShelf();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.getBookShelf();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return model.getBookShelfFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.getBookShelfFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReadOnlyProperty\u003cBook\u003e selectedBookProperty() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.selectedBookProperty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setSelectedBook(Book book) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model.setSelectedBook(book);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "EleenYang": 27,
      "-": 98,
      "0blivious": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Adds a book to the book shelf."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addBook\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the bookShelf. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_RATING + \"RATING \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_NAME + \"Alice in Wonderland \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_AUTHOR + \"Lewis Carroll \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_RATING + \"5 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_TAG + \"fantasy \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_TAG + \"good\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the bookShelf\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Creates an AddBookCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public AddBookCommand(Book book) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof AddBookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddBookCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "0blivious": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Clears the book shelf."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book shelf has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.setBookShelf(new BookShelf());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "0blivious": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the book shelf."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBook\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \": Deletes the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public DeleteBookCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof DeleteBookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteBookCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Edits the details of an existing book in the book shelf."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editBook\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_NAME + \" Alice in Wonderland \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_AUTHOR + \"Jimmy \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_RATING + \"1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to editBook must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the book shelf.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final EditBookDescriptor editBookDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param editBookDescriptor details to editBook the book with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookCommand(Index index, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(editBookDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editBookedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!bookToEdit.isSameBook(editBookedBook) \u0026\u0026 model.hasBook(editBookedBook)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.setBook(bookToEdit, editBookedBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editBookedBook));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * editBooked with {@code editBookDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static Book createEditedBook(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName updatedName \u003d editBookDescriptor.getName().orElse(bookToEdit.getBookName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Author updatedAuthor \u003d editBookDescriptor.getAuthor().orElse(bookToEdit.getAuthor());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Rating updatedRating \u003d editBookDescriptor.getRating().orElse(bookToEdit.getRating());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editBookDescriptor.getTags().orElse(bookToEdit.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Book(updatedName, updatedAuthor, updatedRating, updatedTags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!(other instanceof EditBookCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand e \u003d (EditBookCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Stores the details to editBook the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static class EditBookDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private BookName name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private Author author;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public EditBookDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public EditBookDescriptor(EditBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setAuthor(toCopy.author);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Returns true if at least one field is editBooked."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, author, rating, tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setName(BookName name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cBookName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.author \u003d author;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cAuthor\u003e getAuthor() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.ofNullable(author);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (!(other instanceof EditBookDescriptor)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            EditBookDescriptor e \u003d (EditBookDescriptor) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 getAuthor().equals(e.getAuthor())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 212,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob caroline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Lists all books with the tags and rating desired."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listBook\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": list all books whose tags and rating match\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Parameters: [n/BOOKNAME]...[a/AUTHOR]...[t/TAGS]...[m/RATING]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" t/textbook m/5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all books satisfy the requirement\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final BookListFilterPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ListBookCommand(BookListFilterPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof ListBookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListBookCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListReviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Lists the review of the book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListReviewCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listReview\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": list all reviews whose name equals\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Parameters: NAME\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Alice in Wonderland\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all review satisfy the requirement\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final BookNameContainsExactKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ListReviewCommand(BookNameContainsExactKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof ListReviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListReviewCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Sort all books in provided order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class SortBookCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortBook\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sort all books in certain order\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"Parameters: [st/TYPE]...[o/ORDER]...\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" st/rating o/asc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"sorted successfully\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final String order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public SortBookCommand(String type, String order) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(type, order);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Parses input arguments and creates a new AddBookCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandParser implements Parser\u003cAddBookCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBookCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * and returns an AddBookCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public AddBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName name \u003d ParserUtil.parseBookName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Author author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new Book(name, author, rating, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new AddBookCommand(book);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "0blivious": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BookShelfParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListReviewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.SortBookCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookShelfParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case AddBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new AddBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case AddReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new AddReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case DeleteBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new DeleteBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case EditBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new EditBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case ListBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return new ListBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case ListReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return new ListReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case SortBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new SortBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 25,
      "EleenYang": 5,
      "-": 84,
      "0blivious": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"A/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_REVIEW \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_REVIEWTITLE \u003d new Prefix(\"rt/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final Prefix PREFIX_SORTTYPE \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 2,
      "-": 16,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Parses input arguments and creates a new DeleteBookCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandParser implements Parser\u003cDeleteBookCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBookCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * and returns an DeleteBookCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public DeleteBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new DeleteBookCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Parses input arguments and creates a new EditBookCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandParser implements Parser\u003cEditBookCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBookCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * and returns an EditBookCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand.EditBookDescriptor editBookDescriptor \u003d new EditBookCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            editBookDescriptor.setName(ParserUtil.parseBookName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            editBookDescriptor.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            editBookDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editBookDescriptor::setTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!editBookDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(EditBookCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new EditBookCommand(index, editBookDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Parses input arguments and creates a new ListBookCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandParser implements Parser\u003cListBookCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListBookCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and returns an ListBookCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ListBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_TAG, PREFIX_RATING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e names \u003d argMultimap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authors \u003d argMultimap.getAllValues(PREFIX_AUTHOR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tags \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratings \u003d argMultimap.getAllValues(PREFIX_RATING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate bookFilter \u003d new BookListFilterPredicate(names, authors, tags, ratings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new ListBookCommand(bookFilter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListReviewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListReviewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Parses input arguments and creates a new ListReviewCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListReviewCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListReviewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and returns an ListReviewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ListReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new ListReviewCommand(new BookNameContainsExactKeywordsPredicate(new BookName(trimmedArgs)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses a {@code String name} into a {@code BookName}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the given {@code BookName} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static BookName parseBookName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new BookName(trimmedName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * * Parses a {@code String name} into a {@code BookName}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the given {@code BookName} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Author parseAuthor(String name) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!Author.isValidAuthor(trimmedName)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Author(trimmedName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses a {@code String name} into a {@code Author}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String reviewMessage} into a {@code String parsedReviewMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code review} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String parseReview(String reviewMessage) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(reviewMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedReview \u003d reviewMessage.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return trimmedReview;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code ReviewTitle}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code ReviewTitle} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReviewTitle parseReviewTitle(String name) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!ReviewTitle.isValidReviewTitle(trimmedName)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ReviewTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ReviewTitle(trimmedName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses a {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the given {@code Rating} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 1,
      "-": 156,
      "0blivious": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORTTYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.SortBookCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Parses input arguments and creates a new SortBookCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class SortBookCommandParser implements Parser\u003cSortBookCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortBookCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * and returns an SortBookCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public SortBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_SORTTYPE, PREFIX_ORDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORTTYPE, PREFIX_ORDER)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            \u0026\u0026 (!argMultimap.getValue(PREFIX_ORDER).get().toUpperCase().equals(\"ASC\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !argMultimap.getValue(PREFIX_ORDER).get().toUpperCase().equals(\"DES\"))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String sortType \u003d argMultimap.getValue(PREFIX_SORTTYPE).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String orderType \u003d argMultimap.getValue(PREFIX_ORDER).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return new SortBookCommand(sortType, orderType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookShelf implements ReadOnlyBookShelf {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final UniqueBookList books;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelf() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Creates an BookShelf using the Books in the {@code toBeCopied}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelf(ReadOnlyBookShelf toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.books.setBooks(books);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Resets the existing data of this {@code BookShelf} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void resetData(ReadOnlyBookShelf newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        setBooks(newData.getBookList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the book shelf."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return books.contains(book);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a book to the book shelf."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must not already exist in the book shelf."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addBook(Book b) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books.add(b);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the book shelf."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the book shelf."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books.setBook(target, editedBook);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes {@code key} from this {@code BookShelf}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes {@code key} from this {@code BookShelf}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code key} must exist in the book shelf."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void removeBook(Book key) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books.remove(key);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes {@code tag} from a {@code person}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void removeTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003cTag\u003e(person.getTags());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!tags.remove(tag)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Person newPerson \u003d new Person(person.getName(), person.getPhone(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                person.getEmail(), person.getAddress(), tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        setPerson(person, newPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes {@code tag} from a {@code book}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void removeTagFromBook(Tag tag, Book book) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003cTag\u003e(book.getTags());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!tags.remove(tag)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book newBook \u003d new Book(book.getBookName(), book.getAuthor(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                book.getRating(), tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        setBook(book, newBook);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Remove {@code tag} from all person in the list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (Book p: books) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            removeTagFromBook(tag, p);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Sort {@code books} in with {@code order}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param order"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void sort(String type, String order) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            books.sortBooks(type, order);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return books.asUnmodifiableObservableList().size() + \" books\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return books.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookShelf // instanceof handles nulls"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 persons.equals(((BookShelf) other).persons)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 books.equals(((BookShelf) other).books));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 17,
      "EleenYang": 4,
      "0blivious": 235
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the user prefs\u0027 book shelf file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the user prefs\u0027 book shelf file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setBookShelfFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces book shelf data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setBookShelf(ReadOnlyBookShelf addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /** Returns the BookShelf */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ReadOnlyBookShelf getBookShelf();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the book shelf."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the book shelf."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The person must exist in the book shelf."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must exist in the book shelf."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code person} must not already exist in the book shelf."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code book} must not already exist in the book shelf."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the book shelf."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the book shelf."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the book shelf."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the book shelf."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /** Returns an unmodifiable view of the filtered book list */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the model has previous book shelf states to restore."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoBookShelf();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the model has undone book shelf states to restore."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoBookShelf();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Restores the model\u0027s book shelf to its previous state."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoBookShelf();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Restores the model\u0027s book shelf to its previously undone state."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoBookShelf();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Saves the current book shelf state for undo/redo."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitBookShelf();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Selected book in the filtered book list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ReadOnlyProperty\u003cBook\u003e selectedBookProperty();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the selected book in the filtered person list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Book getSelectedBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the selected book in the filtered person list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setSelectedBook(Book book);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Delete the tag{@code tag} of all contacts in the phone book"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Sort the Book list into different order"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    void sortBook(String type, String order);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 5,
      "EleenYang": 6,
      "-": 113,
      "0blivious": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Represents the in-memory model of the book shelf data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedBookShelf versionedBookShelf;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final SimpleObjectProperty\u003cBook\u003e selectedBook \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Initializes a ModelManager with the given book shelf and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ModelManager(ReadOnlyBookShelf bookShelf, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireAllNonNull(bookShelf, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        logger.fine(\"Initializing with book shelf: \" + bookShelf + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf \u003d new VersionedBookShelf(bookShelf);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedBookShelf.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredBooks \u003d new FilteredList\u003c\u003e(versionedBookShelf.getBookList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        filteredBooks.addListener(this::ensureSelectedBookIsValid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this(new BookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return userPrefs.getBookShelfFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setBookShelfFilePath(Path bookShelfFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(bookShelfFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        userPrefs.setBookShelfFilePath(bookShelfFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookShelf \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setBookShelf(ReadOnlyBookShelf bookShelf) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.resetData(bookShelf);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedBookShelf;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedBookShelf.hasPerson(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedBookShelf.hasBook(book);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.removePerson(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.removeBook(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.addPerson(person);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.addBook(book);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.setBook(target, editedBook);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.removeTag(tag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void sortBook(String type, String order) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.sort(type, order);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedBookShelf}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return filteredBooks;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoBookShelf() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedBookShelf.canUndo();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoBookShelf() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedBookShelf.canRedo();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoBookShelf() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.undo();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoBookShelf() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.redo();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitBookShelf() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ReadOnlyProperty\u003cBook\u003e selectedBookProperty() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return selectedBook;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Book getSelectedBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return selectedBook.getValue();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setSelectedBook(Book book) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (book !\u003d null \u0026\u0026 !filteredBooks.contains(book)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectedBook.setValue(book);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Ensures {@code selectedBook} is a valid book in {@code filteredBooks}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void ensureSelectedBookIsValid(ListChangeListener.Change\u003c? extends Book\u003e change) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (selectedBook.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            boolean wasSelectedBookReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedBook.getValue());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (wasSelectedBookReplaced) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedBook.getValue());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                selectedBook.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            boolean wasSelectedBookRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    .anyMatch(removedBook -\u003e selectedBook.getValue().isSameBook(removedBook));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (wasSelectedBookRemoved) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                selectedBook.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedBookShelf.equals(other.versionedBookShelf)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 4,
      "EleenYang": 16,
      "-": 229,
      "0blivious": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public interface ReadOnlyBookShelf extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Path bookShelfFilePath \u003d Paths.get(\"data\", \"bookshelf.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        setBookShelfFilePath(newUserPrefs.getBookShelfFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelfFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setBookShelfFilePath(Path bookShelfFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(bookShelfFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookShelfFilePath \u003d bookShelfFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 bookShelfFilePath.equals((o.bookShelfFilePath));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, bookShelfFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + bookShelfFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 15,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedBookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * {@code BookShelf} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class VersionedBookShelf extends BookShelf {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cReadOnlyBookShelf\u003e bookShelfStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public VersionedBookShelf(ReadOnlyBookShelf initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList.add(new BookShelf(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Saves a copy of the current {@code BookShelf} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList.add(new BookShelf(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList.subList(currentStatePointer + 1, bookShelfStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Restores the book list to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        resetData(bookShelfStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Restores the book list to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        resetData(bookShelfStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns true if {@code undo()} has book list states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns true if {@code redo()} has book list states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return currentStatePointer \u003c bookShelfStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!(other instanceof VersionedBookShelf)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf otherVersionedBookShelf \u003d (VersionedBookShelf) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return super.equals(otherVersionedBookShelf)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 bookShelfStateList.equals(otherVersionedBookShelf.bookShelfStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedBookShelf.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            super(\"Current state pointer at start of bookShelfState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            super(\"Current state pointer at end of bookShelfState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 18,
      "0blivious": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Author.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Represents a Author\u0027s name in the book shelf."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAuthor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            \"Author names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Constructs a {@code Author}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Author(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        checkArgument(isValidAuthor(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 fullName.equals(((Author) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Book.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Represents a Book in the bookShelf."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class Book {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookName bookName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Book(BookName bookName, Author author, Rating rating, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(bookName, author, rating, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.bookName \u003d bookName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * An alternative constructor with the review field."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Book(BookName bookName, Author author, Rating rating, Set\u003cTag\u003e tags, Set\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(bookName, author, rating, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.bookName \u003d bookName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reviews.addAll(reviews);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookName getBookName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return bookName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable review set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cReview\u003e getReviews() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(reviews);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if both books of the same book name."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * This defines a weaker notion of equality between two books."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean isSameBook(Book otherBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (otherBook \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return otherBook !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 otherBook.getBookName().equals(getBookName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if both books have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * This defines a stronger notion of equality between two books."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return otherBook.getBookName().equals(getBookName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 otherBook.getRating().equals(getRating())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherBook.getTags().equals(getTags())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherBook.getReviews().equals(getReviews());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(bookName, author, rating, tags, reviews);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        builder.append(getBookName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(\" author: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(getAuthor())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "0blivious": 106,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookAuthorContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code AuthorName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookAuthorContainsKeywordPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookAuthorContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getAuthor().fullName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookAuthorContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookAuthorContainsKeywordPredicate) other).keywords)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookAuthorContainsKeywordPredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookListFilterPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookName, BookTag, BookRating} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookListFilterPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e namePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e authorPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e tagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e ratingPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookListFilterPredicate(List\u003cString\u003e nameStr,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            List\u003cString\u003e authorStr, List\u003cString\u003e tagStr, List\u003cString\u003e ratingStr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        namePredicate \u003d new BookNameContainsKeywordsPredicate(nameStr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        authorPredicate \u003d new BookAuthorContainsKeywordPredicate(authorStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        tagPredicate \u003d new BookTagsContainExactKeywordsPredicate(tagStr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ratingPredicate \u003d new BookRatingMatchesScorePredicate(ratingStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return namePredicate.test(book)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 authorPredicate.test(book)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 tagPredicate.test(book)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ratingPredicate.test(book);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookListFilterPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 namePredicate.equals(((BookListFilterPredicate) other).namePredicate)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 authorPredicate.equals(((BookListFilterPredicate) other).authorPredicate)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((BookListFilterPredicate) other).tagPredicate)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ratingPredicate.equals(((BookListFilterPredicate) other).ratingPredicate)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Book\u0027s name in the BookShelf."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBookName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            \"Book names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Constructs a {@code BookName}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookName(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        checkArgument(isValidBookName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static boolean isValidBookName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 fullName.equals(((BookName) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 2,
      "0blivious": 57,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookNameContainsExactKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookName} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsExactKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookNameContainsExactKeywordsPredicate(BookName bookName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(bookName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.keywords \u003d bookName.fullName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return keywords.equalsIgnoreCase(book.getBookName().fullName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookNameContainsExactKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 keywords.equals(((BookNameContainsExactKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getBookName().fullName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookNameContainsKeywordsPredicate) other).keywords)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookNameContainsKeywordsPredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 5,
      "0blivious": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookRatingMatchesScorePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookRating} match the given score."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookRatingMatchesScorePredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookRatingMatchesScorePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .anyMatch(x -\u003e x.equals(book.getRating().value));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookRatingMatchesScorePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookRatingMatchesScorePredicate) other).keywords)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookRatingMatchesScorePredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookTagsContainExactKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookTag} containes all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookTagsContainExactKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookTagsContainExactKeywordsPredicate(List\u003cString\u003e inputKeywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        keywords \u003d inputKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Iterator\u003cTag\u003e itr \u003d book.getTags().iterator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            String tagStr \u003d itr.next().tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    .anyMatch(str -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                            str.equalsIgnoreCase(tagStr))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookTagsContainExactKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookTagsContainExactKeywordsPredicate) other).keywords)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookTagsContainExactKeywordsPredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Rating.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Represents a Book\u0027s rating number in the book shelf."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            \"Ratings should only contain numbers, and it should be in the range of 0 to 10\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]|10\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param rating A valid rating number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        value \u003d rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a given string is a valid rating number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueBookList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A list of books that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A book is considered unique by comparing using {@code Book#isSameBook(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * books uses Book#isSameBook(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * @see Book#isSameBook(Book)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!target.isSameBook(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the contents of this list with {@code books}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!booksAreUnique(books)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Sort the books with {@code type} in {@code order}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param type sorting type"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param order order of sorting"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void sortBooks(String type, String order) throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        requireAllNonNull(type, order);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        type \u003d type.toUpperCase();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        order \u003d order.toUpperCase();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case \"AUTHOR\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if (order.equals(\"ASC\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                internalList.sort(Comparator.comparing(a -\u003e a.getAuthor().toString().toLowerCase()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            } else if (order.equals(\"DES\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                internalList.sort((a, b)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    -\u003e b.getAuthor().toString().toLowerCase().compareTo(a.getAuthor().toString().toLowerCase()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case \"NAME\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if (order.equals(\"ASC\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                internalList.sort(Comparator.comparing(a -\u003e a.getBookName().toString().toLowerCase()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            } else if (order.equals(\"DES\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                internalList.sort((a, b)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    -\u003e b.getBookName().toString().toLowerCase().compareTo(a.getBookName().toString().toLowerCase()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case \"RATING\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if (order.equals(\"ASC\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                FXCollections.sort(internalList, Comparator.comparingInt(a -\u003e Integer.valueOf(a.getRating().value)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            } else if (order.equals(\"DES\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                FXCollections.sort(internalList, (a, b)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    -\u003e Integer.valueOf(b.getRating().value) - Integer.valueOf(a.getRating().value));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new Exception(\"Unknown sorting type\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private boolean booksAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                if (books.get(i).isSameBook(books.get(j))) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 44,
      "0blivious": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Signals that the operation will result in duplicate Books (Books are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        super(\"Operation would result in duplicate books\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains utility methods for populating {@code BookShelf} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Book[] getSampleBooks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Madame Bovary\"), new Author(\"Gustave Flaubert\"), new Rating(\"8\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"classic\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Pride and Prejudice\"), new Author(\"Jane Austen\"), new Rating(\"6\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"novel\", \"romantic\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Green Eggs and Ham\"), new Author(\"Dr Seuss\"), new Rating(\"7\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"children\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"The Adventures of Tintin\"), new Author(\"Georges Remi\"), new Rating(\"5\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"adventure\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Gone Girl\"), new Author(\"Gillian Flynn\"), new Rating(\"4\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"thriller\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"One Hundred Years of Solitude\"), new Author(\"Garcia Marquez\"), new Rating(\"9\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"fantasy\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static ReadOnlyBookShelf getSampleBookShelf() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf sampleAb \u003d new BookShelf();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (Book sampleBook : getSampleBooks()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            sampleAb.addBook(sampleBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 12,
      "-": 54,
      "0blivious": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Represents a storage for {@link BookShelf}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns BookShelf data as a {@link ReadOnlyBookShelf}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Saves the given {@link ReadOnlyBookShelf} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void saveAddressBook(ReadOnlyBookShelf addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyBookShelf)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void saveAddressBook(ReadOnlyBookShelf addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void backupAddressBook(ReadOnlyBookShelf addressBook) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "0blivious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BookShelfStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Represents a storage for {@link BookShelf}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public interface BookShelfStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns BookShelf data as a {@link ReadOnlyBookShelf}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see #getBookShelfFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readBookShelf(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Saves the given {@link ReadOnlyBookShelf} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param bookShelf cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see #saveBookShelf(ReadOnlyBookShelf)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void backupBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Jackson-friendly version of {@link Book}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "class JsonAdaptedBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String bookname;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String author;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given book details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonAdaptedBook(@JsonProperty(\"bookname\") String bookname, @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                           @JsonProperty(\"rating\") String rating, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookname \u003d bookname;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookname \u003d source.getBookName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        author \u003d source.getAuthor().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final List\u003cTag\u003e bookTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bookTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (bookname \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                BookName.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!BookName.isValidBookName(bookname)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final BookName modelBookName \u003d new BookName(bookname);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!Author.isValidAuthor(author)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final Author modelAuthor \u003d new Author(author);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(bookTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new Book(modelBookName, modelAuthor, modelRating, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A class to access BookShelf data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void saveAddressBook(ReadOnlyBookShelf addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyBookShelf)}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void saveAddressBook(ReadOnlyBookShelf addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void backupAddressBook(ReadOnlyBookShelf addressBook) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "0blivious": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBookShelfStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * A class to access BookShelf data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonBookShelfStorage implements BookShelfStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBookShelfStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonBookShelfStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return readBookShelf(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Similar to {@link #readBookShelf()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Optional\u003cJsonSerializableBookShelf\u003e jsonBookShelf \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                filePath, JsonSerializableBookShelf.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!jsonBookShelf.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return Optional.of(jsonBookShelf.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(bookShelf, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Similar to {@link #saveBookShelf(ReadOnlyBookShelf)}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(bookShelf);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBookShelf(bookShelf), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void backupBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(bookShelf, backupFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * An Immutable BookShelf that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Converts a given {@code ReadOnlyBookShelf} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyBookShelf source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Converts this address book into the model\u0027s {@code BookShelf} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelf toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf addressBook \u003d new BookShelf();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "0blivious": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * An Immutable BookShelf that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@JsonRootName(value \u003d \"bookshelf\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "class JsonSerializableBookShelf {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"Book list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cJsonAdaptedBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Constructs a {@code JsonSerializableBookShelf} with the given books."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonSerializableBookShelf(@JsonProperty(\"books\") List\u003cJsonAdaptedBook\u003e books) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.books.addAll(books);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts a given {@code ReadOnlyBookShelf} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBookShelf}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonSerializableBookShelf(ReadOnlyBookShelf source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        books.addAll(source.getBookList().stream().map(JsonAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts this book shelf into the model\u0027s {@code BookShelf} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookShelf toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf bookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (JsonAdaptedBook jsonAdaptedBook : books) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Book book \u003d jsonAdaptedBook.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (bookShelf.hasBook(book)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bookShelf.addBook(book);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelf;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public interface Storage extends BookShelfStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 5,
      "-": 27,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Manages storage of BookShelf data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookShelfStorage bookShelfStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public StorageManager(BookShelfStorage bookShelfStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookShelfStorage \u003d bookShelfStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookShelf methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelfStorage.getBookShelfFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return readBookShelf(bookShelfStorage.getBookShelfFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelfStorage.readBookShelf(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(bookShelf, bookShelfStorage.getBookShelfFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStorage.saveBookShelf(bookShelf, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void backupBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStorage.backupBookShelf(bookShelf);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 18,
      "-": 60,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BookListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on BookShelf level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        name.setText(book.getBookName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        author.setText(book.getAuthor().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        rating.setText(book.getRating().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        initTags(book);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Creates the tag labels for {@code book}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void initTags(Book book) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        book.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 88,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Panel containing the list of books."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList, ObservableValue\u003cBook\u003e selectedbook,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                           Consumer\u003cBook\u003e onSelectedbookChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BookListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            logger.fine(\"Selection in book list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            onSelectedbookChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        selectedbook.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            logger.fine(\"Selected book changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected book,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (Objects.equals(bookListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                int index \u003d bookListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code book} using a {@code bookCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookBrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private StackPane bookListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        browserPanel \u003d new BookBrowserPanel(logic.selectedBookProperty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList(), logic.selectedBookProperty(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                logic::setSelectedBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getBookShelfFilePath(), logic.getBookShelf());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 10,
      "-": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on BookShelf level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyBookShelf addressBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "         title\u003d\"Book Squirrel\" minWidth\u003d\"750\" minHeight\u003d\"850\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"bookList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "EleenYang": 1,
      "-": 66
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Person with invalid name field: The K\u0026d\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Lewis Carroll\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonBookShelfStorageTest/invalidAndValidBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Valid Book\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Lewis Carroll\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Book With Invalid Author Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"J.K\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 11
    }
  },
  {
    "path": "src/test/data/JsonBookShelfStorageTest/invalidBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"name\": \"Book with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 8
    }
  },
  {
    "path": "src/test/data/JsonBookShelfStorageTest/notJsonFormatBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookShelfTest/duplicateBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Alice in Wonderland\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Lewis Carroll\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\": [ \"fantasy\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Alice in Wonderland\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Hal Abelson Jerry Sussman\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"4\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookShelfTest/invalidBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Alice in Wonderland\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Lewis Carroll\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"11\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookShelfTest/typicalBooksBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"_comment\": \"BookShelf save file which contains the same Book values as in TypicalBooks#getTypicalBookShelf()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Book Thief\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Markus Zusak\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"7\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ \"popular\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Hunger Games\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Suzanne Collins\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"6\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ \"fantasy\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Kite Runner\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Khaled Hosseini\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"8\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"Life of Pi\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Yann Martel\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"9\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ \"fantasy\" ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Brief Wondrous Life of Oscar Wao\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Junot Diaz\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"4\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"Middlesex\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Jeffrey Eugenides\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"6\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 34
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BookListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class BookListPanelHandle extends NodeHandle\u003cListView\u003cBook\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BOOK_LIST_VIEW_ID \u003d \"#bookListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cBook\u003e lastRememberedSelectedBookCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookListPanelHandle(ListView\u003cBook\u003e bookListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(bookListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cBook\u003e selectedBookList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedBookList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(BookCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedBookList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cBook\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(Book book) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(book)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(book);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookCardHandle getBookCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(BookCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            .filter(handle -\u003e handle.equals(getBook(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Book getBook(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Remembers the selected {@code BookCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void rememberSelectedBookCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedBookCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedBookCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean isSelectedBookCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedBookCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedBookCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                || !lastRememberedSelectedBookCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected Supplier\u003cReadOnlyBookShelf\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyBookShelf\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            JsonBookShelfStorage jsonBookShelfStorage \u003d new JsonBookShelfStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                jsonBookShelfStorage.saveBookShelf(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        userPrefs.setBookShelfFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns a defensive copy of the book shelf data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookShelf readStorageBookShelf() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return new BookShelf(storage.readBookShelf().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"Data is not in the BookShelf format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return storage.getBookShelfFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model copy \u003d new ModelManager((model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelHelper.setFilteredBookList(copy, model.getFilteredBookList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 8,
      "-": 95,
      "0blivious": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage bookShelfStorage \u003d new JsonBookShelfStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String deleteBookCommand \u003d \"deleteBook 20\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandException(deleteBookCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertHistoryCorrect(deleteBookCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(clearCommand, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertHistoryCorrect(clearCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Setup LogicManager with JsonBookShelfIoExceptionThrowingStub"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage bookShelfStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonBookShelfIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Execute add book command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String addBookCommand \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(ALI).withTags().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        //test add book command for book shelf"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.addBook(expectedBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBehavior(CommandException.class, addBookCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertHistoryCorrect(addBookCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        logic.getFilteredBookList().remove(0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *      - {@code expectedModel}\u0027s book list was saved to the storage file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void saveAddressBook(ReadOnlyBookShelf addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static class JsonBookShelfIoExceptionThrowingStub extends JsonBookShelfStorage {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        private JsonBookShelfIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 38,
      "-": 171,
      "0blivious": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddBookCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddBookCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_newBook_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new AddBookCommand(validBook), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(AddBookCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookInList \u003d model.getBookShelf().getBookList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new AddBookCommand(bookInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 32,
      "0blivious": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        new AddBookCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        CommandResult commandResult \u003d new AddBookCommand(validBook).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(String.format(AddBookCommand.MESSAGE_SUCCESS, validBook), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addCommand \u003d new AddBookCommand(validBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBook(validBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expectMessage(AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book alice \u003d new BookBuilder().withBookName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bob \u003d new BookBuilder().withBookName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addAliceCommand \u003d new AddBookCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addBobCommand \u003d new AddBookCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addAliceCommandCopy \u003d new AddBookCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBookShelfFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBookShelf(ReadOnlyBookShelf newData) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void deleteBook(Book book) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoBookShelf() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoBookShelf() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoBookShelf() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoBookShelf() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitBookShelf() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyProperty\u003cBook\u003e selectedBookProperty() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Book getSelectedBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setSelectedBook(Book book) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public void sortBook(String type, String order) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * A Model stub that contains a single book."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private class ModelStubWithBook extends ModelStub {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelStubWithBook(Book book) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return this.book.isSameBook(book);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * A Model stub that always accept the book being added."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private class ModelStubAcceptingBookAdded extends ModelStub {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return booksAdded.stream().anyMatch(book::isSameBook);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            booksAdded.add(book);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitBookShelf() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // called by {@code AddBookCommand#execute()}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new BookShelf();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 5,
      "0blivious": 296,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Person personInList \u003d model.getBookShelf().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "0blivious": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBookShelfFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBookShelf(ReadOnlyBookShelf newData) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void deleteBook(Book book) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoBookShelf() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoBookShelf() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoBookShelf() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoBookShelf() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitBookShelf() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyProperty\u003cBook\u003e selectedBookProperty() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Book getSelectedBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setSelectedBook(Book book) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public void sortBook(String type, String order) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitBookShelf() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new BookShelf();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 5,
      "EleenYang": 6,
      "-": 246,
      "0blivious": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBookShelf(new BookShelf());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "0blivious": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEWTITLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_BOOKNAME_ALICE \u003d \"Alice in Wonderland\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_BOOKNAME_CS \u003d \"Structure and Interpretation of Computer Programs\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_BOOKNAME_PART_ALICE \u003d \"Alice\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_BOOKNAME_PART_CS \u003d \"Computer\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_AUTHOR_ALICE \u003d \"Lewis Carroll\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_AUTHOR_CS \u003d \"Hal Abelson Jerry Sussman\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_AUTHOR_PART_ALICE \u003d \"Carroll\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_AUTHOR_PART_CS \u003d \"Sussman\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_RATING_ALICE \u003d \"5\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_RATING_CS \u003d \"4\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_TAG_FANTASY \u003d \"fantasy\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_TAG_TEXTBOOK \u003d \"textbook\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_TAG_INTERESTING \u003d \"interesting\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_REVIEWTITLE_ALICE \u003d \"Carroll has depicted a unique world I hadn\u0027t seen before\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_REVIEWTITLE_CS \u003d \"The book was awesome\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_REVIEWMESSAGE_ALICE \u003d \"Alice\u0027s Adventures in Wonderland by Lewis Carroll is \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"about Alice who falls down a rabbit hole and lands into a fantasy world that is full of weird, \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"wonderful people and animals.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_REVIEWMESSAGE_CS \u003d \"It provides a great introduction to computer science. \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The legendary SICP reminded me of the the Bible in many respects. \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String NAME_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String NAME_DESC_CS \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String NAME_PART_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_PART_ALICE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String NAME_PART_DESC_CS \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_PART_CS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String AUTHOR_DESC_ALICE \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String AUTHOR_DESC_CS \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String AUTHOR_PART_DESC_ALICE \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_PART_ALICE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String AUTHOR_PART_DESC_CS \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_PART_CS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String RATING_DESC_ALICE \u003d \" \" + PREFIX_RATING + VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String RATING_DESC_CS \u003d \" \" + PREFIX_RATING + VALID_RATING_CS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String TAG_DESC_FANTASY \u003d \" \" + PREFIX_TAG + VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String TAG_DESC_TEXTBOOK \u003d \" \" + PREFIX_TAG + VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String TAG_DESC_INTERESTING \u003d \" \" + PREFIX_TAG + VALID_TAG_INTERESTING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REVIEWTITLE_DESC_ALICE \u003d \" \" + PREFIX_REVIEWTITLE + VALID_REVIEWTITLE_ALICE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REVIEWTITLE_DESC_CS \u003d \" \" + PREFIX_REVIEWTITLE + VALID_REVIEWTITLE_CS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REVIEWMESSAGE_DESC_ALICE \u003d \" \" + PREFIX_REVIEW + VALID_REVIEWMESSAGE_ALICE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REVIEWMESSAGE_DESC_CS \u003d \" \" + PREFIX_REVIEW + VALID_REVIEWMESSAGE_CS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String INVALID_BOOKNAME_DESC \u003d \" \" + PREFIX_NAME + \"The K\u0026d\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String INVALID_AUTHOR_DESC \u003d \" \" + PREFIX_AUTHOR + \"J.K\"; // \u0027.\u0027 not allowed in authors"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"11\"; // rating should be [1,10]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String INVALID_REVIEWTITLE_DESC \u003d \" \" + PREFIX_RATING + \"100%\"; // \u0027%\u0027 not allowed in reviews"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final EditBookDescriptor DESC_ALI;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final EditBookDescriptor DESC_CS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DESC_ALI \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_ALICE)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_ALICE).withRating(VALID_RATING_ALICE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DESC_CS \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_CS).withRating(VALID_RATING_CS)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf expectedAddressBook \u003d new BookShelf(actualModel.getBookShelf());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getBookShelf());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void showBookAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(new BookNameContainsExactKeywordsPredicate(book.getBookName()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book of the given {@code name} in the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code model}\u0027s book shelf. The book should be present in the book shelf."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void showBookOfExactName(Model model, BookName name) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(new BookNameContainsExactKeywordsPredicate(name));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Deletes the first book in {@code model}\u0027s filtered list from {@code model}\u0027s book shelf."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void deleteFirstBook(Model model) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(0);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.deleteBook(firstBook);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 10,
      "-": 163,
      "0blivious": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * {@code DeleteBookCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBookCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidBookNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new DeleteBookCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBookCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showNoBook(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // delete -\u003e first book deleted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e same first book deleted again"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Deletes a {@code Book} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted book in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the book object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameBookDeleted() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // delete -\u003e deletes second book in unfiltered book list / first book in filtered book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // undo -\u003e reverts bookShelf back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertNotEquals(bookToDelete, model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e deletes same second book in unfiltered book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteFirstCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteSecondCommand \u003d new DeleteBookCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteFirstCommandCopy \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void showNoBook(Model model) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "0blivious": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts bookShelf back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 172,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * and unit tests for EditBookCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index indexLastBook \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book lastBook \u003d model.getFilteredBookList().get(indexLastBook.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookBuilder bookInList \u003d new BookBuilder(lastBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d bookInList.withBookName(VALID_BOOKNAME_CS).withAuthor(VALID_AUTHOR_CS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_CS).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(indexLastBook, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(lastBook, editedBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, new EditBookDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookInFilteredList \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder(bookInFilteredList).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBookUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(firstBook).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_SECOND_BOOK, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBookFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // edit book in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookInList \u003d model.getBookShelf().getBookList().get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new EditBookDescriptorBuilder(bookInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // edit -\u003e first book edited"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e same first book edited again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Edits a {@code Book} from a filtered list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited book in the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the book object regardless of indexing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameBookEdited() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // edit -\u003e edits second book in unfiltered book list / first book in filtered book list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertNotEquals(model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()), bookToEdit);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e edits same second book in unfiltered book list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        final EditBookCommand standardCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, DESC_ALI);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor copyDescriptor \u003d new EditBookDescriptor(DESC_ALI);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand commandWithSameValues \u003d new EditBookCommand(INDEX_FIRST_BOOK, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBookCommand(INDEX_SECOND_BOOK, DESC_ALI)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBookCommand(INDEX_FIRST_BOOK, DESC_CS)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "0blivious": 235,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand.EditBookDescriptor descriptorWithSameValues \u003d new EditBookDescriptor(DESC_ALI);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(DESC_ALI.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(DESC_ALI.equals(DESC_ALI));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withBookName(VALID_BOOKNAME_CS)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI).withRating(VALID_RATING_CS).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Person personInList \u003d model.getBookShelf().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 239,
      "0blivious": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command3 \u003d \"deleteBook n/Alice\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.HUNGERGAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code listBookCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookListFilterPredicate(Collections.singletonList(\"first\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"first\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"first\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookListFilterPredicate(Collections.singletonList(\"second\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"second\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"second\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand listFirstCommand \u003d new ListBookCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand listSecondCommand \u003d new ListBookCommand(secondPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand listFirstCommandCopy \u003d new ListBookCommand(firstPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(listFirstCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(listFirstCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(listFirstCommand.equals(listSecondCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void execute_zeroKeywords() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 6);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authors \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratings \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d preparePredicate(names, authors, tags, ratings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d new ListBookCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void execute_multipleKeyWords() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"Thief\"};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"Zusak\"};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr3 \u003d {\"popular\"};"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr4 \u003d {\"7\"};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d preparePredicate(Arrays.asList(arr1),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr2),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr3),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr4));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d new ListBookCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(Arrays.asList(BOOKTHIEF), model.getFilteredBookList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void execute_multipleBooksFound() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"The\"};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"Zusak\", \"Collins\"};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr3 \u003d {\"popular\", \"fantasy\"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr4 \u003d {\"6\", \"7\"};"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d preparePredicate(Arrays.asList(arr1),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr2),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr3),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr4));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d new ListBookCommand(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(Arrays.asList(BOOKTHIEF, HUNGERGAME), model.getFilteredBookList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookListFilterPredicate preparePredicate(List\u003cString\u003e names, List\u003cString\u003e authors, List\u003cString\u003e tags,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            List\u003cString\u003e ratings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new BookListFilterPredicate(names, authors, tags, ratings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 120,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoBookShelf();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoBookShelf();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 41,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getBookShelf().getPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 37,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BOOKNAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INTERESTING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INTERESTING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private AddBookCommandParser parser \u003d new AddBookCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(CS).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS + AUTHOR_DESC_CS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + RATING_DESC_CS + TAG_DESC_TEXTBOOK, new AddBookCommand(expectedBook));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple book names - last name accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK, new AddBookCommand(expectedBook));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple author - last author accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS + AUTHOR_DESC_ALICE + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK, new AddBookCommand(expectedBook));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple ratings - last rating accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_ALICE + RATING_DESC_CS"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK, new AddBookCommand(expectedBook));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedBookMultipleTags \u003d new BookBuilder(CS).withTags(VALID_TAG_TEXTBOOK, VALID_TAG_INTERESTING)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK + TAG_DESC_INTERESTING, new AddBookCommand(expectedBookMultipleTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(ALI).withTags().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE + AUTHOR_DESC_ALICE + RATING_DESC_ALICE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new AddBookCommand(expectedBook));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + AUTHOR_DESC_CS + RATING_DESC_CS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // missing author prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + VALID_AUTHOR_CS + RATING_DESC_CS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // missing rating prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_CS + VALID_RATING_CS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_AUTHOR_CS + VALID_RATING_CS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, INVALID_BOOKNAME_DESC + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK, BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + INVALID_AUTHOR_DESC + RATING_DESC_CS"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_CS + INVALID_RATING_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_INTERESTING + TAG_DESC_TEXTBOOK, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FANTASY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, INVALID_BOOKNAME_DESC + AUTHOR_DESC_CS + RATING_DESC_CS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + TAG_DESC_INTERESTING + TAG_DESC_TEXTBOOK,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BookShelfParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookShelfParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookShelfParser parser \u003d new BookShelfParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseCommand_addBook() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand command \u003d (AddBookCommand) parser.parseCommand(BookUtil.getAddBookCommand(book));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new AddBookCommand(book), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseCommand_deleteBook() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand command \u003d (DeleteBookCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                DeleteBookCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new DeleteBookCommand(INDEX_FIRST_BOOK), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseCommand_editBook() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(book).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand command \u003d (EditBookCommand) parser.parseCommand(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + BookUtil.getEditBookDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new EditBookCommand(INDEX_FIRST_BOOK, descriptor), command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void parseCommand_listBook() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d (ListBookCommand) parser.parseCommand(BookUtil.getListBookCommand(book));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(book.getBookName().fullName),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(book.getAuthor().fullName),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                book.getTags().stream().map(x -\u003e x.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(book.getRating().value)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(new ListBookCommand(predicate), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 15,
      "-": 143,
      "0blivious": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * outside of the DeleteBookCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * same path through the DeleteBookCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private DeleteBookCommandParser parser \u003d new DeleteBookCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_validArgs_returnsDeleteBookCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteBookCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private EditBookCommandParser parser \u003d new EditBookCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, VALID_BOOKNAME_ALICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\", EditBookCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_ALICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_ALICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, BookName.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AUTHOR_DESC, Author.MESSAGE_CONSTRAINTS); // invalid author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid author followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AUTHOR_DESC + RATING_DESC_ALICE, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid author followed by invalid author. The test case for invalid author followed by valid author"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + AUTHOR_DESC_CS + INVALID_AUTHOR_DESC, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Book} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FANTASY + TAG_EMPTY + TAG_DESC_TEXTBOOK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_RATING_DESC + VALID_AUTHOR_ALICE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_CS + TAG_DESC_TEXTBOOK"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + RATING_DESC_ALICE + NAME_DESC_ALICE + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_ALICE)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_CS).withRating(VALID_RATING_ALICE)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK, VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_CS + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_CS)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withRating(VALID_RATING_ALICE).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_ALICE).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // author"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_ALICE).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withRating(VALID_RATING_ALICE).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + AUTHOR_DESC_ALICE + RATING_DESC_ALICE + TAG_DESC_FANTASY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + AUTHOR_DESC_CS + RATING_DESC_CS + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_CS)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withRating(VALID_RATING_CS).withTags(VALID_TAG_FANTASY, VALID_TAG_TEXTBOOK)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AUTHOR_DESC + AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_CS + INVALID_AUTHOR_DESC + AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_CS).withRating(VALID_RATING_CS).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_PART_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_PART_DESC_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_PART_ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_PART_CS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_PART_ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_PART_CS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private ListBookCommandParser parser \u003d new ListBookCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String namesStr1 \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String namesStr2 \u003d NAME_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String namesStr3 \u003d NAME_PART_DESC_ALICE + NAME_PART_DESC_CS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] namesArr1 \u003d {};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] namesArr2 \u003d {VALID_BOOKNAME_PART_ALICE};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] namesArr3 \u003d {VALID_BOOKNAME_PART_ALICE, VALID_BOOKNAME_PART_CS};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String authorsStr1 \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String authorsStr2 \u003d AUTHOR_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String authorsStr3 \u003d AUTHOR_PART_DESC_ALICE + AUTHOR_PART_DESC_CS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] authorsArr1 \u003d {};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] authorsArr2 \u003d {VALID_AUTHOR_PART_ALICE};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] authorsArr3 \u003d {VALID_AUTHOR_PART_ALICE, VALID_AUTHOR_PART_CS};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tagsStr1 \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tagsStr2 \u003d TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tagsStr3 \u003d TAG_DESC_TEXTBOOK + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] tagsArr1 \u003d {};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] tagsArr2 \u003d {VALID_TAG_TEXTBOOK};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] tagsArr3 \u003d {VALID_TAG_TEXTBOOK, VALID_TAG_FANTASY};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String ratingsStr1 \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String ratingsStr2 \u003d RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String ratingsStr3 \u003d RATING_DESC_ALICE + RATING_DESC_CS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] ratingsArr1 \u003d {};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] ratingsArr2 \u003d {VALID_RATING_ALICE};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] ratingsArr3 \u003d {VALID_RATING_ALICE, VALID_RATING_CS};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr1 \u003d PREAMBLE_WHITESPACE + namesStr1 + authorsStr1 + tagsStr1 + ratingsStr1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr2 \u003d PREAMBLE_WHITESPACE + namesStr2 + authorsStr2 + tagsStr2 + ratingsStr2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr3 \u003d PREAMBLE_WHITESPACE + namesStr3 + authorsStr3 + tagsStr3 + ratingsStr3;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate1 \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(namesArr1),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(authorsArr1),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(tagsArr1),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(ratingsArr1)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate2 \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(namesArr2),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(authorsArr2),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(tagsArr2),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(ratingsArr2)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate3 \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(namesArr3),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(authorsArr3),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(tagsArr3),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(ratingsArr3)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseSuccess(parser, argsStr1, new ListBookCommand(predicate1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseSuccess(parser, argsStr2, new ListBookCommand(predicate2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseSuccess(parser, argsStr3, new ListBookCommand(predicate3));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void parse_wrongValue_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr \u003d PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseFailure(parser, argsStr, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BookShelfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookShelfTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final BookShelf bookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(Collections.emptyList(), bookShelf.getBookList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.resetData(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void resetData_withValidReadOnlyBookShelf_replacesData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf newData \u003d getTypicalBookShelf();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(newData, bookShelf);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void resetData_withDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Two books with the same identity fields"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withBookName(VALID_BOOKNAME_ALICE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withTags(VALID_TAG_FANTASY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(ALI, editedAlice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelfStub newData \u003d new BookShelfStub(newBooks, 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.resetData(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.hasBook(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_bookNotInBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(bookShelf.hasBook(ALI));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_bookInBookShelf_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(bookShelf.hasBook(ALI));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_bookWithSameIdentityFieldsInBookShelf_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_CS).withTags(VALID_TAG_TEXTBOOK)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(bookShelf.hasBook(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void getBookShelf_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.getBookList().remove(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addListener(listener);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addListener(listener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.removeListener(listener);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * A stub ReadOnlyBookShelf whose persons / books list can violate interface constraints."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static class BookShelfStub implements ReadOnlyBookShelf {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelfStub(Collection\u003cBook\u003e books, int distinguish) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new BookShelf(), new BookShelf(modelManager.getBookShelf()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setBookShelfFilePath(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setBookShelfFilePath(path);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(path, modelManager.getBookShelfFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.hasBook(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void hasBook_bookNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void hasBook_bookInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(modelManager.hasBook(ALI));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void deleteBook_bookIsSelectedAndFirstBookInFilteredBookList_selectionCleared() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.deleteBook(ALI);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(null, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void deleteBook_bookIsSelectedAndSecondBookInFilteredBookList_firstBookSelected() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(CS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(Arrays.asList(ALI, CS), modelManager.getFilteredBookList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(CS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.deleteBook(CS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(ALI, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_bookIsSelected_selectedBookUpdated() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book updatedAlice \u003d new BookBuilder(ALI).withRating(VALID_RATING_ALICE).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setBook(ALI, updatedAlice);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.getFilteredBookList().remove(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setSelectedBook_bookNotInFilteredBookList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setSelectedBook_bookInFilteredBookList_setsSelectedBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(Collections.singletonList(ALI), modelManager.getFilteredBookList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(ALI, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf differentAddressBook \u003d new BookShelf();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 182,
      "0blivious": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedBookShelfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class VersionedBookShelfTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final ReadOnlyBookShelf bookShelfWithAlice \u003d new AddressBookBuilder().withBook(ALI).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final ReadOnlyBookShelf bookShelfWithCs \u003d new AddressBookBuilder().withBook(CS).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final ReadOnlyBookShelf bookShelfWithThief \u003d new AddressBookBuilder().withBook(BOOKTHIEF).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final ReadOnlyBookShelf emptyBookShelf \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void commit_singleBookList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void commit_multipleBookShelfPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(emptyBookShelf, bookShelfWithAlice, bookShelfWithCs),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithCs,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void commit_multipleBookShelfPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_multipleBookShelfPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_multipleBookShelfPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_singleBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_multipleBookShelfPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_multipleBookShelfPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_multipleBookShelfPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithThief);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_singleBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_multipleBookShelfPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_multipleBookShelfPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithAlice,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(bookShelfWithCs));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_multipleBookShelfPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(bookShelfWithAlice, bookShelfWithCs));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_singleBookShelf_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoUndoableStateException.class, versionedBookShelf::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_multipleBookShelfPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoUndoableStateException.class, versionedBookShelf::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_multipleBookShelfPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(emptyBookShelf, bookShelfWithAlice),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithCs,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_multipleBookShelfPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithAlice,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(bookShelfWithCs));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_singleBookShelf_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoRedoableStateException.class, versionedBookShelf::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_multipleBookShelfPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoRedoableStateException.class, versionedBookShelf::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf copy \u003d prepareBookShelfList(bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.equals(versionedBookShelf));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf differentBookShelfList \u003d prepareBookShelfList(bookShelfWithCs, bookShelfWithThief);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(differentBookShelfList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf differentCurrentStatePointer \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Asserts that {@code versionedBookList} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * states before {@code versionedBookList#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and states after {@code versionedBookList#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertBookShelfListStatus(VersionedBookShelf versionedBookShelf,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                                             List\u003cReadOnlyBookShelf\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                                             ReadOnlyBookShelf expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                                             List\u003cReadOnlyBookShelf\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(new BookShelf(versionedBookShelf), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        while (versionedBookShelf.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (ReadOnlyBookShelf expectedBookShelf : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            assertEquals(expectedBookShelf, new BookShelf(versionedBookShelf));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (ReadOnlyBookShelf expectedBookShelf : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            assertEquals(expectedBookShelf, new BookShelf(versionedBookShelf));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedBookShelf.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Creates and returns a {@code VersionedBookShelf} with the {@code bookShelfStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code VersionedBookShelf#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private VersionedBookShelf prepareBookShelfList(ReadOnlyBookShelf... bookShelfStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(bookShelfStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d new VersionedBookShelf(bookShelfStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (int i \u003d 1; i \u003c bookShelfStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.resetData(bookShelfStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return versionedBookShelf;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Shifts the {@code versionedBookShelf#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedBookShelf versionedBookShelf, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 299
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AuthorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Author(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_invalidAuthor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String invalidAuthor \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Author(invalidAuthor));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isValidAuthor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null author"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Author.isValidAuthor(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid author"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookAuthorContainsKeywordPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookAuthorContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookAuthorContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookAuthorContainsKeywordPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "               new BookAuthorContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Zero keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate predicate \u003d new BookAuthorContainsKeywordPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Collections.singletonList(\"Carroll\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Lewis\", \"Carroll\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Lewis\", \"Carroll\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Alice Carroll\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"lEWis\", \"cARROLL\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Carroll\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Lewis Zusak\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Keywords match name and rating, but does not match author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Alice\", \"Zusak\", \"9\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice\").withAuthor(\"Carroll\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withRating(\"9\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookListFilterPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookListFilterPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e namePredicateFirst \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authorPredicateFirst \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tagPredicateFirst \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratingPredicateFirst \u003d Collections.singletonList(\"1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e namePredicateSecond \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authorPredicateSecond \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tagPredicateSecond \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratingPredicateSecond \u003d Collections.singletonList(\"2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate firstPredicate \u003d new BookListFilterPredicate(namePredicateFirst, authorPredicateFirst,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                tagPredicateFirst, ratingPredicateFirst);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate secondPredicate \u003d new BookListFilterPredicate(namePredicateSecond,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                authorPredicateSecond, tagPredicateSecond, ratingPredicateSecond);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookListFilterPredicate(namePredicateFirst, authorPredicateFirst,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        tagPredicateFirst, ratingPredicateFirst);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookNameContainsExactKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsExactKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName firstPredicateKeywordList \u003d new BookName(\"first\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName secondPredicateKeywordList \u003d new BookName(\"second\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(new BookName(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Alice in Wonderland\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice in Wonderland\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Alice In WONDERLAND\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice In Wonderland\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(new BookName(\"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Keywords match author and rating, but does not match name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Rollin 9\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice\").withAuthor(\"Rollin\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withRating(\"9\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameContainsSomeKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Some keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(new BookName(\"Bob Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Some non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Carol\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Carol Bob\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Keywords in wrong order"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Bob Carol\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Carol Bob\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Zero keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookNameContainsKeywordsPredicate predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Keywords match author and rating, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Rollin\", \"9\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice\").withAuthor(\"Rollin\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withRating(\"9\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 7,
      "0blivious": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new BookName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_invalidBookName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String invalidBookName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new BookName(invalidBookName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isValidBookName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e BookName.isValidBookName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(BookName.isValidBookName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(BookName.isValidBookName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(BookName.isValidBookName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(BookName.isValidBookName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookRatingMatchesScorePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookRatingMatchesScorePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"1\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"2\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(arr1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(arr2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_ratingsContained_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"1\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(Arrays.asList(arr1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withRating(\"1\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"1\", \"2\"};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookRatingMatchesScorePredicate(Arrays.asList(arr2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withRating(\"2\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_ratingsNotcontained_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Non-matching rating"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"1\", \"2\"};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate predicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(Arrays.asList(arr1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withRating(\"3\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTagsContainExactKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookTagsContainExactKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"fantasy\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"textbook\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(arr1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(arr2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"fantasy\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(Arrays.asList(arr1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTags(\"fantasy\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTags(\"fantasy\", \"textbook\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"textbook\", \"fantasy\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookTagsContainExactKeywordsPredicate(Arrays.asList(arr2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTags(\"fantasy\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr \u003d {\"textbook\", \"fantasy\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate predicate \u003d new BookTagsContainExactKeywordsPredicate(Arrays.asList(arr));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withTags(\"popular\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        book.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.isSameBook(ALI));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.isSameBook(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(CS).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same name, same author, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same name, same phone, same email, same attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE).withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book aliceCopy \u003d new BookBuilder(ALI).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.equals(ALI));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(CS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/RatingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String invalidRating \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // blank rating"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"15\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"100\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"6162333\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"10-\")); // invalid symbol -"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"-6\")); // invalid symbol -"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"10.5\")); // invalid symbol ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"peterjack\")); // invalid alphabet character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"..;3\")); // invalid symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\" 10\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"10 \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0\")); // minimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"10\")); // maximal"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"6\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueBookListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_bookNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(uniqueBookList.contains(ALI));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_bookInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(uniqueBookList.contains(ALI));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_bookWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE).withTags(VALID_TAG_FANTASY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(uniqueBookList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add_duplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_nullTargetBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(null, ALI);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_nullEditedBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_targetBookNotInList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, ALI);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookIsSameBook_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, ALI);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_CS).withTags(VALID_TAG_TEXTBOOK)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, CS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(CS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookHasNonUniqueIdentity_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(CS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, CS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove_bookDoesNotExist_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.remove(ALI);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove_existingBook_removesBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.remove(ALI);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_nullUniqueBookList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks((UniqueBookList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_uniqueBookList_replacesOwnListWithProvidedUniqueBookList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(CS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks(expectedUniqueBookList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks((List\u003cBook\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(CS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks(bookList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(CS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_listWithDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(ALI, ALI);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks(listWithDuplicateBooks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonAdaptedBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_BOOKNAME \u003d \"The K\u0026d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_AUTHOR \u003d \"J.K\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_RATING \u003d \"11\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#good\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_BOOKNAME \u003d CS.getBookName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_AUTHOR \u003d CS.getAuthor().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_RATING \u003d CS.getRating().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_validBookDetails_returnsbook() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(CS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(CS, book.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidBookName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(INVALID_BOOKNAME, VALID_AUTHOR, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d BookName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullBookName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(null, VALID_AUTHOR, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BookName.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidAuthor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(VALID_BOOKNAME, INVALID_AUTHOR, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d Author.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullAuthor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_BOOKNAME, null, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(VALID_BOOKNAME, VALID_AUTHOR, INVALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_BOOKNAME, VALID_AUTHOR, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(VALID_BOOKNAME, VALID_AUTHOR, VALID_RATING, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, book::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonBookShelfStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.SECRETLIFE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonBookShelfStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBookShelfStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readBookShelf_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private java.util.Optional\u003cReadOnlyBookShelf\u003e readBookShelf(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new JsonBookShelfStorage(Paths.get(filePath)).readBookShelf(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(readBookShelf(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(\"notJsonFormatBookShelf.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readBookShelf_invalidBookBookShelf_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(\"invalidBookBookShelf.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readBookShelf_invalidAndValidBookBookShelf_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(\"invalidAndValidBookBookShelf.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readAndSaveBookShelf_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempBookShelf.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf original \u003d getTypicalBookShelf();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage jsonBookShelfStorage \u003d new JsonBookShelfStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        jsonBookShelfStorage.saveBookShelf(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ReadOnlyBookShelf readBack \u003d jsonBookShelfStorage.readBookShelf(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(original, new BookShelf(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        original.addBook(SECRETLIFE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        original.removeBook(BOOKTHIEF);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        jsonBookShelfStorage.saveBookShelf(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBack \u003d jsonBookShelfStorage.readBookShelf(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(original, new BookShelf(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        original.addBook(CS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        jsonBookShelfStorage.saveBookShelf(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBack \u003d jsonBookShelfStorage.readBookShelf().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(original, new BookShelf(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf_nullBookShelf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Saves {@code BookShelf} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void saveBookShelf(ReadOnlyBookShelf bookShelf, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new JsonBookShelfStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    .saveBookShelf(bookShelf, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(new BookShelf(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableBookShelfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonSerializableBookShelfTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBookShelfTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path TYPICAL_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBooksBookShelf.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path INVALID_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookBookShelf.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path DUPLICATE_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookBookShelf.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_typicalBooksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonSerializableBookShelf dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                JsonSerializableBookShelf.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf bookShelfFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf typicalBooksBookShelf \u003d TypicalBooks.getTypicalBookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(bookShelfFromFile, typicalBooksBookShelf);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonSerializableBookShelf dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOK_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                JsonSerializableBookShelf.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_duplicateBooks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonSerializableBookShelf dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                JsonSerializableBookShelf.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expectMessage(JsonSerializableBookShelf.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage bookShelfStorage \u003d new JsonBookShelfStorage(getTempFilePath(\"bs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        storageManager \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void bookShelfReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * {@link JsonBookShelfStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonBookShelfStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf original \u003d getTypicalBookShelf();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        storageManager.saveBookShelf(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ReadOnlyBookShelf retrieved \u003d storageManager.readBookShelf().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(original, new BookShelf(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertNotNull(storageManager.getBookShelfFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void getBookShelfFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertNotNull(storageManager.getBookShelfFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 13,
      "-": 59,
      "0blivious": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " *     {@code BookShelf ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private BookShelf bookShelf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public AddressBookBuilder(BookShelf bookShelf) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.bookShelf \u003d bookShelf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a new {@code Person} to the {@code BookShelf} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookShelf.addPerson(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a new {@code Book} to the {@code BookShelf} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public AddressBookBuilder withBook(Book book) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookShelf.addBook(book);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelf build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return bookShelf;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "0blivious": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Harry Potter and the Deathly Hallows\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"JK Rowling\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"7\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private BookName bookName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cReview\u003e reviews;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookName \u003d new BookName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        reviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookName \u003d bookToCopy.getBookName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author \u003d bookToCopy.getAuthor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        rating \u003d bookToCopy.getRating();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bookToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        reviews \u003d new HashSet\u003c\u003e(bookToCopy.getReviews());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code BookName} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withBookName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.bookName \u003d new BookName(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Author} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Rating} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Review} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookBuilder withReview(HashSet\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reviews \u003d reviews;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Book(bookName, author, rating, tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 76,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an add command string for adding the {@code book}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getAddBookCommand(Book book) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return AddBookCommand.COMMAND_WORD + \" \" + getBookDetails(book);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an delete command string for delete the {@code book}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getDeleteBookCommand(Book book) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return DeleteBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + book.getBookName().fullName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the part of command string for the given {@code book}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getBookDetails(Book book) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        sb.append(PREFIX_NAME + book.getBookName().fullName + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().fullName + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        sb.append(PREFIX_RATING + book.getRating().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        book.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the part of command string for the listBookCommand for one book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static String getListBookCommand(Book book) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(ListBookCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(PREFIX_NAME + book.getBookName().fullName + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().fullName + \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        book.getTags().stream().forEach("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(PREFIX_RATING + book.getRating().value + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the part of command string for the given {@code EditBookDescriptor}\u0027s details."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getEditBookDescriptorDetails(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.getAuthor().ifPresent(author -\u003e sb.append(PREFIX_AUTHOR).append(author.fullName).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 15,
      "0blivious": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBookDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class to help with building EditBookDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private EditBookDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.descriptor \u003d new EditBookDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an {@code EditBookDescriptor} with fields containing {@code book}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder(Book book) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setName(book.getBookName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setRating(book.getRating());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setAuthor(book.getAuthor());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setTags(book.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code BookName} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withBookName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setName(new BookName(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Author} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setAuthor(new Author(author));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditBookDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the person in the {@code model}\u0027s book list at {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Book getBook(Model model, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "0blivious": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBooks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class containing a list of {@code Book} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book BOOKTHIEF \u003d new BookBuilder().withBookName(\"The Book Thief\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Markus Zusak\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"7\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withTags(\"popular\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book HUNGERGAME \u003d new BookBuilder().withBookName(\"The Hunger Games\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Suzanne Collins\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"6\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withTags(\"fantasy\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book KITERUNNER \u003d new BookBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"The Kite Runner\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Khaled Hosseini\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"8\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book LIFEPI \u003d new BookBuilder().withBookName(\"Life of Pi\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Yann Martel\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"9\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withTags(\"fantasy\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book LIFEWAO \u003d new BookBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"The Brief Wondrous Life of Oscar Wao\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Junot Diaz\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"4\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book MIDDLESEX \u003d new BookBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"Middlesex\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Jeffrey Eugenides\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"6\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book SECRETLIFE \u003d new BookBuilder().withBookName(\"The Secret Life of Bees\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Sue Monk Kidd\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"3\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book TWILIGHT \u003d new BookBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"Twilight\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Stephenie Meyer\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"2\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Manually added - Book\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book ALI \u003d new BookBuilder().withBookName(VALID_BOOKNAME_ALICE).withAuthor(VALID_AUTHOR_ALICE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(VALID_RATING_ALICE).withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book CS \u003d new BookBuilder().withBookName(VALID_BOOKNAME_CS).withAuthor(VALID_AUTHOR_CS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(VALID_RATING_CS).withTags(VALID_TAG_TEXTBOOK, VALID_TAG_FANTASY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String KEYWORD_MATCHING_LIFE \u003d \"life\"; // A keyword that matches life"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String KEYWORD_MATCHING_PRIDE \u003d \"Pride\"; // A keyword that matches Pride"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_ZUSAK \u003d \"Zusak\"; // A keyword that matches Zusak"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_COLLINS \u003d \"Collins\"; //A keyword that matches Collins"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_SIX \u003d \"6\"; // A keyword that matches 6"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_FANTASY \u003d \"fantasy\"; // A keyword that matches fantasy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an {@code BookShelf} with all the typical books."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static BookShelf getTypicalBookShelf() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf bs \u003d new BookShelf();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bs.addBook(book);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BOOKTHIEF, HUNGERGAME, KITERUNNER, LIFEPI, LIFEWAO,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                MIDDLESEX));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 9,
      "0blivious": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an {@code BookShelf} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static BookShelf getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf ab \u003d new BookShelf();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "0blivious": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BookListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBooks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.BookGuiTestAssert.assertCardDisplaysBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.BookGuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookCardHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class BookListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cBook\u003e TYPICAL_BOOKS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.observableList(getTypicalBooks());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cBook\u003e selectedBook \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private BookListPanelHandle bookListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_BOOKS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_BOOKS.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            bookListPanelHandle.navigateToCard(TYPICAL_BOOKS.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Book expectedBook \u003d TYPICAL_BOOKS.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            BookCardHandle actualCard \u003d bookListPanelHandle.getBookCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysBook(expectedBook, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_BOOKS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Book secondBook \u003d TYPICAL_BOOKS.get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedBook.set(secondBook));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        BookCardHandle expectedBook \u003d bookListPanelHandle.getBookCardHandle(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        BookCardHandle selectedBook \u003d bookListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedBook, selectedBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cBook\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of books containing {@code bookCount} books that is used to populate the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookListPanel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cBook\u003e createBackingList(int bookCount) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cBook\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c bookCount; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            BookName name \u003d new BookName(i + \"a\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Author author \u003d new Author(\"john\" + i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Rating rating \u003d new Rating(Integer.toString(i % 10));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Book book \u003d new Book(name, author, rating, Collections.emptySet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(book);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code bookListPanelHandle} with a {@code BookListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code BookListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cBook\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        BookListPanel bookListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new BookListPanel(backingList, selectedBook, selectedBook::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(bookListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        bookListPanelHandle \u003d new BookListPanelHandle(getChildNode(bookListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            BookListPanelHandle.BOOK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BookMainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookHelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class BookMainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage jsonBookShelfStorage \u003d new JsonBookShelfStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonBookShelfStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(BookHelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A GUI unit test class for BookShelf."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage jsonBookShelfStorage \u003d new JsonBookShelfStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonBookShelfStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookShelf addressBook \u003d new BookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addPerson(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "0blivious": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/BookGuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BookCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BookGuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(BookCardHandle expectedCard, BookCardHandle actualCard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAuthor(), actualCard.getAuthor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getRating(), actualCard.getRating());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysBook(Book expectedBook, BookCardHandle actualCard) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedBook.getBookName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedBook.getAuthor().fullName, actualCard.getAuthor());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedBook.getRating().value, actualCard.getRating());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTagsEqual(expectedBook, actualCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * in {@code BookCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookCard #getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"popular\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"fantasy\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"classic\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"novel\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"black\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"romantic\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"children\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"thriller\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"adventure\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"textbook\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case \"boring\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return \"read\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void assertTagsEqual(Book expectedBook, BookCardHandle actualCard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedBook.getTags().stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code bookListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(BookListPanelHandle bookListPanelHandle, Book... books) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c books.length; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            bookListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysBook(books[i], bookListPanelHandle.getBookCardHandle(i));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code bookListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(BookListPanelHandle bookListPanelHandle, List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(bookListPanelHandle, books.toArray(new Book[0]));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code bookListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(BookListPanelHandle bookListPanelHandle, int size) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d bookListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 17,
      "-": 108
    }
  },
  {
    "path": "src/test/java/systemtests/AddBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.SECRETLIFE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.TWILIGHT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class AddBookCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book without tags to a non-empty book shelf, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book toAdd \u003d ALI;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command \u003d \"   \" + AddBookCommand.COMMAND_WORD + \"  \" + NAME_DESC_ALICE + \"  \" + AUTHOR_DESC_ALICE + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + RATING_DESC_ALICE + \"   \" + TAG_DESC_FANTASY + \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book with all fields same as another book in the book shelf except name -\u003e added */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d new BookBuilder(ALI).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_CS + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add to empty book shelf -\u003e added */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteAllBooks();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(ALI);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d CS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + TAG_DESC_FANTASY + AUTHOR_DESC_CS + NAME_DESC_CS"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK + RATING_DESC_CS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book, missing tags -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(SECRETLIFE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filters the book list before adding -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(TWILIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(SECRETLIFE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book except with different author -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d new BookBuilder(SECRETLIFE).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book except with different rating -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d new BookBuilder(SECRETLIFE).withRating(VALID_RATING_CS).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(toAdd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(SECRETLIFE) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + AUTHOR_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing author -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing rating -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d \"adds \" + BookUtil.getBookDetails(toAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + INVALID_NAME_DESC + AUTHOR_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid author -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + INVALID_AUTHOR_DESC + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE + INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes the {@code AddBookCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddBookCommand} with the details of"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. {@code Storage} and {@code BookListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(Book toAdd) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(BookUtil.getAddBookCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Book)}. Executes {@code command}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see AddBookCommandSystemTest#assertCommandSuccess(Book)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Book toAdd) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.addBook(toAdd);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddBookCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Book)} except asserts that"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. {@code Storage} and {@code BookListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see AddBookCommandSystemTest#assertCommandSuccess(String, Book)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. {@code Storage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "0blivious": 211
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 248
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A system test class for BookShelf, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected BookShelf getInitialData() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(getModel().getBookShelf().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getBookShelf().getPersonList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Displays all books with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void showBooksWithName(String keyword) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + keyword);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getFilteredBookList().size() \u003c getModel().getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(0, getModel().getBookShelf().getPersonList().size());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Deletes all books in the book shelf."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void deleteAllBooks() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(0, getModel().getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(new BookShelf(expectedModel.getBookShelf()), testApp.readStorageBookShelf());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 284,
      "0blivious": 20
    }
  },
  {
    "path": "src/test/java/systemtests/BookSampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.ui.testutil.BookGuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookSampleDataTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    protected BookShelf getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void bookShelf_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book[] expectedList \u003d SampleDataUtil.getSampleBooks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertListMatching(getBookListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 51
    }
  },
  {
    "path": "src/test/java/systemtests/BookShelfSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.BookWebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.BookGuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookBrowserPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookCommandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookMainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookMainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BookBrowserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for BookShelf, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BookShelfSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private BookMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private BookSystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookSystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new BookSystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected BookShelf getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return TypicalBooks.getTypicalBookShelf();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookMainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookCommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookListPanelHandle getBookListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBookListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookMainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookBrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Displays all books in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    protected void showAllBooks() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(ListBookCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(getModel().getBookShelf().getBookList().size(), getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all books with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showBooksWithName(String keyword) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + keyword);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredBookList().size() \u003c getModel().getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all books in the book shelf."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllBooks() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same book objects as {@code expectedModel}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and the book list panel displays the books in the model correctly."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(new BookShelf(expectedModel.getBookShelf()), testApp.readStorageBookShelf());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getBookListPanel(), expectedModel.getFilteredBookList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code BookListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        getBookListPanel().rememberSelectedBookCard();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookBrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BookBrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBookListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookBrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookListPanelHandle#isSelectedBookCardChanged()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        getBookListPanel().navigateToCard(getBookListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getBookListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BookBrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getBookListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookBrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookListPanelHandle#isSelectedBookCardChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(getBookListPanel().isSelectedBookCardChanged());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getBookListPanel(), getModel().getFilteredBookList());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BookBrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 14,
      "-": 264
    }
  },
  {
    "path": "src/test/java/systemtests/BookSystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BookMainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class BookSystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BookMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyBookShelf\u003e bookShelf, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(bookShelf, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookMainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new BookMainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_PRIDE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class ClearCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_PRIDE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "0blivious": 3
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.DeleteBookCommand.MESSAGE_DELETE_BOOK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TestUtil.getBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the first book in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command \u003d \"     \" + DeleteBookCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_BOOK.getOneBased() + \"     \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book deletedBook \u003d removeBook(expectedModel, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the last book in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index lastBookIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(lastBookIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: undo deleting the last book in the list -\u003e last book restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: redo deleting the last book in the list -\u003e last book deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        removeBook(modelBeforeDeletingLast, lastBookIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the middle book in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index middleBookIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(middleBookIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, delete index within bounds of book shelf and book list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, delete index within bounds of book shelf but out of bounds of book list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int invalidIndex \u003d getModel().getBookShelf().getBookList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* --------------------- Performing delete operation while a book card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the selected book -\u003e book list panel selects the book before the deleted book */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showAllBooks();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectBook(selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deletedBook \u003d removeBook(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                getModel().getBookShelf().getBookList().size() + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(DeleteBookCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(DeleteBookCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes the {@code Book} at the specified {@code index} in {@code model}\u0027s book shelf."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @return the removed book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Book removeBook(Model model, Index index) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book targetBook \u003d getBook(model, index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.deleteBook(targetBook);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return targetBook;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Deletes the book at {@code toDelete} by creating a default {@code DeleteBookCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see DeleteBookCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book deletedBook \u003d removeBook(expectedModel, toDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                DeleteBookCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see DeleteBookCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 136,
      "0blivious": 58
    }
  },
  {
    "path": "src/test/java/systemtests/EditBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BOOKNAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_PRIDE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command \u003d \" \" + EditBookCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_CS + \"  \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + AUTHOR_DESC_CS + \" \" + RATING_DESC_CS + \"  \" + \" \" + TAG_DESC_TEXTBOOK + \" \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder(CS).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: undo editing the last book in the list -\u003e last book restored */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: redo editing the last book in the list -\u003e last book edited again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.setBook(getModel().getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()), editedBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, CS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getBookShelf().getBookList().contains(CS));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertNotEquals(getModel().getFilteredBookList().get(index.getZeroBased()), CS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_ALICE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedBook \u003d new BookBuilder(CS).withBookName(VALID_BOOKNAME_ALICE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different author and rating"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_CS"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedBook \u003d new BookBuilder(CS).withAuthor(VALID_AUTHOR_ALICE).withRating(VALID_RATING_ALICE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedBook \u003d new BookBuilder(bookToEdit).withTags().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, edit index within bounds of address book and book list -\u003e edited */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_PRIDE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_CS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedBook \u003d new BookBuilder(bookToEdit).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, edit index within bounds of address book but out of bounds of book list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_PRIDE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int invalidIndex \u003d getModel().getBookShelf().getBookList().size();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_CS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* --------------------- Performing edit operation while a book card is selected -------------------------- */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: selects first card in the book list, edit a book -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showAllBooks();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectBook(index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        + NAME_DESC_ALICE + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // browser\u0027s url is updated to reflect the new book\u0027s name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, ALI, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" 0\" + NAME_DESC_CS,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" -1\" + NAME_DESC_CS,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredBookList().size() + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_CS,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + NAME_DESC_CS,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                EditBookCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + INDEX_FIRST_BOOK.getOneBased() + INVALID_BOOKNAME_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid author -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + INDEX_FIRST_BOOK.getOneBased() + INVALID_AUTHOR_DESC,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + \" \" + INDEX_FIRST_BOOK.getOneBased() + INVALID_RATING_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + INDEX_FIRST_BOOK.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(BookUtil.getAddBookCommand(CS));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getBookShelf().getBookList().contains(CS));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(getModel().getFilteredBookList().get(index.getZeroBased()).equals(CS));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different author -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_CS + AUTHOR_DESC_ALICE + RATING_DESC_CS"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different rating -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Book, Index)} except that"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see EditBookCommandSystemTest#assertCommandSuccess(String, Index, Book, Index)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Book editedBook) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedBook, null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditBookCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the book at index {@code toEdit} being"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * updated to values specified {@code editedBook}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see EditBookCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Book editedBook,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(expectedModel.getFilteredBookList().get(toEdit.getZeroBased()), editedBook);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see EditBookCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 299
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getBookShelf().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int invalidIndex \u003d getModel().getBookShelf().getPersonList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getBookShelf().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 295,
      "0blivious": 3
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(getModel().getBookShelf().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 194,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.ui.testutil.BookGuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import guitests.guihandles.BookHelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.ui.BookBrowserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class HelpCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        getBookListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(ListBookCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertNotEquals(BookBrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertListMatching(getBookListPanel(), getModel().getFilteredBookList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(DeleteBookCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(BookHelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(ERROR_MESSAGE, BookHelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        new BookHelpWindowHandle(guiRobot.getStage(BookHelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(ERROR_MESSAGE, BookHelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 14,
      "-": 91,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/systemtests/ListBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.HUNGERGAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_COLLINS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_FANTASY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_SIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_ZUSAK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.LIFEPI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.LIFEWAO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.MIDDLESEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String command \u003d \"   \" + ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + KEYWORD_MATCHING_LIFE + \"   \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, LIFEPI, LIFEWAO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: repeat previous find command where book list is displaying the books we are finding"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * -\u003e 2 books found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book where book list is not displaying the person we are finding -\u003e 1 book found */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, 2 keywords -\u003e 2 books found */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, BOOKTHIEF, HUNGERGAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, 2 keywords in reversed order -\u003e 2 books found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, 2 keywords with 1 repeat -\u003e 2 books found */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + \"NoKeywordMatching\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find same books in book shelf after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(getModel().getBookShelf().getBookList().contains(BOOKTHIEF));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book in book shelf, keyword is same as name but of different case -\u003e 1 book found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + \"cOLLIns\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book in book shelf, keyword is substring of name -\u003e 0 books found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Hun\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book in address book, author name is substring of keyword -\u003e 0 books found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + \"CollinsMoreLetters\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book not in book shelf -\u003e 0 books found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"NoBooksFound\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find rating of book in book shelf -\u003e 2 books found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_RATING + KEYWORD_MATCHING_SIX;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME, MIDDLESEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find tag of BOOK in book shelf -\u003e 2 books found */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_TAG + KEYWORD_MATCHING_FANTASY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME, LIFEPI);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find BOOK in empty book shelf -\u003e 0 books found */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        deleteAllBooks();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_TAG + KEYWORD_MATCHING_FANTASY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d \"LIstBOOk\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                MESSAGE_BOOKS_LISTED_OVERVIEW, expectedModel.getFilteredBookList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 188,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final Predicate\u003cBook\u003e PREDICATE_MATCHING_NO_BOOKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void setFilteredBookList(Model model, List\u003cBook\u003e toDisplay) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Optional\u003cPredicate\u003cBook\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getBookPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(predicate.orElse(PREDICATE_MATCHING_NO_BOOKS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static void setFilteredBookList(Model model, Book... toDisplay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        setFilteredBookList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Book} equals to {@code other}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static Predicate\u003cBook\u003e getBookPredicateMatching(Book other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return book -\u003e book.equals(other);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 7,
      "-": 39,
      "0blivious": 18
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected BookShelf getInitialData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 49,
      "0blivious": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int invalidIndex \u003d getModel().getBookShelf().getPersonList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 153,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyBookShelf\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code BookMainWindowHandle} and returns it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 71,
      "0blivious": 3
    }
  }
]
