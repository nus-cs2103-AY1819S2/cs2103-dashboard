[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d REstaurant Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "https://travis-ci.com/cs2103-ay1819S2-w11-2/main[image:https://travis-ci.com/cs2103-ay1819S2-w11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "https://ci.appveyor.com/project/cs2103-ay1819S2-w11-2/main[image:https://ci.appveyor.com/api/projects/status/9y18s4r61odarx8k?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819S2-w11-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819S2-w11-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* REstaurant Manager is a desktop application that turns your restaurant into a smart restaurant."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* REstaurant Manager has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* REstaurant Manager, as the name suggests, is intended for restaurant owners"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Manage your customer base"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Manage your staff"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Manage your bookings"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Manage your food inventory"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* This project was built off from AddressBook-Level4 project created by https://github.com/se-edu/[SE-EDU] initiative."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 12,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        \u0027site-name\u0027: \u0027REstaurant Manager\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819S2-w11-2/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "-": 234
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "REstaurant Manager was developed by the https://github.com/cs2103-ay1819S2-w11-2[W11-2] team based on previous work of the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d Ling Yan Hao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "image::lingyanhao.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "{empty}[https://github.com/lingyanhao[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Responsibilities: Deliverables and deadlines, Scheduling and tracking, in charge of Model component +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Working on: booking management feature"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d Wang Zhi Jian"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "image::zj-cs2103.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "{empty}[http://github.com/zj-cs2103[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Responsibilities: Integration, in charge of Logic component +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Working on: staff management feature"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d Lim Li"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "image::limli.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "{empty}[http://github.com/limli[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Role: Code quality +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Responsibilities: JavaFX expert, in charge of UI component +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Working on: customer management feature"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d Ren Ying"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "image::hiyingnn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "{empty}[http://github.com/hiyingnn[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Responsibilities: In charge of Storage component +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Working on: ingredient management feature"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 24,
      "-": 27
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819S2-w11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* *Email us* : You can also reach us at `e0174827 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d REstaurant Manager - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819S2-w11-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "By: `Team W11-2`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ".Structure of the Item Interface (split into a separate diagarm for clarity)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "image::ModelItemDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* stores the Restaurant Book data."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cItem\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Add Feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "The add feature allows the user to add items to the `RestaurantBook`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "It also populates the item added to the `RestaurantBook` with parameters supplied by the user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "The add feature is implemented as four separate commands, one for adding each type of item: `addMember`, `addBooking`, `addIngredient`, `addStaff`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Each command is implemented as a `AddCommand` class. For example, the `addMember` command is implemented as the `AddMember` class."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "All `AddCommand` class inherit from the `Command` class."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "As the general flow of the various add commands are similar, the `addMember` command will be used as an example here."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "The `AddMemberCommand` class adds the member to the `RestaurantBook` by utilising the `MemberModel#addMember` method exposed by the `MemberModel` interface, which facilitates the interaction with the `VersionedRestaurantBook` to add the member via the `VersionedRestaurantBook#addItem` method."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "The state of the `RestaurantBook` is then saved via the `Model#commitRestaurantBook` method exposed by the `Model` interface, which saves the `RestaurantBook` using the `VersionedRestaurantBook#commit` method."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "For the `AddBooking` command, the list of bookings is sorted after the new booking is added to ensure that bookings are ordered by time."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "The following sequence diagram demonstrates how the add feature works."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003cinsert sequence diagram\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "**Aspect: Implementation of the four add commands**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* **Alternative 1 (current choice)**: four separate add commands, one for each type of item"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "*** Easier implementation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "*** Causes code duplication, as all the add commands differ only by their parameters, and function similarly otherwise."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "*** More types of commands for the user to remember"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* **Alternative 2**: a single add command, with a type field to indicate the type of item to be added"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "** Pros"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "*** Reduces the number of distinct commands in the RestaurantBook, thus making the `RestaurantBook` a simpler application for users."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "** Cons"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "*** Complicates the add command as the parameters for the add command depend on the command type parameter passed into the command"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "*** May have to display a long usage guide comprising examples of adding all four types of items"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Decision: Alternative 1 was selected for the following reasons:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "** A greater variety of add commands is more intuitive than a single complex command."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "** Separating the add commands allows for greater versatility in customising the various add commands."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d Data structure for holding records"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Following the AB4 structure, the `RestaurantBook` (originally `AddressBook`) class serves as the main database, holding information of all records in the system. However, the database system required is more complicated than the one in AB4- there are four different kinds of records that need to be stored. The main operations are still largely CRUD (create, read, update, delete) in nature which are very similarly done. However, there are some differences between the types of records:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* Some commands such as `addBooking` needs to keep track of the `Capacity` of the restaurant- we must not allow the restaurant to be overbooked. There is no equivalent of this in the `addMember`, `addIngredient` or `addStaff` commands."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* The `editMember` command requires all `Booking` associated to the `Member` to have an updated copy of all the `Member` details. Again, there is no equivalent of this in the other edit-style commands."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "We created the interface `Item` to represent a record. A `UniqueItemList` was used to handle the bulk of the CRUD logic, much like the way the `UniquePersonList` in the original AB4 was used to handle the CRUD logic. As the `Staff` and `Member` class store common attributes (`Name`, `Phone`, `Email`), an abstract class `Person` was used to capture this. The relation between the types of `Item` is also captured in the class diagram of Figure 8. However, in the `Model` interface, the methods are kept separate (using methods like `addMember`, `addBooking` instead of having a more generic `addItem` method)."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of data structure"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* **Alternative 1 (current choice):** Use the `Item` interface to capture the similarity between records."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Pros: Reduces code duplication as we do not need separate classes `UniqueMemberList`, `UniqueBookingList`, `UniqueIngredientList`, `UniqueStaffList`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Cons: As the operations for different records are not exactly the same, RestaurantBook needs to be aware of the differences between the similar operations."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* **Alternative 2:** Create four separate classes which do not inherit from any parent class or interface."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Pros: The precise CRUD operations can be heavily customised for each type of record."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Cons: Lots of code duplication."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* Decision: Alternative 1 was adopted as the differences between the operations are relatively minor and can be done at the `RestaurantBook` level without creating too much confusion."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the model interface"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* **Alternative 1 (current choice):** Maintain separate methods for the similar-looking CRUD-style methods"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Cons: More code duplication, the `Model` API now contains many methods."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* **Alternative 2:** Generalize the methods so that there is only one of them for each type of command (e.g. `addItem` instead of `addBooking`, `addMember`) in the Model API."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Pros: Reduces the overall amount of code needed with less duplication. The `Model` API looks simpler on the surface with less methods."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Cons: Violates Separation of Concerns principle, due to the differences across the similar-looking methods. Since the implementation of various `add` commands are slightly different (`addBooking` needs to check the restaurant capacity first), many if-else statements will be required in the control flow of `RestaurantBook#addItem` method, potentially using `instanceof` checks. These `instanceof` checks can potentially violate type safety."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* Decision: Alternative 1 was adopted as we value simplicity over the potential problems that might arise with the generic methods."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d The `editMember` command"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "When a `Member` details (`Name`, `Phone`, or `Email`) is changed, the `Booking` object must reflect the change. This requires an internal modification to the `Booking` list."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "When `RestaurantBook#setMember()` is called, the bookings are replaced with a new set of bookings, in a way such that any `Booking` containing the modified member will be replaced with another `Booking` object that correctly reflects the modified customer."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "(Insert sequence diagram)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* **Alternative 1 (current choice):** Manually perform a corresponding change to the `Booking` list whenever the personal details of a member changes."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Pros: Easier to implement as it does not require much change to the already-existing AB4 codebase."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Cons: Poor efficiency. This involves scanning through the entire list of bookings just to change the personal details of a single `Member`. Also, if some other command changes a `Member` details without going through the `RestaurantBook#setMember()` method, the update will not be reflected."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* **Alternative 2:** Make the `Member` class mutable. Whenever the `Member` details changes, the `Booking` will automatically extract the correct details of the `Member` and nothing needs to be done."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Pros: This eases the load on the `RestaurantBook` class and does not require special treatment. It is also more efficient as no additional work is done."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Cons: The current `undo` and `redo` commands rely on the immutabilty of the `Member` class to work correctly. Doing so may require a huge change in implementation of `undo` and `redo` commands. Also, allowing mutable variables can potentially be a source of other bugs."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* **Alternative 3:** Assign each `Member` an ID and store the mapping from ID to `Member`. Instead of storing the full details of the `Member`, the `Booking` object simply stores the `ID` of the member that made the booking. When an update occurs, we simply need to update the ID to `Member` map."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Pros: Provides both lookup efficiency as well as immutability of the `Member` objects."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "** Cons: Uses additional data structure to store the mappings, potentially making the code more difficult to maintain."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* Decision: Alternative 1 was adopted as we felt that it was the simplest way to implement the feature. The additional efficiency gained may not even be significant, considering that in simple GUI apps like this, updating the UI is often the part of the program that uses the most resources. Optimizing the backend operations may not actually lead to a significant performance improvement."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d Delete Feature"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "The delete feature is used to delete a specific record in the restaurant book, i.e. deleting a member, staff, booking, ingredient or recipe."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "In comparison to the original AB4 codebase, REstaurant Manager has more than 1 type of record in the restaurant book, and has a high level of dependency/ coupling between certain components:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* Between Member and Booking: a booking contains a specific member -  Booking is highly coupled to Member"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* Between Ingredient and Recipe: a recipe contains ingredients – Recipe is highly coupled to Ingredient"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Therefore, there are some design considerations that we have to make when it comes to deleting a record."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* There are separate delete commands for each of the 4 components, namely `deleteMember`, `deleteBooking`, `deleteStaff`, `deleteIngredient` and `deleteRecipe`, and the command explicitly specifies the object being deleted. Each specific delete command has a `DeleteCommand` class that extends abstract class `Command` and is supported by a `CommandParser` class (e.g. `deleteIngredient` command has `deleteIngredientCommand` class and `deleteIngredientCommandParser` class)."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".Sequence Diagram for DeleteIngredient"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "image::DeleteIngredientSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* The delete commands are called by typing the component-specific command, followed by an index, which refers to the index number shown in the most recent listing (e.g. `deleteIngredient 3`)."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* When a member is deleted, all booking objects containing the deleted member must be similarly deleted.  Also, when an ingredient is deleted, all recipe objects containing the deleted ingredient must also be deleted."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "In other words, when RestaurantBook#deleteMember() or RestaurantBook#deleteIngredient() is called, this triggers all related bookings or ingredients to be deleted as well."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Separate delete commands/ Generic delete command"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* ** Alternative 1 (current choice):** separate commands for each component, i.e. `deleteMember`, `deleteBooking`, `deleteStaff`, `deleteIngredient`, `deleteRecipe` to delete from respective lists."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Pros: Easier implementation"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Cons:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Leads to code duplication, as each delete command requires an additional `Command` and `CommandParser` class."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Inconvenient for user to type out a longer command (e.g. `deleteIngredient` vs `delete`)."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* ** Alternative 2:** one generic delete command, requiring the model to determine the active list (currently displayed list on the panel), and to delete from that particular list"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Pros: Shorter commands required from user, (e.g. `delete` vs `deleteIngredient`)."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Cons: Requires user to type in additional command prior to the `delete` command (e.g. list or filter command), to change the state of the intended list to active."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* Decision: Alternative 1 was selected for the following reasons:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Aliases are implemented as a shortcut to the long commands (e.g. `db` for `deleteBooking`, `dm` for `deleteMember`). It is no longer inconvenient for users as they can type the shorter command."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** 4 panels are implemented in U/I (link to u/i segment), 1 panel for each component provides easy cross-reference across linked records, and this supports Alternative 1\u0027s implementation. All lists are active at the same time, and they display all unfiltered records by default. Firstly, it is hard for the user to detect an active list at first glance, since all lists are already displayed. Secondly, a specific delete command can be called without a prior command to mark the list as active (e.g.  `deleteIngredient` can be called directly to make changes to Ingredient list) which makes it more convenient for the user"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Deletion by index/ Deletion by field"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* ** Alternative 1 (current choice):** delete records by index in the most recent listing."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Pros:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Easier implementation as it does not require much change to the already-existing AB4 codebase."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Standardized command format for all delete commands (e.g. `deleteIngredient INDEX` and `deleteBooking INDEX`)."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Index for a record is easily identified from its corresponding list."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Cons:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Index may be incorrectly typed, especially if the list is too long or there are similar records in the list."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Unfiltered list may be too long for user to scroll through to find the index. Methods are required to filter the list or find a specific record before `delete INDEX` command is called."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* ** Alternative 2:** delete records by field."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Pros: Greater certainty that the right record is deleted."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Cons:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Variations in command format for each delete command. They may have different prefixes and fields that the user has to type in."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "** Some records are identified by more than 1 field, and all necessary fields must be provided for successful deletion of a record, making the command longer and harder to type (e.g. `deleteBooking` command requires `bookingWindow` and `customerName` fields to be present to delete a record)."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* Decision: Alternative 1 was adopted as we felt it was the simplest way to implement the feature."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Highly coupled records"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* ** Alternative 1 (current choice):** Deleting a member will result in the deletion of all bookings done by this member. Similarly, deleting an ingredient will result in the deletion of all recipes using this ingredient."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Pros: Easier to implement"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Cons: There is a possibility that the user accidentally deletes a record (e.g. member), and all other records (e.g. bookings made by this member) referencing this record is also accidentally deleted."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* ** Alternative 2:** Only records that are not referenced can be deleted. (e.g. During an attempt to delete a member that has made a booking, an error message is displayed to prompt the user that this member is referenced in the booking list. The user is required to manually delete all bookings done by this member before he is allowed to delete the member)."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Pros: Reduces the possibility that the user accidentally deletes a record (e.g. member), and all other records (e.g. bookings made by this member) referencing this record is also accidentally deleted."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*** Cons: Inconvenient for the user to manually remove all referencing records before he can delete the referenced record."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* Decision: Alternative 1 was adopted as it is an easier implementation and it makes it more convenient for the user to delete a record. It is intuitive that if a deleteMember or deleteIngredient command is called and these objects cease to exist in the restaurant book, the corresponding Booking or Recipe containing these objects should also cease to exist. To deal with the possibility that the member or ingredient is accidentally deleted, and all referenced bookings and recipes is unintentionally deleted, an additional field in the delete command can be added as a confirmation that these records should be deleted."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d The `stats` command"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "limli"
        },
        "content": "When the `stats` command is entered, the current statistis of the amount of bookings is to be displayed to the user in the form of a bar chart."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "limli"
        },
        "content": "When the user enters the `stats` command, `RestaurantBookParser` calls the `Statistics` class. The Statistics class fetches the relevant data for user display (ie what are the axes, values, and legends of the bar chart). It would then call the `StatsWindow` class which handles the UI. The bar chart will appear in a new window and does not affect the current window."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of data structure"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 1 (current choice):** Doing the calculation only when the user wants to view the statistics."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: Calculating only when needed is more efficient."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: The command would take some time to calculate before being able to display the statistics."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 2:** Every change to the database updates the statistics on the fly."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: Displaying the statistics on the UI would be faster."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: Need to change the implementation of every command that causes a change to the database. Calculations have to be done every operation, potentially affecting the efficiency of the `add` or `delete` commands."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "limli"
        },
        "content": "* Decision: Alternative 1 was adopted as the other commands do not need to be changed and it is easier to implement. As the number of times the `stats` command is called is likely to be low as compared to an `add` or `delete` operation, doing the calculation after every operation would be a waste of computation power."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Design of UI display"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 1 (current choice):** Displaying the statistics in a new window."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: The statistics would be displayed independently from the database and would not interfere with each other."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: The user can open multiple windows which contains different data and not know which is the correct window."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 2:** Hide the displayed database to show the statistics. A separate command would be used to toggle the view."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: There would be only 1 window to manage at any point in time."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: Cannot view the statistics and the database concurrently."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "limli"
        },
        "content": "* Decision: Alternative 1 was adopted as it is an easier implementation. Implementing the `stats` window as a static window that will not change would not affect the other parts of the app, and there is no need to hide and show the current screen. Moreover, the user might want to view the statistics together with the database, which is only possible with multiple windows."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d The panel UI for `Member`, `Staff`, `Booking`, and `Ingredient`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "limli"
        },
        "content": "The restaurant book displays the entire database in the form of \"cards\", which is the same as AB4. Each item has its own panel."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "limli"
        },
        "content": "The panel is formatted in the `ItemListPanel.fxml` file, and each item has its own controller (`MemberListPanel`, `StaffListPanel`, `BookingListPanel`, and `IngredientListPanel`) that extends from `ItemListPanel`. The panel displays the database via cards. Each item has its own card (`MemberCard`, `StaffCard`, `BookingCard`, and `IngredientCard`)."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Design of card display"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 1 (current choice):** Making a separate fxml file for each type of item card."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: Able to customise the card to suit the item."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: Need to duplicate common elements that all the cards share, such as the numbering on the list."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 2:** Using the same fxml file for each item card."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: Less duplication."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: Hard to customise the contents of each card."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "limli"
        },
        "content": "* Decision: Alternative 1 was adopted as each card do not share much in common other than the numbering on the list. Each card needs to display different information. For example, the `Member` item would need to display the email, while the `Ingredient` item would need to display other fields such as the quantity. Hence, not much code is duplicated, and creating 4 files would be the easiest implementation."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Design of panel display"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 1 (current choice):** Using the same fxml file for each item panel."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: Less duplication."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: Hard to customise the contents of each panel."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "limli"
        },
        "content": "* **Alternative 2:** Making a separate fxml file for each item panel"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "limli"
        },
        "content": "** Pros: Able to customise the panel to suit the item."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "limli"
        },
        "content": "** Cons: Need to duplicate common elements that all the item panels share."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "limli"
        },
        "content": "* Decision: Alternative 1 was adopted. Currently, the only difference between the panels is the header (implemented via a `label`) which contains the name of the item type. This only affects a single label, which is easy to edit via code. Hence, sharing the fxml file reduces the code duplication. If the display of the panels were to be modified in the future, say to add more padding or to change the size, only one fxml file needs to be modified."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsRestaurantBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*Target user profile*: a restaurant owner who:"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* has a need to manage a significant number of \u003c\u003crestaurant-records, restaurant records\u003e\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* is reasonably comfortable using \u003c\u003ccli, CLI\u003e\u003e apps"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "*Value proposition*: manage records faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* * *` |restaurant owner |*Member Management:* keep track of the members of the restaurant |reward members with special benefits"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* * *` |restaurant owner |*Booking Management:* manage the bookings made by customers |ensure customers who have made bookings have a table"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* * *` |restaurant owner |*Booking Management:* view which bookings clash and which are available |ensure restaurant will not be overbooked"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* * *` |restaurant owner |*Inventory Management:* keep track of food inventory |do necessary restocking"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* * *` |restaurant owner |*Inventory Management:* keep track of my recipes and necessary ingredients |know what customers can order"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* * *` |restaurant owner |*Staff Management:* keep track of the staff working for my restaurant |hire staff accordingly"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* * *` |restaurant owner |*Staff Management:* keep track of what shift each staff is working |assign shifts and pay them accordingly"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* *` |restaurant owner |*Booking Management:* view the statistics of customers |plan for resources and for future business expansion"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* *` |restaurant owner |*Booking Management:* view the frequency statistics based on booking time |hire more staff at peak periods appropriately"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`* *` |restaurant owner |*Inventory Management:* predict how many dishes can be prepared with current food inventory |plan for business operations"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`*` |restaurant owner |keep track of my profits |"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`*` |restaurant owner |view my total expenditure |"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "|`*` |restaurant owner |keep track of customer feedback |improve on my restaurant"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "limli"
        },
        "content": "(For all use cases below, the *System* is the `RestaurantBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Use case: Add member"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "limli"
        },
        "content": "1.  User requests to add member"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "limli"
        },
        "content": "2.  RestaurantBook adds the member"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "limli"
        },
        "content": "3.  RestaurantBook shows a list of members"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "limli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "limli"
        },
        "content": "* 1a. The member already exists."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "limli"
        },
        "content": "* 3a. The member data is given in the wrong format."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "limli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Use case: Delete member"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "limli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "limli"
        },
        "content": "1.  User requests to list members"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "limli"
        },
        "content": "2.  RestaurantBook shows a list of members"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "limli"
        },
        "content": "3.  User requests to delete a specific member in the list"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "limli"
        },
        "content": "4.  RestaurantBook deletes the member"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "limli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Use case: Find member"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "limli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "limli"
        },
        "content": "1.  User requests to find members and gives a list of words"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "limli"
        },
        "content": "2.  RestaurantBook shows a list of members whose name contains any of the words given"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "limli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "limli"
        },
        "content": "* 1a. The list of words given is empty"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "limli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Use case: Add booking"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "limli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "limli"
        },
        "content": "1.  User requests to add booking"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "limli"
        },
        "content": "2.  RestaurantBook adds the booking"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "limli"
        },
        "content": "3.  RestaurantBook shows a list of bookings"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "limli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "limli"
        },
        "content": "* 1a. The booking already exists."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "limli"
        },
        "content": "* 3a. The booking data is given in the wrong format."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "limli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Use case: Delete booking"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "limli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "limli"
        },
        "content": "1.  User requests to list bookings"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "limli"
        },
        "content": "2.  RestaurantBook shows a list of bookings"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "limli"
        },
        "content": "3.  User requests to delete a specific booking in the list"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "limli"
        },
        "content": "4.  RestaurantBook deletes the booking"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "limli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "limli"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "limli"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "limli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Use case: Add ingredient"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "limli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "limli"
        },
        "content": "1.  User requests to add ingredient"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "limli"
        },
        "content": "2.  RestaurantBook adds the ingredient"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "limli"
        },
        "content": "3.  RestaurantBook shows a list of ingredients"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "limli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "limli"
        },
        "content": "* 1a. The ingredient already exists."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "limli"
        },
        "content": "* 3a. The ingredient data is given in the wrong format."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "limli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "limli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "limli"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "limli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003d\u003d\u003d Use case: Delete ingredient"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "limli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "limli"
        },
        "content": "1.  User requests to list ingredients"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "limli"
        },
        "content": "2.  RestaurantBook shows a list of ingredients"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "limli"
        },
        "content": "3.  User requests to delete a specific ingredient in the list"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "limli"
        },
        "content": "4.  RestaurantBook deletes the ingredient"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "limli"
        },
        "content": "** 3a1. RestaurantBook shows an error message."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".  Should be able to hold up to 1000 \u003c\u003crestaurant-records, restaurant records\u003e\u003e without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".  Should be able to respond to every command in less than 3 seconds on any mainstream OS."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".  System should be able to start up in less than 10 seconds on any mainstream OS."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".  Should be able to retain and recover restaurant records in the event of a program crash or forced shut-down."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".  Should still work even without internet access."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "[[cli]] Command-Line-Interface::"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Text-based interface where the user is required to issue commands to the program in the form of successive lines of text."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "[[restaurant-records]] Restaurant Records::"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Information pertaining to ingredient and recipe inventory, staff, members and bookings of a restaurant"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d Deleting a member"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ". Deleting a member while all members are listed"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".. Prerequisites: List all members using the `listMembers` command. Multiple members in the list."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".. Test case: `deleteMember 1` +"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".. Test case: `deleteMember 0` +"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ".. Other incorrect delete commands to try: `deleteMember`, `deleteMember x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 42,
      "lingyanhao": 69,
      "hiyingnn": 112,
      "-": 936,
      "limli": 218
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d REM - REstaurant Manager - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819S2-w11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "By: `Team W11-2`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "REstaurant Manager (REM) is for small/medium size restaurant owners who *prefer to use a desktop app for managing their restaurant*. More importantly, REM is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, REM can get your restaurant management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "As REM is targeted at _restaurant owners_, it aims to facilitate the management of a restaurant, in these 5 different areas:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Member Management"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** Manage the contact details of the customers with membership"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Inventory Management"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** Manage the inventory of recipes and stocks of inventory"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Booking Management"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** Manage the reservations made by the general public"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Staff management"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** Manage the contact details of the staff, and facilitate their shift work allocation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Overall"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** Collation of feedback by customers, and general statistics of the performance of the restaurant"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ".  Download the latest `rem.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Restaurant Manager."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *`listMembers`* : lists all members of the restaurant"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* **`addMember`**`addMember n/John Doe e/johnd@gmail.com p/81234567` : adds a member named `John Doe` to the restaurant."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* **`deleteMember`**`3` : deletes the 3rd member shown in the current list of members"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Commands begin with the intended task, followed by a number of parameters preceded by a key (a unique alphabet and forward slash). The intended task (`addMember`) is non case-sensitive in the program and can be typed quickly as `addmember`, but is written in this manner for the user guide to be easily read."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** e.g. `addMember n/CUSTOMER_NAME e/EMAIL p/PHONE_NUMBER`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** e.g. `notifySMS [l/LOYALTY_POINTS_MINIMUM]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Items with `...` after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ** e.g. `addRecipe r/RECIPE_NAME n/NUMBER_OF_INGREDIENTS 1/INGREDIENT_1\u0026AMOUNT_IN_UNITS 2/INGREDIENT_2\u0026AMOUNT_IN_UNITS ...`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* Parameters can be in any order"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "*Date and Time Format*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* All parameters labelled as DATE_TIME should follow the yyyy-MM-ddTHH:mm format, (e.g. `2019-02-23T13:00` means 23 Feb 2019, 1300 hrs). yyyy-MM-ddTHH:mm:SS format is also accepted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* For the exact specification of what date and time formats are allowed, please refer to the `LocalDateTime` class in Java."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* Time without dates are also accepted. In that situation, `HH:mm` (e.g. `13:00`) format should be used and the date is automatically chosen to be the current date at the point of command execution."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d General"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Exit: `exit`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Exit the program."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Member Management"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Add Member: `addMember`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Adds a customer who signs up for membership."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Format: `addMember n/CUSTOMER_NAME e/EMAIL p/PHONE_NUMBER [l/LOYALTY_POINTS]`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If loyalty points is not specified, it will be taken to be 0."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• Email of all members must be unique."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `addMember n/John Doe e/johnd@gmail.com p/81234567`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d List Members: `listMembers`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "List members who match all the given condition(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Format: `listMembers [n/NAME] [l/LOYALTY_POINTS_MINIMUM]`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* `listMembers l/10`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Lists all members with at least 10 loyalty points."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `listMembers`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "All the members will be listed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Members: `deleteMember`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Deletes the specified member from the management system. Note that this action also deletes all bookings made by the member."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `deleteMember INDEX`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "• Deletes the member at the specified `INDEX`. The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* `listMembers`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "+"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "`deleteMember 2`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Deletes the 2nd member in the restaurant book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* `listMembers n/Betsy`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "+"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "`deleteMember 1`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Deletes the 1st member in the results of the listMembers command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d Notify Via Email: `notifyEmail` `[coming in v2.0]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Notifies all members with at least a minimum amount of loyalty points and with the specified email subscription settings."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `notifyEmail [l/LOYALTY_POINTS_MINIMUM] [se/TRUE_FALSE]`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If `l` not specified, it will be taken to be 0."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If `se` is not specified, the email will be sent regardless of email subscription settings."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• After entering this command, an email window will appear, where the text body can be keyed in."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `notifyEmail l/100 se/true`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "\u003d\u003d\u003d\u003d Notify Via SMS: `notifySMS` `[coming in v2.0]`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Notifies all members with at least a minimum amount of loyalty points and with the specified SMS subscription settings."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `notifySMS [l/LOYALTY_POINTS_MINIMUM] [ss/TRUE_FALSE]`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If `l` not specified, it will be taken to be 0."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If `ss` is not specified, the SMS will be sent regardless of SMS subscription settings."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `notifySMS l/100 ss/true`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Inventory Management"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d List Ingredients: `listIngredients`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "List all ingredients in the inventory that has ingredient name containing any of the key words inputted,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "and has ingredient quantity falling below the ingredient warning amount."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `listIngredients [in/INGREDIENT_NAME] [w/]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If `in/INGREDIENT_NAME` is present, all ingredients with name containing any of the key words inputted will be listed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If `w/` is present, all ingredients with quantity falling below warning amount will be listed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• By default, when both `in/INGREDIENT_NAME` and `w/` are not present, `listIngredients` will list all ingredients."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `listIngredient in/tomato`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "All ingredients with name containing the word \u0027tomato\u0027 will be listed,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. \u0027tomato sauce\u0027, \u0027tomato ketchup\u0027 will be listed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `listIngredient w/`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "All ingredients with ingredient quantity falling below ingredient warning amount will be listed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `listIngredient in/tomato w/`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "All ingredients with name containing the word \u0027tomato\u0027, and having ingredient quantity that falls below"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "ingredient warning amount will be listed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Add Ingredient: `addIngredient`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Adds new ingredient into inventory. Previously not existing in inventory before."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `addIngredient in/INGREDIENT_NAME u/INGREDIENT_UNIT [q/INGREDIENT_QUANTITY] [w/INGREDIENT_WARNING_AMOUNT]`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• If ingredient quantity or warning amount is not specified, they are respectively set to 0."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• User inputs the warning amount for the ingredient `w/INGREDIENT_WARNING_AMOUNT` , and when the quantity in inventory"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "falls below this stated amount, there is a need for restock of this ingredient."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Calling `listIngredients w/` will display all ingredients that fall below their corresponding warning values."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `addIngredient in/chicken u/full chickens`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Adds new ingredient, chicken (with default ingredient quantity as 0), into inventory."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `addIngredient in/chicken q/10 u/full chickens`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Adds 10 full chickens into inventory."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `addIngredient in/chicken q/10 u/full chickens w/2`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Adds 10 full chickens into inventory and when amount falls below 2, `listIngredients w/` will display chicken."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Restock Ingredient: `restockIngredient`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Restock an ingredient in inventory, by a particular amount, based on specified `INDEX` via `listIngredients`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Previously existing in inventory before."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `restockIngredient i/INGREDIENT_INDEX q/INGREDIENT_QUANTITY`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `listIngredients` (returns chicken as 3rd index)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "+"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "`restockIngredient i/3 q/10`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Increases the quantity of chickens by 10 in the inventory."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d Consume Ingredient: `consumeIngredient`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Consume a particular amount of ingredient from inventory, based on specified `INDEX` via `listIngredients`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `consumeIngredient i/INGREDIENT_INDEX q/INGREDIENT_QUANTITY`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `listIngredients` (returns chicken as 3rd index)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "+"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "`consumeIngredient i/3 q/10`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Decreases the quantity of chickens by 10 in the inventory."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Ingredient: `deleteIngredient`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Delete ingredient from inventory based on specified `INDEX` via `listIngredients`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `deleteIngredient INGREDIENT_INDEX`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `listIngredients` (returns chicken as 3rd index)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "+"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "`deleteIngredient 3`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Delete chicken from inventory"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d List Recipes: `listRecipes`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "List all recipes."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `listRecipes`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d Add Recipe: `addRecipe`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Add recipe of dish served at the restaurant."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `addRecipe r/RECIPE_NAME iq/INGREDIENT_INDEX\u0026INGREDIENT_QUANTITY__IN_RECIPE ...`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• The index refers to the index number shown in the most recent listing of ingredients in the ingredients panel."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• There should be at least 1 ingredient `iq/INGREDIENT_INDEX\u0026INGREDIENT_QUANTITY_IN_RECIPE` input"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• Each ingredient input should have the format `iq/INGREDIENT_INDEX\u0026NGREDIENT_QUANTITY_IN_RECIPE`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "where ingredient index and quantity of ingredient in recipe is separated by \u0026."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Both the ingredient index and quantity must be an whole number."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `listIngredients`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "(list: chicken - 10 full chickens [indexed 4], rice - 10 bowls [indexed 9])"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "+"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "`addRecipe r/Chicken Rice iq/4\u00261 iq/9\u00263`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Adds a new recipe, chicken rice, which requires 1 full chicken and 3 bowls of rice."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Recipe: `deleteRecipe`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Delete a recipe based on specified INDEX via `listRecipes`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `deleteRecipe RECIPE_INDEX`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* `listRecipes`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "+"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "`deleteRecipe 3`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Delete recipe at index 3."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "\u003d\u003d\u003d\u003d Recipe Summary `recipeSummary`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Displays the number of dishes that can be made for each recipe, calculated based on the current inventory"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "and the quantity required in each recipe."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "Format: `recipeSummary`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Booking Management"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d View Booking: `viewBooking`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "View the current lists of bookings within a certain time frame"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `viewBooking [ts/TIME_START] [te/TIME_END]`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• The start and end times are optional arguments. If not specified, the list of all bookings (i.e. including future and past bookings) made so far will be displayed."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* `viewBooking ts/2019-03-01 12:00 te/2019-03-04 15:00`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Update Restaurant Capacity: `updateCapacity`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Update the capacity of the restaurant."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `updateCapacity NUMBER`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "• The default capacity of the restaurant is 200."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "• If the capacity is full, the restaurant will not accept new bookings (refer to \u003c\u003cCreate New Booking: `addBooking`, addBooking command \u003e\u003e). If this command causes the number of bookings to exceed the capacity, the `updateCapacity` command will not be executed and an error will be displayed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `updateCapacity 50`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "This updates the restaurants to cater for a capacity for 50 customers."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Create New Booking: `addBooking`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Creates a new booking."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Format: `addBooking c/CUSTOMER_INDEX n/NUMBER OF MEMBERS ts/START_TIME`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "• If the restaurant is full (as determined by the `updateCapacity` command), a message will appear telling the user that the restaurant is fully booked."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "• All bookings will last for 1 hour."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "• Customer INDEX refers to the index of the customer as displayed by the list."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "• Bookings are a privileged feature restricted only to members. Thus we do not allow non-members to make bookings."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* `addBooking c/1 n/5 ts/2019-02-23 14:30`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Adds a booking for the first customer on the current list, on 23 Feb, at 1430 hrs"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Cancel Booking: `cancelBooking`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Cancels a booking permanently."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `cancelBooking INDEX`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• Cancels the booking at the specified `INDEX`. The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `viewBooking`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "+"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "`cancelBooking 3`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Cancels the booking with index 3."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d View Booking Summary: `bookingSummary`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Displays the overall statistics of bookings done so far. The statistics will reflect the total number of bookings made, the distribution of bookings by time and so on. This differs from the `viewBooking` command in the sense that details of a particular booking will not be shown, but only summarised data."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `bookingSummary`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Staff Management"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Add Staff: `addStaff`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Add a new staff member to the list of all staff."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `addStaff n/NAME p/PHONE e/EMAIL a/APPOINTMENT`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `addStaff n/John Doe p/91234567 e/john@example.com a/Waiter`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Adds a new staff with name John Doe, phone number 91234567, email john@example.com and appointment Waiter to the restaurant."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Staff: `deleteStaff`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Deletes the staff member with the specified index."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Format: `deleteStaff STAFF_INDEX`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `deleteStaff 3`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Staff: `editStaff`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Edits the staff member with the specified index."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Format: `editStaff STAFF_INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/APPOINTMENT]`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `editStaff 1 p/98765432 a/Manager`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d View Shift Staff: `shiftStaff`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Lists all staff members working at the current time."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `shiftStaff`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Set Shift Staff: `setShift`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Sets the shift of a staff with the specified `STAFF_INDEX`. If the staff already has a shift, then it will be overwritten."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "Format: `setShift s/STAFF_INDEX ts/TIME_START te/TIME_END`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* `setShift s/1 ts/2019-02-23 09:30 ts/2019-02-23 17:30`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Overall"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d View Feedback: `viewFeedback`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Lists all feedback submitted by customers."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `viewFeedback`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Add Feedback: `addFeedback`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Adds a feedback submitted by a customer."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `addFeedback FEEDBACK`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `addFeedback Good service and food!`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d Add Rating: `addRating`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Adds a rating submitted by a customer. Ratings are on a 5 point scale."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `addRating RATING`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "• `RATING` is an integer from 1 to 5, inclusive."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "****"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Example"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* `addRating 5`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d View Graph Rating: `graphRating`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Displays a graph of average rating per month against months."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `graphRating`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d\u003d View Rating Statistics: `ratingStats`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Displays a summary of the overall rating statistics, such as the average rating and the rating distribution."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "Format: `ratingStats`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Restaurant Book folder."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Member Management"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *addMember* `addMember n/CUSTOMER_NAME e/EMAIL p/PHONE_NUMBER [l/LOYALTY_POINTS] [se/EMAIL_SUBSCRIPTION_BOOLEAN] [ss/SMS_SUBSCRIPTION_BOOLEAN]` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `addMember n/John Doe e/johnd@gmail.com p/81234567`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *listMembers* `listMembers [n/NAME_REGEX] [e/EMAIL_REGEX] [l/LOYALTY_POINTS_EQUATION] [se/TRUE_FALSE] [ss/TRUE_FALSE]` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `listMembers l/\u003e10 se/true`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *deleteMember* `deleteMember INDEX` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `deleteMember 2`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Inventory Management"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *listIngredients* `listIngredients [in/INGREDIENT_NAME] [w/]` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `listIngredients in/tomato w/`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *addIngredient* `addIngredient in/INGREDIENT_NAME u/INGREDIENT_UNIT [q/INGREDIENT_QUANTITY] [w/INGREDIENT_WARNING_AMOUNT]` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `addIngredient in/chicken u/full chickens`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *restockIngredient* `restockIngredient i/INGREDIENT_INDEX q/INGREDIENT_QUANTITY` +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `restockIngredient i/3 q/10`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *consumeIngredient* `consumeIngredient i/INGREDIENT_INDEX q/INGREDIENT_QUANTITY` +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `consumeIngredient i/3 q/10`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *deleteIngredient* `delete INGREDIENT_INDEX` +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `deleteIngredient 3`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *listRecipies* `listRecipes` +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `listRecipes`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *addRecipe*  `addRecipe r/RECIPE_NAME iq/INGREDIENT_INDEX\u0026INGREDIENT_QUANTITY_IN_RECIPE` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `addRecipe r/Chicken Rice iq/4\u00261 iq/9\u00263`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *deleteRecipe* `delete RECIPE_INDEX` +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `deleteRecipe 3`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "* *recipeSummary* `recipeSummary` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "e.g. `recipeSummary`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Booking Management"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *viewBooking* `viewBooking [ts/TIME_START] [te/TIME_END]` +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `viewBooking ts/1200 te/1530`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *updateCapacity* `updateCapacity NUMBER` +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `updateCapacity 50`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* *addBooking* `addBooking [c/CUSTOMER_INDEX] n/NUMBER OF MEMBERS t/TIME [d/DATE]` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `addBooking 1 1300 25 Feb`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *cancelBooking* `cancelBooking INDEX` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `cancelBooking 3`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *bookingSummary* `bookingSummary`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Staff Management"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *addStaff* `addStaff n/STAFF_NAME c/CONTACT_NUMBER a/APPOINTMENT` +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `addStaff n/John Doe c/91234567 a/Waiter`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* *deleteStaff* `deleteStaff STAFF_INDEX` +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `deleteStaff 3`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *shiftStaff* `shiftStaff`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "* *setShift* `setShift s/STAFF_INDEX ts/TIME_START te/TIME_END` +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. setShift `1 1200 1530`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003d\u003d\u003d Overall Management"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *viewFeedback* `viewFeedback`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *addFeedback* `addFeedback FEEDBACK` +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `addFeedback Good service and food!`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *addRating* `addRating RATING` +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "e.g. `addRating 5`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *graphRating* `graphRating`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "* *ratingStats* `ratingStats`"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 289,
      "lingyanhao": 44,
      "hiyingnn": 141,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.storage.RestaurantBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Initialises the RestaurantBook."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing RestaurantBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBookStorage restaurantBookStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new JsonRestaurantBookStorage(userPrefs.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        storage \u003d new StorageManager(restaurantBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Optional\u003cReadOnlyRestaurantBook\u003e restaurantBookOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ReadOnlyRestaurantBook initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            restaurantBookOptional \u003d storage.readRestaurantBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            if (!restaurantBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RestaurantBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            initialData \u003d restaurantBookOptional.orElseGet(SampleDataUtil::getSampleRestaurantBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RestaurantBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            initialData \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RestaurantBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            initialData \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RestaurantBook\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        logger.info(\"Starting RestaurantBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 25,
      "-": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX \u003d \"The member index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX \u003d \"The ingredient index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX \u003d \"The booking index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_INVALID_STAFF_DISPLAYED_INDEX \u003d \"The staff index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_MEMBERS_LISTED_OVERVIEW \u003d \"%1$d members listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_INGREDIENTS_LISTED_OVERVIEW \u003d \"%1$d ingredients listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 2,
      "lingyanhao": 1,
      "hiyingnn": 2,
      "-": 10,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if {@code s} represents an unsigned integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static boolean isUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 17,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CustomerIndexedBooking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Represents a booking with the member given by index instead of the actual details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class CustomerIndexedBooking {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingWindow bookingWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Index memberIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingSize numMembers;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CustomerIndexedBooking(BookingWindow bookingWindow, Index memberIndex, BookingSize numMembers) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.bookingWindow \u003d bookingWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.numMembers \u003d numMembers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Retrieves the member details and generates a {@code Optional\u003cBooking\u003e}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @param model The model used to generate the booking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @return If the index is out of bounds, returns Optional.empty(). Otherwise, it generates"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * retrieves the member details and returns a Booking."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Optional\u003cBooking\u003e getBooking(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMemberList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (memberIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Member member \u003d lastShownList.get(memberIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return Optional.of(new Booking(bookingWindow, member, numMembers));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof CustomerIndexedBooking // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 bookingWindow.equals(((CustomerIndexedBooking) other).bookingWindow) // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 memberIndex.equals(((CustomerIndexedBooking) other).memberIndex)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 numMembers.equals(((CustomerIndexedBooking) other).numMembers));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns the RestaurantBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see seedu.address.model.Model#getRestaurantBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    ReadOnlyRestaurantBook getRestaurantBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of members */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "    ObservableList\u003cMember\u003e getFilteredMemberList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bookings */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of ingredients */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of staff */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ObservableList\u003cStaff\u003e getFilteredStaffList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Selected member in the filtered member list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "     * null if no member is selected."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @see seedu.address.model.Model#selectedItemProperty()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": "    ReadOnlyProperty\u003cMember\u003e selectedMemberProperty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Selected booking in the filtered booking list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "     * null if no booking is selected."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see seedu.address.model.Model#selectedItemProperty()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "    ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Selected ingredient in the filtered ingredient list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "     * null if no ingredient is selected."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see seedu.address.model.Model#selectedItemProperty()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "    ReadOnlyProperty\u003cIngredient\u003e selectedIngredientProperty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Selected staff in the filtered staff list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no staff is selected."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @see seedu.address.model.Model#selectedItemProperty()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ReadOnlyProperty\u003cStaff\u003e selectedStaffProperty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the selected member in the filtered member list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedItem(Member)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limli"
        },
        "content": "    void setSelectedMember(Member member);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the selected booking in the filtered booking list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedItem(Booking)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limli"
        },
        "content": "    void setSelectedBooking(Booking booking);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the selected ingredient in the filtered ingredient list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedItem(Ingredient)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limli"
        },
        "content": "    void setSelectedIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the selected staff in the filtered staff list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedItem(Staff)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void setSelectedStaff(Staff staff);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 14,
      "lingyanhao": 1,
      "hiyingnn": 5,
      "-": 64,
      "limli": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.RestaurantBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final RestaurantBookParser restaurantBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private boolean restaurantBookModified;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBookParser \u003d new RestaurantBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // Set restaurantBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.getRestaurantBook().addListener(observable -\u003e restaurantBookModified \u003d true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBookModified \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            Command command \u003d restaurantBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (restaurantBookModified) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                storage.saveRestaurantBook(model.getRestaurantBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return model.getRestaurantBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ObservableList\u003cMember\u003e getFilteredMemberList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return model.getFilteredMemberList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return model.getFilteredBookingList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ObservableList\u003cStaff\u003e getFilteredStaffList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return model.getFilteredStaffList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return model.getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ReadOnlyProperty\u003cMember\u003e selectedMemberProperty() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return model.selectedMemberProperty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return model.selectedBookingProperty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ReadOnlyProperty\u003cIngredient\u003e selectedIngredientProperty() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return model.selectedIngredientProperty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cStaff\u003e selectedStaffProperty() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return model.selectedStaffProperty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setSelectedMember(Member member) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.setSelectedMember(member);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setSelectedBooking(Booking booking) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.setSelectedBooking(booking);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setSelectedIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.setSelectedIngredient(ingredient);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedStaff(Staff staff) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.setSelectedStaff(staff);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 16,
      "lingyanhao": 4,
      "hiyingnn": 15,
      "-": 92,
      "limli": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * Clears the restaurant book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.setRestaurantBook(new RestaurantBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "hiyingnn": 3,
      "-": 21,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConsumeIngredientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.model.IngredientModel.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Consumes the quantity of existing ingredient in the restaurant book by stipulated amount."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class ConsumeIngredientCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"consumeingredient\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ci\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Consumes the quantity of the ingredient identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"by the index number used in the displayed ingredient list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Input consumption value will be removed from existing ingredient quantity.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Consumed Ingredient: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_EXCEEDS \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \"Quantity to consume exceeds current quantity of ingredient in inventory\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final IngredientQuantity quantityToConsume;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Creates an ConsumeIngredientCommand to deplete the specified {@code Ingredient}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ConsumeIngredientCommand(Index index, IngredientQuantity quantity) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.quantityToConsume \u003d quantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredientToConsume \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (quantityToConsume.getQuantity() \u003e ingredientToConsume.getIngredientQuantity().getQuantity()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new CommandException(MESSAGE_EXCEEDS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient consumedIngredient \u003d createConsumedIngredient(ingredientToConsume, quantityToConsume);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.setIngredient(ingredientToConsume, consumedIngredient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, consumedIngredient));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * New Ingredient with depleted quantity is returned."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param ingredientToConsume"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @return Ingredient"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static Ingredient createConsumedIngredient(Ingredient ingredientToConsume, IngredientQuantity quantity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assert ingredientToConsume !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        int currentQuantity \u003d ingredientToConsume.getIngredientQuantity().getQuantity();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        int newQuantity \u003d currentQuantity - quantity.getQuantity();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientQuantity newIngredientQuantity \u003d new IngredientQuantity(newQuantity);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new Ingredient(ingredientToConsume.getIngredientName(), newIngredientQuantity,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ingredientToConsume.getIngredientUnit(), ingredientToConsume.getIngredientWarningAmount());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientQuantity getQuantityToConsume() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return quantityToConsume;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!(other instanceof ConsumeIngredientCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ConsumeIngredientCommand e \u003d (ConsumeIngredientCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 quantityToConsume.equals(e.getQuantityToConsume());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Deletes a booking identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class DeleteBookingCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletebooking\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"db\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \": Deletes the booking identified by the index number used in the displayed member list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOKING_SUCCESS \u003d \"Deleted Booking: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public DeleteBookingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking bookingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.deleteBooking(bookingToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // by right, deleting a booking should never cause the capacity to be exceeded"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assert(model.getCapacity().canAccommodate(model.getFilteredBookingList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOKING_SUCCESS, bookingToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof DeleteBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteBookingCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteIngredientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Deletes an ingredient identified using its displayed index from the restaurant book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteingredient\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"di\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \": Deletes the ingredient identified by the index number used in the displayed ingredient list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_DELETE_INGREDIENT_SUCCESS \u003d \"Deleted Ingredient: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public DeleteIngredientCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INGREDIENT_SUCCESS, ingredientToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || (other instanceof DeleteIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteIngredientCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMemberCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": " * Deletes a member identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "public class DeleteMemberCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletemember\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \": Deletes the member identified by the index number used in the displayed member list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_DELETE_MEMBER_SUCCESS \u003d \"Deleted Member: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    public DeleteMemberCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMemberList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member memberToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "                || (other instanceof DeleteMemberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteMemberCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "lingyanhao": 2,
      "hiyingnn": 1,
      "-": 40,
      "limli": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteStaffCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Deletes a staff identified using it\u0027s displayed index from the restaurant book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class DeleteStaffCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletestaff\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ds\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \": Deletes the staff identified by the index number used in the displayed staff list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_DELETE_MEMBER_SUCCESS \u003d \"Deleted Staff: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public DeleteStaffCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cStaff\u003e lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff staffToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.deleteStaff(staffToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEMBER_SUCCESS, staffToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                || (other instanceof DeleteStaffCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStaffCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.commands.add.AddBookingCommand.MESSAGE_FULL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Edits the details of an existing booking in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class EditBookingCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editbooking\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"eb\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the booking identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"by the index number used in the displayed booking list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"[\" + PREFIX_NUMBER_PERSONS + \"NUMBER_OF_PERSONS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_START_TIME + \"2019-03-17T11:00 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_NUMBER_PERSONS + \"2\"; // TODO: change this message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOKING_SUCCESS \u003d \"Edited booking: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"This booking already exists in the restaurant book.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final EditBookingDescriptor editBookingDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @param index of the booking in the filtered booking list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @param editBookingDescriptor details to edit the booking with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public EditBookingCommand(Index index, EditBookingDescriptor editBookingDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(editBookingDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.editBookingDescriptor \u003d new EditBookingDescriptor(editBookingDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking bookingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking editedBooking \u003d createEditedBooking(bookingToEdit, editBookingDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!model.canAccommodateEdit(bookingToEdit, editedBooking)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(MESSAGE_FULL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            model.setBooking(bookingToEdit, editedBooking);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOKING);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOKING_SUCCESS, editedBooking));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Creates and returns a {@code booking} with the details of {@code bookingToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * edited with {@code editBookingDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private static Booking createEditedBooking(Booking bookingToEdit, EditBookingDescriptor editBookingDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assert bookingToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        BookingWindow bookingWindow \u003d editBookingDescriptor.getBookingWindow().orElse(bookingToEdit.getBookingWindow());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        BookingSize bookingSize \u003d editBookingDescriptor.getBookingSize().orElse(bookingToEdit.getNumMembers());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Booking(bookingWindow, bookingToEdit.getCustomer(), bookingSize);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof EditBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 index.equals(((EditBookingCommand) other).index)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 editBookingDescriptor.equals(((EditBookingCommand) other).editBookingDescriptor)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Stores the details to edit the booking with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * corresponding field value of the booking."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static class EditBookingDescriptor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        private BookingWindow bookingWindow;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        private BookingSize bookingSize;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public EditBookingDescriptor() {}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public EditBookingDescriptor(EditBookingDescriptor toCopy) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            setBookingWindow(toCopy.bookingWindow);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            setBookingSize(toCopy.bookingSize);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return CollectionUtil.isAnyNonNull(bookingWindow, bookingSize);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public void setBookingWindow(BookingWindow bookingWindow) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            this.bookingWindow \u003d bookingWindow;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public Optional\u003cBookingWindow\u003e getBookingWindow() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return Optional.ofNullable(bookingWindow);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public void setBookingSize(BookingSize bookingSize) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            this.bookingSize \u003d bookingSize;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public Optional\u003cBookingSize\u003e getBookingSize() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return Optional.ofNullable(bookingSize);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (!(other instanceof EditBookingDescriptor)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            EditBookingDescriptor e \u003d (EditBookingDescriptor) other;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return getBookingWindow().equals(e.getBookingWindow())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                    \u0026\u0026 getBookingSize().equals(e.getBookingSize());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditMemberCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": " * Edits the details of an existing member in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "public class EditMemberCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editmember\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the member identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"by the index number used in the displayed member list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"[\" + PREFIX_LOYALTY_POINTS + \"LOYALTY_POINTS] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_EDIT_MEMBER_SUCCESS \u003d \"Edited Member: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"This member already exists in the address book.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final EditMemberDescriptor editMemberDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @param index of the member in the filtered member list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @param editMemberDescriptor details to edit the member with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberCommand(Index index, EditMemberDescriptor editMemberDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        requireNonNull(editMemberDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.editMemberDescriptor \u003d new EditMemberDescriptor(editMemberDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cMember\u003e lastShownList \u003d model.getFilteredMemberList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member memberToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedMember \u003d createEditedMember(memberToEdit, editMemberDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            model.setMember(memberToEdit, editedMember);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEMBER_SUCCESS, editedMember));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Creates and returns a {@code Member} with the details of {@code memberToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "     * edited with {@code editMemberDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static Member createEditedMember(Member memberToEdit, EditMemberDescriptor editMemberDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "        assert memberToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        Name updatedName \u003d editMemberDescriptor.getName().orElse(memberToEdit.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limli"
        },
        "content": "        Phone updatedPhone \u003d editMemberDescriptor.getPhone().orElse(memberToEdit.getPhone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limli"
        },
        "content": "        Email updatedEmail \u003d editMemberDescriptor.getEmail().orElse(memberToEdit.getEmail());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limli"
        },
        "content": "        LoyaltyPoints loyaltyPoints \u003d editMemberDescriptor.getLoyaltyPoints().orElse(memberToEdit.getLoyaltyPoints());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Member(updatedName, updatedPhone, updatedEmail, loyaltyPoints);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!(other instanceof EditMemberCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand e \u003d (EditMemberCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 editMemberDescriptor.equals(e.editMemberDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Stores the details to edit the member with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "     * corresponding field value of the member."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static class EditMemberDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "        private LoyaltyPoints loyaltyPoints;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limli"
        },
        "content": "        public EditMemberDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limli"
        },
        "content": "        public EditMemberDescriptor(EditMemberDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limli"
        },
        "content": "            setLoyaltyPoints(toCopy.loyaltyPoints);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limli"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, loyaltyPoints);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limli"
        },
        "content": "        public void setLoyaltyPoints(LoyaltyPoints loyaltyPoints) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limli"
        },
        "content": "            this.loyaltyPoints \u003d loyaltyPoints;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limli"
        },
        "content": "        public Optional\u003cLoyaltyPoints\u003e getLoyaltyPoints() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limli"
        },
        "content": "            return Optional.ofNullable(loyaltyPoints);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limli"
        },
        "content": "            if (!(other instanceof EditMemberDescriptor)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limli"
        },
        "content": "            EditMemberDescriptor e \u003d (EditMemberDescriptor) other;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limli"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limli"
        },
        "content": "                    \u0026\u0026 getLoyaltyPoints().equals(e.getLoyaltyPoints());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "lingyanhao": 6,
      "hiyingnn": 1,
      "-": 139,
      "limli": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditStaffCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STAFF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Edits the details of an existing staff in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class EditStaffCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editstaff\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"es\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the staff identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"by the index number used in the displayed staff list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"[\" + PREFIX_APPOINTMENT + \"APPOINTMENT] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + PREFIX_PHONE + \"97654321 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            + PREFIX_APPOINTMENT + \"Head Chef\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_EDIT_STAFF_SUCCESS \u003d \"Edited Staff: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STAFF \u003d \"This staff already exists in the address book.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final EditStaffDescriptor editStaffDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @param index of the staff in the filtered staff list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @param editStaffDescriptor details to edit the staff with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public EditStaffCommand(Index index, EditStaffDescriptor editStaffDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireNonNull(editStaffDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.editStaffDescriptor \u003d new EditStaffDescriptor(editStaffDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cStaff\u003e lastShownList \u003d model.getFilteredStaffList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STAFF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff staffToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff editedStaff \u003d createEditedStaff(staffToEdit, editStaffDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            model.setStaff(staffToEdit, editedStaff);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STAFF);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFF);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STAFF_SUCCESS, editedStaff));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Creates and returns a {@code Staff} with the details of {@code staffToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * edited with {@code editStaffDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static Staff createEditedStaff(Staff staffToEdit, EditStaffDescriptor editStaffDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assert staffToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Name updatedName \u003d editStaffDescriptor.getName().orElse(staffToEdit.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Phone updatedPhone \u003d editStaffDescriptor.getPhone().orElse(staffToEdit.getPhone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Email updatedEmail \u003d editStaffDescriptor.getEmail().orElse(staffToEdit.getEmail());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Appointment updatedAppointment \u003d editStaffDescriptor.getAppointment().orElse(staffToEdit.getAppointment());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Staff(updatedName, updatedPhone, updatedEmail, updatedAppointment);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!(other instanceof EditStaffCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        EditStaffCommand e \u003d (EditStaffCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 editStaffDescriptor.equals(e.editStaffDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Stores the details to edit the staff with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * corresponding field value of the staff."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static class EditStaffDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        private Appointment appointment;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public EditStaffDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public EditStaffDescriptor(EditStaffDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            setAppointment(toCopy.appointment);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, appointment);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public void setAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public Optional\u003cAppointment\u003e getAppointment() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return Optional.ofNullable(appointment);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            if (!(other instanceof EditStaffDescriptor)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            EditStaffDescriptor e \u003d (EditStaffDescriptor) other;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    \u0026\u0026 getAppointment().equals(e.getAppointment());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 200,
      "lingyanhao": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"q\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": " * Finds and lists all members in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all members whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "                String.format(Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                        model.getFilteredMemberList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 2,
      "lingyanhao": 1,
      "-": 39,
      "limli": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_SHOWING_HELP \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new CommandResult(MESSAGE_SHOWING_HELP, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "-": 20,
      "limli": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"z\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * Lists all members in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all members\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "-": 21,
      "limli": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListIngredientsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_WARNINGAMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientNameAndWarningAmountPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Finds and lists all ingredients in restaurant book whose name contains any of the argument keywords"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * or ingredientQuantity is less than ingredientWarningAmount"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class ListIngredientsCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listingredients\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all ingredients whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"the specified keywords (case-insensitive) and has quantity less than warning amount\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \", and displays them as a list with index numbers. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"If fields are not specified, then all ingredients will be listed. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Parameters: [\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"INGREDINENT_NAME] [\" + PREFIX_INGREDIENT_WARNINGAMOUNT + \"]\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \" \" + PREFIX_INGREDIENT_NAME + \"tomato\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \" \" + PREFIX_INGREDIENT_WARNINGAMOUNT + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final IngredientNameAndWarningAmountPredicate predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ListIngredientsCommand(IngredientNameAndWarningAmountPredicate predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                String.format(Messages.MESSAGE_INGREDIENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        model.getFilteredIngredientList().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || (other instanceof ListIngredientsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListIngredientsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListMembersCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.NameAndLoyaltyPointsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": " * Finds and lists all members in restaurant book whose name contains any of the argument keywords"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": " * and has at least as many loyalty points as specified."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "public class ListMembersCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmembers\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all members whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"the list of words (case-insensitive) and who has at least the specified amount of loyalty points\\n.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"If fields are not specified, then all members will be listed.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"Parameters: [\" + PREFIX_NAME + \"NAME_1 NAME_2...] [\" + PREFIX_LOYALTY_POINTS + \"MIN_LOYALTY_POINTS]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie l/10\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final NameAndLoyaltyPointsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ListMembersCommand(NameAndLoyaltyPointsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        model.updateFilteredMemberList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "                String.format(Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "                        model.getFilteredMemberList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "                || (other instanceof ListMembersCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListMembersCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.model.BookingModel.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.model.IngredientModel.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.model.StaffModel.PREDICATE_SHOW_ALL_STAFF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!model.canRedoRestaurantBook()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.redoRestaurantBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "lingyanhao": 6,
      "hiyingnn": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RestockIngredientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Restocks the quantity of existing ingredient in the restaurant book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestockIngredientCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"restockingredient\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ri\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Restocks the quantity of the ingredient identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"by the index number used in the displayed ingredient list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Input value will be added to existing value.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Restocked Ingredient: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_EXCEEDS_MAXIMUM \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \"Cannot restock to current amount, new restocked amount exceeds capacity of inventory\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final IngredientQuantity quantityToRestock;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Creates an RestockIngredientCommand to restock the specified {@code Ingredient}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public RestockIngredientCommand(Index index, IngredientQuantity quantity) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.quantityToRestock \u003d quantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredientToRestock \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient restockedIngredient \u003d createRestockedIngredient(ingredientToRestock, quantityToRestock);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.setIngredient(ingredientToRestock, restockedIngredient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, restockedIngredient));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * New Ingredient with restocked quantity is returned."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param ingredientToRestock"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @return Ingredient"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static Ingredient createRestockedIngredient(Ingredient ingredientToRestock,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                                                        IngredientQuantity quantity) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assert ingredientToRestock !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        int currentQuantity \u003d ingredientToRestock.getIngredientQuantity().getQuantity();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        long newQuantityLong \u003d new Long(currentQuantity) + new Long(quantity.getQuantity());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (newQuantityLong \u003e Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new CommandException(MESSAGE_EXCEEDS_MAXIMUM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        int newQuantityInt \u003d (int) newQuantityLong;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientQuantity newIngredientQuantity \u003d new IngredientQuantity(newQuantityInt);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new Ingredient(ingredientToRestock.getIngredientName(), newIngredientQuantity,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ingredientToRestock.getIngredientUnit(), ingredientToRestock.getIngredientWarningAmount());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientQuantity getQuantityToRestock() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return quantityToRestock;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!(other instanceof RestockIngredientCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestockIngredientCommand e \u003d (RestockIngredientCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 quantityToRestock.equals(e.getQuantityToRestock());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 2,
      "lingyanhao": 2,
      "hiyingnn": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": " * Selects a member identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \": Selects the member identified by the index number used in the displayed member list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_SELECT_MEMBER_SUCCESS \u003d \"Selected Member: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cMember\u003e filteredMemberList \u003d model.getFilteredMemberList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredMemberList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.setSelectedMember(filteredMemberList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_MEMBER_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 2,
      "lingyanhao": 1,
      "-": 46,
      "limli": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.model.BookingModel.PREDICATE_SHOW_ALL_BOOKINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.model.IngredientModel.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.model.StaffModel.PREDICATE_SHOW_ALL_STAFF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!model.canUndoRestaurantBook()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.undoRestaurantBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "lingyanhao": 4,
      "hiyingnn": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCapacityCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Updates the capacity of the restaurant."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class UpdateCapacityCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updatecapacity\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Capacity successfully set to %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to resize capacity- restaurant will be overbooked.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Capacity capacity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public UpdateCapacityCommand(Capacity capacity) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!model.canUpdateCapacity(capacity)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.setCapacity(capacity);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, capacity));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewStatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.ui.StatsWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": " * Opens a new window containing the stats."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "public class ViewStatsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_SHOWING_STATS \u003d \"Opened stats window.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_SIZE_CONSTRAINTS \u003d \"Days should be an integer between 1 and \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "            + Statistics.getMaxDays() + \" inclusive.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the statistics of the bookings made\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \" for the last many days specified.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"Parameters: DAYS (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 30 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ViewStatsCommand(int days) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        new StatsWindow(new Statistics(model.getRestaurantBook().getBookingList(), days).generateGraphData()).show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new CommandResult(MESSAGE_SHOWING_STATS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "                || (other instanceof ViewStatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 days \u003d\u003d ((ViewStatsCommand) other).days); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddBookingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CustomerIndexedBooking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A command that adds a booking to the restaurant book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * This command is used when only the customer\u0027s index but not the full details are known."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddBookingCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addbooking\"; // make sure that this is in lower case"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ab\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a booking to the restaurant.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_CUSTOMER + \"CUSTOMER \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_NUMBER_PERSONS + \"NUMBER_OF_PERSONS\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_CUSTOMER + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_START_TIME + \"2019-02-23T14:30 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_NUMBER_PERSONS + \"3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New booking added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"Booking has already been made.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_FULL \u003d \"Restaurant is full. Please find another time slot.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final CustomerIndexedBooking customerIndexedBooking;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddBookingCommand(CustomerIndexedBooking customerIndexedBooking) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(customerIndexedBooking);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.customerIndexedBooking \u003d customerIndexedBooking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Optional\u003cBooking\u003e toAddOptional \u003d customerIndexedBooking.getBooking(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!toAddOptional.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Booking toAdd \u003d toAddOptional.get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (model.hasBooking(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (!model.canAccommodate(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                throw new CommandException(MESSAGE_FULL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            model.addBooking(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            model.commitRestaurantBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof AddBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 customerIndexedBooking.equals(((AddBookingCommand) other).customerIndexedBooking)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 75,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddIngredientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_UNIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_WARNINGAMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A command that adds an ingredient to the restaurant book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddIngredientCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addingredient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ia\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an ingredient to the book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_INGREDIENT_UNIT + \"STANDARD_UNIT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_WARNINGAMOUNT + \"WARNINGAMOUNT] + \\n \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"cheese \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INGREDIENT_UNIT + \"pounds \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"8 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + PREFIX_INGREDIENT_WARNINGAMOUNT + \"WARNING_AMOUNT\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"This ingredient already exists in the book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Ingredient toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddIngredientCommand(Ingredient ingredient) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        toAdd \u003d ingredient;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (model.hasIngredient(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.addIngredient(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof AddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 58,
      "hiyingnn": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddMemberCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A command that adds a member to the restaurant book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddMemberCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmember\"; // make sure that this is in lower case"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"am\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a member to the restaurant book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New member added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"This member already exists in the restaurant book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Member toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddMemberCommand(Member member) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(member);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        toAdd \u003d member;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (model.hasMember(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.addMember(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof AddMemberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddMemberCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddStaffCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A command that adds a staff to the restaurant book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddStaffCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstaff\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sa\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a staff to the restaurant. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_APPOINTMENT + \"APPOINTMENT\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_NAME + \"Jane Smith \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_EMAIL + \"jsmith@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + PREFIX_APPOINTMENT + \"Server\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New staff added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"This staff already exists in the restaurant!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Staff toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddStaffCommand(Staff staff) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(staff);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        toAdd \u003d staff;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (model.hasStaff(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.addStaff(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof AddStaffCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStaffCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBookingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CustomerIndexedBooking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddBookingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Parses input arguments and creates a new AddBookingCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "public class AddBookingCommandParser implements Parser\u003cAddBookingCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBookingCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * and returns an AddBookingCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_START_TIME, PREFIX_CUSTOMER, PREFIX_NUMBER_PERSONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_START_TIME, PREFIX_CUSTOMER, PREFIX_NUMBER_PERSONS)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        BookingWindow bookingWindow \u003d ParserUtil.parseBookingWindow(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        Index memberIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CUSTOMER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        BookingSize numMembers \u003d ParserUtil.parseBookingSize(argMultimap.getValue(PREFIX_NUMBER_PERSONS).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CustomerIndexedBooking toAdd \u003d new CustomerIndexedBooking(bookingWindow, memberIndex, numMembers);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new AddBookingCommand(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 38,
      "limli": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddIngredientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_UNIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_WARNINGAMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientUnit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientWarningAmount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Parses input arguments and creates a new AddIngredient Command object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddIngredientCommandParser implements Parser\u003cAddIngredientCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddIngredientCmmand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * and returns an AddIngredientCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        PREFIX_INGREDIENT_QUANTITY, PREFIX_INGREDIENT_UNIT, PREFIX_INGREDIENT_WARNINGAMOUNT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_UNIT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                    AddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientName ingredientName \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientName(argMultimap.getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientUnit ingredientUnit \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientUnit(argMultimap.getValue(PREFIX_INGREDIENT_UNIT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // optional fields parsed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Optional\u003cString\u003e quantityField \u003d argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (quantityField.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            ingredientQuantity \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            ingredientQuantity \u003d new IngredientQuantity(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Optional\u003cString\u003e warningAmountField \u003d argMultimap.getValue(PREFIX_INGREDIENT_WARNINGAMOUNT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientWarningAmount ingredientWarningAmount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (warningAmountField.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            ingredientWarningAmount \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    ParserUtil.parseIngredientWarningAmount"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                            (argMultimap.getValue(PREFIX_INGREDIENT_WARNINGAMOUNT).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            ingredientWarningAmount \u003d new IngredientWarningAmount(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredient \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new Ingredient(ingredientName, ingredientQuantity, ingredientUnit, ingredientWarningAmount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new AddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 28,
      "hiyingnn": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMemberCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Parses input arguments and creates a new AddMemberCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddMemberCommandParser implements Parser\u003cAddMemberCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddMemberCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * and returns an AddMemberCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        Optional\u003cString\u003e loyaltyPointsField \u003d argMultimap.getValue(PREFIX_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        LoyaltyPoints loyaltyPoints;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (loyaltyPointsField.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "            loyaltyPoints \u003d ParserUtil.parseLoyaltyPoints(loyaltyPointsField.get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "            loyaltyPoints \u003d new LoyaltyPoints(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member member \u003d new Member(name, phone, email, loyaltyPoints);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new AddMemberCommand(member);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "lingyanhao": 39,
      "limli": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddStaffCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddStaffCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Parses input arguments and creates a new AddStaffCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddStaffCommandParser implements Parser\u003cAddStaffCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStaffCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * and returns an AddStaffCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public AddStaffCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_APPOINTMENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_APPOINTMENT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStaffCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Appointment appointment \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_APPOINTMENT).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff staff \u003d new Staff(name, phone, email, appointment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new AddStaffCommand(staff);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 36,
      "lingyanhao": 8,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean arePrefixesPresent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_NAME \u003d new Prefix(\"in/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_UNIT \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_WARNINGAMOUNT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"ts/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Prefix PREFIX_NUMBER_PERSONS \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Prefix PREFIX_APPOINTMENT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Prefix PREFIX_LOYALTY_POINTS \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "lingyanhao": 3,
      "hiyingnn": 5,
      "-": 12,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ConsumeIngredientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.ConsumeIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Parses input arguments and creates a new CosnsumeIngredientCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class ConsumeIngredientCommandParser implements Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ConsumeIngredientCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * and returns an ConsumeIngredientCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ConsumeIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INDEX, PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    ConsumeIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientQuantity ingredientQuantityToDeplete \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new ConsumeIngredientCommand(index, ingredientQuantityToDeplete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBookingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Parses input arguments and creates a new DeleteBookingCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class DeleteBookingCommandParser implements Parser\u003cDeleteBookingCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBookingCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * and returns an DeleteBookingCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public DeleteBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new DeleteBookingCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 27,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteIngredientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Parses input arguments and creates a new DeleteIngredientCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class DeleteIngredientCommandParser implements Parser\u003cDeleteIngredientCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteIngredientCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * and returns an DeleteIngredientCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public DeleteIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new DeleteIngredientCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIngredientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteMemberCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * Parses input arguments and creates a new DeleteMemberCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class DeleteMemberCommandParser implements Parser\u003cDeleteMemberCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMemberCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "     * and returns an DeleteMemberCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    public DeleteMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            return new DeleteMemberCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMemberCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "limli": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteStaffCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.DeleteStaffCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * Parses input arguments and creates a new DeleteMemberCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class DeleteStaffCommandParser implements Parser\u003cDeleteStaffCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStaffCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * and returns an DeleteStaffCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public DeleteStaffCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return new DeleteStaffCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStaffCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 7,
      "-": 21,
      "limli": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditBookingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand.EditBookingDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Parses input arguments and creates a new EditBookingCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class EditBookingCommandParser implements Parser\u003cEditBookingCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBookingCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * and returns an EditBookingCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public EditBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_START_TIME, PREFIX_NUMBER_PERSONS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditBookingDescriptor editBookingDescriptor \u003d new EditBookingDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            BookingWindow bookingWindow \u003d ParserUtil.parseBookingWindow(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            editBookingDescriptor.setBookingWindow(bookingWindow);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUMBER_PERSONS).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            BookingSize bookingSize \u003d ParserUtil.parseBookingSize(argMultimap.getValue(PREFIX_NUMBER_PERSONS).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            editBookingDescriptor.setBookingSize(bookingSize);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!editBookingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException(EditBookingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new EditBookingCommand(index, editBookingDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": " * Parses input arguments and creates a new EditMemberCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditMemberCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditMemberCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "     * and returns an EditMemberCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "                    EditMemberCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberDescriptor editMemberDescriptor \u003d new EditMemberDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "            editMemberDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "            editMemberDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "            editMemberDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOYALTY_POINTS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "            editMemberDescriptor.setLoyaltyPoints(ParserUtil.parseLoyaltyPoints("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "                    argMultimap.getValue(PREFIX_LOYALTY_POINTS).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!editMemberDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ParseException(EditMemberCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new EditMemberCommand(index, editMemberDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "limli": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditStaffCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.EditStaffCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.EditStaffCommand.EditStaffDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Parses input arguments and creates a new EditStaffCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class EditStaffCommandParser implements Parser\u003cEditStaffCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStaffCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * and returns an EditStaffCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public EditStaffCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_APPOINTMENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    EditStaffCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        EditStaffDescriptor editStaffDescriptor \u003d new EditStaffDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            editStaffDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            editStaffDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            editStaffDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            editStaffDescriptor.setAppointment(ParserUtil.parseAppointment("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    argMultimap.getValue(PREFIX_APPOINTMENT).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!editStaffDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new ParseException(EditStaffCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return new EditStaffCommand(index, editStaffDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListIngredientsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_WARNINGAMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.ListIngredientsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientNameAndWarningAmountPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Parses input arguments and creates a new ListIngredientsCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class ListIngredientsCommandParser implements Parser\u003cListIngredientsCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListIngredientsCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * and returns an ListIngredientsCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ListIngredientsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_WARNINGAMOUNT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!argMultimap.getPreamble().trim().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListIngredientsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        List\u003cString\u003e nameKeywords;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_INGREDIENT_NAME).get().trim().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            nameKeywords \u003d Arrays.asList(argMultimap.getValue(PREFIX_INGREDIENT_NAME).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            nameKeywords \u003d new ArrayList\u003c\u003e(); // if no names given, set to empty list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        boolean filterByWarnAmt \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INGREDIENT_WARNINGAMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            filterByWarnAmt \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new ListIngredientsCommand(new IngredientNameAndWarningAmountPredicate(nameKeywords, filterByWarnAmt));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListMembersCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.ListMembersCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.NameAndLoyaltyPointsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": " * Parses input arguments and creates a new ListMembersCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "public class ListMembersCommandParser implements Parser\u003cListMembersCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListMembersCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "     * and returns an ListMembersCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ListMembersCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!argMultimap.getPreamble().trim().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListMembersCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cString\u003e nameKeywords;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_NAME).get().trim().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "            nameKeywords \u003d Arrays.asList(argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "            nameKeywords \u003d new ArrayList\u003c\u003e(); // if no names given, set to empty list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        int minLoyaltyPoints \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOYALTY_POINTS).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "            minLoyaltyPoints \u003d ParserUtil.parseLoyaltyPoints(argMultimap.getValue(PREFIX_LOYALTY_POINTS).get()).value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new ListMembersCommand(new NameAndLoyaltyPointsPredicate(nameKeywords, minLoyaltyPoints));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientWarningAmount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Parses a {@code String appointment} into a {@code Appointment}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws ParseException if the given {@code appointment} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static Appointment parseAppointment(String appointment) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String trimmedAppointment \u003d appointment.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!Appointment.isValidAppointmentName(trimmedAppointment)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new ParseException(Appointment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return new Appointment(trimmedAppointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Parses a {@code String loyaltyPoints} into an {@code LoyaltyPoints}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @throws ParseException if the given {@code loyaltyPoints} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static LoyaltyPoints parseLoyaltyPoints(String loyaltyPoints) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limli"
        },
        "content": "        requireNonNull(loyaltyPoints);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limli"
        },
        "content": "        String trimmedLoyaltyPoints \u003d loyaltyPoints.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!LoyaltyPoints.isValidLoyaltyPoints(trimmedLoyaltyPoints)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ParseException(LoyaltyPoints.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new LoyaltyPoints(Integer.parseInt(trimmedLoyaltyPoints));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses a {@code String name} into an {@code IngredientName}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static IngredientName parseIngredientName(String name) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String trimmedIngredientName \u003d name.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!IngredientName.isValidIngredientName(trimmedIngredientName)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new IngredientName(trimmedIngredientName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses a {@code String quantity} into an {@code IngredientQuantity}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static IngredientQuantity parseIngredientQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String trimmedIngredientQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!IngredientQuantity.isValidIngredientQuantity(trimmedIngredientQuantity)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new IngredientQuantity(Integer.parseInt(trimmedIngredientQuantity));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses a {@code String unit} into an {@code IngredientUnit}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static IngredientUnit parseIngredientUnit(String unit) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String trimmedIngredientUnit \u003d unit.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!IngredientUnit.isValidIngredientUnit(trimmedIngredientUnit)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException(IngredientUnit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new IngredientUnit(trimmedIngredientUnit);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses a {@code String warningAmount} into an {@code IngredientWarningAmount}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static IngredientWarningAmount parseIngredientWarningAmount(String warningAmount) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(warningAmount);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String trimmedWarningAmount \u003d warningAmount.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!IngredientWarningAmount.isValidIngredientWarningAmount(trimmedWarningAmount)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException(IngredientWarningAmount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new IngredientWarningAmount(Integer.parseInt(trimmedWarningAmount));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Creates a new BookingWindow object that parses the time. Uses the yyyy-MM-dd HH:mm format."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * For example, 2011-12-03 10:15"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static BookingWindow parseBookingWindow(String time) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new BookingWindow(trimmedTime);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException(BookingWindow.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses a {@code String bookingSize} into a {@code BookingSize}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static BookingSize parseBookingSize(String bookingSize) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(bookingSize);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String trimmedBookingSize \u003d bookingSize.trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new BookingSize(trimmedBookingSize);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException(BookingSize.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 9,
      "lingyanhao": 22,
      "hiyingnn": 59,
      "-": 95,
      "limli": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RestaurantBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.ConsumeIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.DeleteStaffCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.EditStaffCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.ListIngredientsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.ListMembersCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.RestockIngredientCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.UpdateCapacityCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.ViewStatsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddBookingCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddIngredientCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddStaffCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestaurantBookParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddMemberCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "            return new AddMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new AddBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddIngredientCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new AddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddStaffCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case AddStaffCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return new AddStaffCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case UpdateCapacityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new UpdateCapacityCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "        case EditMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "        case EditMemberCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case EditBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case EditBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new EditBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case EditStaffCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case EditStaffCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return new EditStaffCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "        case DeleteMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "        case DeleteMemberCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "            return new DeleteMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case DeleteBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        case DeleteBookingCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new DeleteBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        case DeleteIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        case DeleteIngredientCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new DeleteIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case DeleteStaffCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case DeleteStaffCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return new DeleteStaffCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "        case ListMembersCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "            return new ListMembersCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        case RestockIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        case RestockIngredientCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new RestockIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        case ConsumeIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        case ConsumeIngredientCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new ConsumeIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        case ListIngredientsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new ListIngredientsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limli"
        },
        "content": "        case ViewStatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limli"
        },
        "content": "            return new ViewStatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 21,
      "lingyanhao": 29,
      "hiyingnn": 22,
      "-": 82,
      "limli": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RestockIngredientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.RestockIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Parses input arguments and creates a new RestockIngredientCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestockIngredientCommandParser implements Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RestockIngredientCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * and returns an RestockIngredientCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public RestockIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INDEX, PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    RestockIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientQuantity ingredientQuantityToRestock \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new RestockIngredientCommand(index, ingredientQuantityToRestock);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCapacityCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.UpdateCapacityCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Parses input arguments and creates a new UpdateCapacityCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class UpdateCapacityCommandParser implements Parser\u003cUpdateCapacityCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public UpdateCapacityCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // TODO: use parserutil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Capacity capacity \u003d new Capacity(args.trim());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return new UpdateCapacityCommand(capacity);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ParseException(Capacity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewStatsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.ViewStatsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * Parses input arguments and creates a new ViewStatsCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class ViewStatsCommandParser implements Parser\u003cViewStatsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewStatsCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "     * and returns an ViewStatsCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ViewStatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "            days \u003d Integer.parseInt(preamble);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "        } catch (NumberFormatException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (days \u003e Statistics.getMaxDays() || days \u003c\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ParseException(ViewStatsCommand.MESSAGE_SIZE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new ViewStatsCommand(days);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BookingModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * The API that stores the booking side of the model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public interface BookingModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Predicate\u003cBooking\u003e PREDICATE_SHOW_ALL_BOOKINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a booking with the same identity as {@code booking} exists in the restaurant book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean hasBooking(Booking booking);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if {@code booking} can be added to the restaurant without exceeding capacity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean canAccommodate(Booking booking);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Deletes the given booking."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The item must exist in the restaurant book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void deleteBooking(Booking target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds the given booking."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code booking} must not already exist in the restaurant book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void addBooking(Booking booking);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the given booking {@code target} with {@code editedBooking}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The booking identity of {@code editedBooking}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * must not be the same as another existing booking in the restaurant book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void setBooking(Booking target, Booking editedBooking);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Determines if editing the booking will cause the restaurant to be overbooked"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean canAccommodateEdit(Booking target, Booking editedBooking);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered booking list */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Updates the filter of the filtered booking list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Selected booking in the filtered booking list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no booking is selected."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the selected booking in the filtered booking list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no booking is selected."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Booking getSelectedBooking();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the selected booking in the filtered booking list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void setSelectedBooking(Booking booking);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Gets the capacity of the restaurant."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    Capacity getCapacity();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Sets the capacity of the restaurant."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void setCapacity(Capacity newCapacity);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if and only if changing the capacity to {@code Capacity} will not result in overbooking"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean canUpdateCapacity(Capacity newCapacity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 29,
      "lingyanhao": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IngredientModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * The API that stores the ingredient side of the model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public interface IngredientModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Predicate\u003cIngredient\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a ingredient with the same identity as {@code ingredient} exists in the restaurant book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean hasIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Deletes the given ingredient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The ingredient must exist in the restaurant book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void deleteIngredient(Ingredient target);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code ingredient} must not already exist in the restaurant book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void addIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the given member {@code target} with {@code editedMember}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The member identity of {@code editedMember}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * must not be the same as another existing member in the restaurant book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void setIngredient(Ingredient target, Ingredient editedItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered ingredient list */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Updates the filter of the filtered ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Selected booking in the filtered ingredient list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no ingredient is selected."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ReadOnlyProperty\u003cIngredient\u003e selectedIngredientProperty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the selected ingredient in the filtered ingredient list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no ingredient is selected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Ingredient getSelectedIngredient();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the selected ingredient in the filtered ingredient list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void setSelectedIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 29,
      "lingyanhao": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Item.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Represents an Item in the restaurant book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public interface Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if items have he same name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean isSameItem(Object other);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 11,
      "hiyingnn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MemberModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * The API that stores the member side of the model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public interface MemberModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Predicate\u003cMember\u003e PREDICATE_SHOW_ALL_MEMBERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a member with the same identity as {@code member} exists in the restaurant book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean hasMember(Member member);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Deletes the given member."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The member must exist in the restaurant book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void deleteMember(Member target);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds the given member."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code member} must not already exist in the restaurant book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void addMember(Member member);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the given member {@code target} with {@code editedMember}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The member identity of {@code editedMember}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * must not be the same as another existing member in the restaurant book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void setMember(Member target, Member editedItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered member list */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cMember\u003e getFilteredMemberList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Updates the filter of the filtered member list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void updateFilteredMemberList(Predicate\u003cMember\u003e predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Selected member in the filtered member list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no member is selected."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ReadOnlyProperty\u003cMember\u003e selectedMemberProperty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the selected member in the filtered member list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no member is selected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Member getSelectedMember();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the selected member in the filtered member list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void setSelectedMember(Member member);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 29,
      "lingyanhao": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public interface Model extends MemberModel, BookingModel, IngredientModel, StaffModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns the user prefs\u0027 restaurant book file path."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Sets the user prefs\u0027 restaurant book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void setRestaurantBookFilePath(Path restaurantBookFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Replaces restaurant book data with the data in {@code restaurantBook}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void setRestaurantBook(ReadOnlyRestaurantBook restaurantBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /** Returns the RestaurantBook */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    ReadOnlyRestaurantBook getRestaurantBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if the model has previous restaurant book states to restore."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    boolean canUndoRestaurantBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if the model has undone restaurant book states to restore."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    boolean canRedoRestaurantBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Restores the model\u0027s restaurant book to its previous state."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void undoRestaurantBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Restores the model\u0027s restaurant book to its previously undone state."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void redoRestaurantBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Saves the current restaurant book state for undo/redo."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void commitRestaurantBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 1,
      "hiyingnn": 18,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Represents the in-memory model of the restaurant book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final VersionedRestaurantBook versionedRestaurantBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final FilteredList\u003cMember\u003e filteredMembers;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final SimpleObjectProperty\u003cMember\u003e selectedMember \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final FilteredList\u003cBooking\u003e filteredBookings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final SimpleObjectProperty\u003cBooking\u003e selectedBooking \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredIngredients;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final SimpleObjectProperty\u003cIngredient\u003e selectedIngredient \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final FilteredList\u003cStaff\u003e filteredStaff;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final SimpleObjectProperty\u003cStaff\u003e selectedStaff \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Initializes a ModelManager with the given restaurantBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ModelManager(ReadOnlyRestaurantBook restaurantBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireAllNonNull(restaurantBook, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        logger.fine(\"Initializing with restaurant book: \" + restaurantBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        versionedRestaurantBook \u003d new VersionedRestaurantBook(restaurantBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        filteredMembers \u003d new FilteredList\u003c\u003e(versionedRestaurantBook.getMemberList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        filteredMembers.addListener(this::ensureSelectedMemberIsValid);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        filteredBookings \u003d new FilteredList\u003c\u003e(versionedRestaurantBook.getBookingList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        filteredIngredients \u003d new FilteredList\u003c\u003e(versionedRestaurantBook.getIngredientList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        filteredStaff \u003d new FilteredList\u003c\u003e(versionedRestaurantBook.getStaffList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this(new RestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return userPrefs.getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void setRestaurantBookFilePath(Path restaurantBookFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(restaurantBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userPrefs.setRestaurantBookFilePath(restaurantBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void setRestaurantBook(ReadOnlyRestaurantBook restaurantBook) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        versionedRestaurantBook.resetData(restaurantBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return versionedRestaurantBook;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(member);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.hasMember(member);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.hasBooking(booking);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canAccommodate(Booking booking) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.canAccommodate(booking);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasStaff(Staff staff) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(staff);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.hasStaff(staff);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteMember(Member target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.removeMember(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteBooking(Booking target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.removeBooking(target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.removeIngredient(target);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteStaff(Staff target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.removeStaff(target);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addMember(Member member) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(member);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.addMember(member);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addBooking(Booking booking) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.addBooking(booking);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.addIngredient(ingredient);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addStaff(Staff staff) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(staff);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.addStaff(staff);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        updateFilteredStaffList(PREDICATE_SHOW_ALL_STAFF);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireAllNonNull(target, editedMember);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.setMember(target, editedMember);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireAllNonNull(target, editedBooking);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.setBooking(target, editedBooking);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setStaff(Staff target, Staff editedStaff) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireAllNonNull(target, editedStaff);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        versionedRestaurantBook.setStaff(target, editedStaff);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canAccommodateEdit(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.canAccommodateEdit(target, editedBooking);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Capacity getCapacity() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.getCapacity();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setCapacity(Capacity newCapacity) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        versionedRestaurantBook.setCapacity(newCapacity);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canUpdateCapacity(Capacity newCapacity) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return versionedRestaurantBook.canUpdateCapacity(newCapacity);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limli"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Member List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Member} backed by the internal list of"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code versionedRestaurantBook}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cMember\u003e getFilteredMemberList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return filteredMembers;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return filteredBookings;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return filteredIngredients;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cStaff\u003e getFilteredStaffList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return filteredStaff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        filteredMembers.setPredicate(predicate);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        filteredBookings.setPredicate(predicate);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        filteredIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredStaffList(Predicate\u003cStaff\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        filteredStaff.setPredicate(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean canUndoRestaurantBook() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return versionedRestaurantBook.canUndo();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean canRedoRestaurantBook() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return versionedRestaurantBook.canRedo();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void undoRestaurantBook() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        versionedRestaurantBook.undo();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void redoRestaurantBook() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        versionedRestaurantBook.redo();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void commitRestaurantBook() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        versionedRestaurantBook.commit();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limli"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected member \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cMember\u003e selectedMemberProperty() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedMember;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedBooking;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cIngredient\u003e selectedIngredientProperty() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedIngredient;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cStaff\u003e selectedStaffProperty() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedStaff;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Member getSelectedMember() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedMember.getValue();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Booking getSelectedBooking() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedBooking.getValue();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Ingredient getSelectedIngredient() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedIngredient.getValue();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Staff getSelectedStaff() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return selectedStaff.getValue();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedMember(Member member) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (member !\u003d null \u0026\u0026 !filteredMembers.contains(member)) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        selectedMember.setValue(member);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedBooking(Booking booking) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (booking !\u003d null \u0026\u0026 !filteredBookings.contains(booking)) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        selectedBooking.setValue(booking);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (ingredient !\u003d null \u0026\u0026 !filteredIngredients.contains(ingredient)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        selectedIngredient.setValue(ingredient);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedStaff(Staff staff) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (staff !\u003d null \u0026\u0026 !filteredStaff.contains(staff)) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        selectedStaff.setValue(staff);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Ensures {@code selectedMember} is a valid member in {@code filteredMembers}."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void ensureSelectedMemberIsValid(ListChangeListener.Change\u003c? extends Member\u003e change) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limli"
        },
        "content": "            if (selectedMember.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limli"
        },
        "content": "                // null is always a valid selected member, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "limli"
        },
        "content": "            boolean wasSelectedMemberReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limli"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedMember.getValue());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "limli"
        },
        "content": "            if (wasSelectedMemberReplaced) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limli"
        },
        "content": "                // Update selectedMember to its new value."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limli"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedMember.getValue());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limli"
        },
        "content": "                selectedMember.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limli"
        },
        "content": "            boolean wasSelectedMemberRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limli"
        },
        "content": "                    .anyMatch(removedMember -\u003e selectedMember.getValue().isSameMember(removedMember));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "limli"
        },
        "content": "            if (wasSelectedMemberRemoved) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "limli"
        },
        "content": "                // Select the member that came before it in the list,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "limli"
        },
        "content": "                // or clear the selection if there is no such member."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "limli"
        },
        "content": "                selectedMember.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return versionedRestaurantBook.equals(other.versionedRestaurantBook)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 filteredMembers.equals(other.filteredMembers)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedMember.get(), other.selectedMember.get())"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 filteredBookings.equals(other.filteredBookings)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedBooking.get(), other.selectedBooking.get());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 67,
      "lingyanhao": 117,
      "hiyingnn": 34,
      "-": 192,
      "limli": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRestaurantBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public interface ReadOnlyRestaurantBook extends Observable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns an unmodifiable view of the {@code Member} list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * This list will not contain any duplicate members."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cMember\u003e getMemberList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns an unmodifiable view of {@code Booking} list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * This list will not contain any duplicate bookings."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns an unmodifiable view of {@code Ingredient} list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns an unmodifiable view of {@code Staff} list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * This list will not contain any duplicate staff."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cStaff\u003e getStaffList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns the capacity of the restaurant."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    Capacity getCapacity();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 31,
      "hiyingnn": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RestaurantBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.RestaurantOverbookedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Wraps all data at the restaurant-book level"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Duplicates are not allowed (by .isSameItem() comparison)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestaurantBook implements ReadOnlyRestaurantBook {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final UniqueItemList\u003cMember\u003e members;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final UniqueItemList\u003cBooking\u003e bookings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final UniqueItemList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final UniqueItemList\u003cStaff\u003e staff;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Capacity capacity \u003d Capacity.getDefaultCapacity();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        *   among constructors."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        */ {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        members \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookings \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredients \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        staff \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public RestaurantBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Creates an RestaurantBook using the Members in the {@code toBeCopied}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public RestaurantBook(ReadOnlyRestaurantBook toBeCopied) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Replaces the contents of the member list with {@code members}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code members} must not contain duplicate members."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setMembers(List\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.members.setItems(members);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the contents of the booking list with {@code bookings}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code bookings} must not contain duplicate bookings."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.bookings.setItems(bookings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the contents of the booking list with {@code ingredients}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredients.setItems(ingredients);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the contents of the booking list with {@code staff}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code staff} must not contain duplicate staff."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    // Temporary rename to not make it look like overloaded method with setStaff(Staff target, Staff editedStaff)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    // TODO: find a better name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setStaffList(List\u003cStaff\u003e staff) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.staff.setItems(staff);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Resets the existing data of this {@code RestaurantBook} with {@code newData}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void resetData(ReadOnlyRestaurantBook newData) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        setMembers(newData.getMemberList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        setBookings(newData.getBookingList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        setIngredients(newData.getIngredientList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        setStaffList(newData.getStaffList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        capacity \u003d newData.getCapacity();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    //// item-level operations"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a member with the same identity as {@code member} exists in the restaurant book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(member);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return members.contains(member);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a booking with the same identity as {@code booking} exists in the restaurant book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return bookings.contains(booking);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if {@code booking} can be added to the restaurant without exceeding capacity."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canAccommodate(Booking booking) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cBooking\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        for (Booking b: bookings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            newList.add(b);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } // copy all the bookings over as booking list is immutable"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        newList.add(booking);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return getCapacity().canAccommodate(newList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a ingredient with the same identity as {@code ingredient} exists in the restaurant book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return ingredients.contains(ingredient);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a staff with the same identity as {@code staff} exists in the restaurant book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasStaff(Staff staff) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(staff);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return this.staff.contains(staff);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds a member to the restaurant book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The member must not already exist in the restaurant book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addMember(Member member) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        members.add(member);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds a booking to the restaurant book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The booking must not already exist in the restaurant book."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The addition of this booking must not allow restaurant to exceed capacity."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addBooking(Booking booking) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookings.add(booking);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!getCapacity().canAccommodate(bookings.asUnmodifiableObservableList())) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new RestaurantOverbookedException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookings.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds a ingredient to the restaurant book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The ingredient must not already exist in the restaurant book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ingredients.add(ingredient);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds a staff to the restaurant book."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The staff must not already exist in the restaurant book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addStaff(Staff s) { // 1 letter name used to avoid variable name conflict"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        staff.add(s);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Replaces the given member {@code target} in the list with {@code editedMember}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limli"
        },
        "content": "     * The member identity of {@code editedMember} must not be the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limli"
        },
        "content": "     * same as another existing member in the restaurant book."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        members.setItem(target, editedMember);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ObservableList\u003cBooking\u003e bookingObservableList \u003d bookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Function\u003cBooking, Booking\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                updateBooking \u003d b -\u003e (b.getCustomer().equals(target) ? b.editContacts(editedMember) : b);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        setBookings(bookingObservableList.stream().map(updateBooking).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the given member {@code target} in the list with {@code editedBooking}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The member identity of {@code editedBooking} must not be the"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * same as another existing booking in the restaurant book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookings.setItem(target, editedBooking);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!capacity.canAccommodate(bookings.asUnmodifiableObservableList())) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new RestaurantOverbookedException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookings.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Determines if editing the booking will cause the restaurant to be overbooked"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canAccommodateEdit(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // newList simulates what happens when the target is replaced"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cBooking\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        for (Booking b: bookings) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (!b.equals(target)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                newList.add(b);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                newList.add(editedBooking);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return getCapacity().canAccommodate(newList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the given member {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The member identity of {@code editedIngredient} must not be the"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * same as another existing ingredient in the restaurant book."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ingredients.setItem(target, editedIngredient);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the given member {@code target} in the list with {@code editedStaff}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The member identity of {@code editedStaff} must not be the"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * same as another existing member in the restaurant book."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setStaff(Staff target, Staff editedStaff) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        staff.setItem(target, editedStaff);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantBook}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * All bookings made by this member will also be removed."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code key} must exist in the restaurant book."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void removeMember(Member key) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limli"
        },
        "content": "        members.remove(key);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // When a member is deleted, all associated bookings are also deleted."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Predicate\u003cBooking\u003e isValidBooking \u003d b -\u003e !b.getCustomer().equals(key);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ObservableList\u003cBooking\u003e bookingObservableList \u003d bookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        setBookings(bookingObservableList.stream().filter(isValidBooking).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantBook}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code key} must exist in the restaurant book."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void removeBooking(Booking key) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookings.remove(key);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantBook}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code key} must exist in the restaurant book."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredients.remove(key);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantBook}."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code key} must exist in the restaurant book."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void removeStaff(Staff key) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        staff.remove(key);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Capacity getCapacity() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return capacity;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setCapacity(Capacity newCapacity) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        capacity \u003d newCapacity;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!newCapacity.canAccommodate(bookings.asUnmodifiableObservableList())) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new RestaurantOverbookedException();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canUpdateCapacity(Capacity newCapacity) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return newCapacity.canAccommodate(bookings.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Notifies listeners that the restaurant book has been modified."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limli"
        },
        "content": "        return members.asUnmodifiableObservableList().size() + \" members \";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return members.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return bookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cStaff\u003e getStaffList() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return staff.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || (other instanceof RestaurantBook // instanceof handles nulls"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 members.equals(((RestaurantBook) other).members)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 bookings.equals(((RestaurantBook) other).bookings)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 ingredients.equals(((RestaurantBook) other).ingredients)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 staff.equals(((RestaurantBook) other).staff));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return Objects.hash(members, bookings, ingredients, staff);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 9,
      "lingyanhao": 246,
      "hiyingnn": 24,
      "-": 93,
      "limli": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StaffModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * The API that stores the staff side of the model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public interface StaffModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Predicate\u003cStaff\u003e PREDICATE_SHOW_ALL_STAFF \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if a staff with the same identity as {@code staff} exists in the restaurant book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    boolean hasStaff(Staff staff);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Deletes the given staff."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * The staff must exist in the restaurant book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void deleteStaff(Staff target);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Adds the given staff."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * {@code staff} must not already exist in the restaurant book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    void addStaff(Staff staff);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Replaces the given staff {@code target} with {@code editedStaff}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code target} must exist in the restaurant book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * The staff identity of {@code editedStaff}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * must not be the same as another existing staff in the restaurant book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void setStaff(Staff target, Staff editedItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered staff list */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    ObservableList\u003cStaff\u003e getFilteredStaffList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Updates the filter of the filtered staff list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void updateFilteredStaffList(Predicate\u003cStaff\u003e predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Selected staff in the filtered staff list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no staff is selected."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    ReadOnlyProperty\u003cStaff\u003e selectedStaffProperty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the selected staff in the filtered staff list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * null if no staff is selected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    Staff getSelectedStaff();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the selected staff in the filtered staff list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    void setSelectedStaff(Staff staff);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 37,
      "lingyanhao": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Statistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.chart.XYChart.Data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": " * Manages the statistics of the bookings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"dd MMM yyyy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final int MAX_BARS \u003d 20;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final int MAX_BAR_SIZE \u003d 500;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Days should be an integer between 1 and \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "            + getMaxDays() + \" inclusive.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final ObservableList\u003cBooking\u003e bookings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final int bucketSize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final int numBuckets;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    public Statistics(ObservableList\u003cBooking\u003e bookings, int days) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        checkArgument(1 \u003c\u003d days \u0026\u0026 days \u003c\u003d getMaxDays() , MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        requireNonNull(bookings);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.bookings \u003d bookings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        bucketSize \u003d (days + MAX_BARS - 1) / MAX_BARS; // ceiling of days / MAX_BARS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        numBuckets \u003d (days + bucketSize - 1) / bucketSize; // ceiling of days / bucketSize"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        assert(bucketSize \u003c\u003d MAX_BAR_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        assert(numBuckets \u003c\u003d MAX_BARS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        assert(bucketSize \u003e\u003d 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        assert(numBuckets \u003e\u003d 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static int getMaxDays() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        return MAX_BARS * MAX_BAR_SIZE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    private int getDaysDifference(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "        return Period.between(start, end).getDays();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Formats the date into a String."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @param date the date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @return the formatted String"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "    private String formatDate(LocalDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Formats 2 dates into a String."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @param start the starting date. Should be before end."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @param end the ending date. Should be after start."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @return the formatted String"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "    private String formatDate(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (start.isEqual(end)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "            return formatDate(start);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "        return formatDate(start) + \" - \" + formatDate(end);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Generates the data for the bar graph"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @return the list of data"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "    public List\u003cData\u003cString, Integer\u003e\u003e generateGraphData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "        // TODO refactor this"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cInteger\u003e numBookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (int i \u003d 0; i \u003c numBuckets; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "            numBookings.add(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limli"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (Booking booking : bookings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "            int difference \u003d getDaysDifference(booking.getStartTime().toLocalDate(), today);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": "            if (0 \u003c\u003d difference \u0026\u0026 difference \u003c numBuckets * bucketSize) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "                int index \u003d difference / bucketSize;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": "                numBookings.set(index,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "                    numBookings.get(index)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "                    + booking.getNumMembers().getSize()); // increment by the size of the booking"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cData\u003cString, Integer\u003e\u003e graphData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (int i \u003d numBuckets - 1; i \u003e\u003d 0; i--) { // add the earliest date first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limli"
        },
        "content": "            String name \u003d formatDate(today.minusDays((i + 1) * bucketSize - 1), today.minusDays(i * bucketSize));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limli"
        },
        "content": "            graphData.add(new Data\u003c\u003e(name, numBookings.get(i)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "        return graphData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueItemList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A items is considered unique by comparing using {@code Item#isSameItem(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": " * items uses Item#isSameItem(Object) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of an item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class UniqueItemList\u003cT extends Item\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if the list contains an equivalent member as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean contains(Object toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return internalList.stream().anyMatch(x -\u003e x.isSameItem(toCheck));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Checks if it is replacing itemToEdit can be replaced with editedItem without duplicates."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * itemToEdit must be present in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private boolean safeToReplace(T itemToEdit, T editedItem) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cT\u003e replacement \u003d internalList.stream().map(x -\u003e (x.isSameItem(itemToEdit) ? editedItem : x))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return itemsAreUnique(replacement);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Adds a member to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "     * The member must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Replaces the member {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * DuplicateItemException is thrown if the member identity of {@code editedItem}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * is the same as another item."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!safeToReplace(target, editedItem)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Removes the equivalent member from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "     * The member must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void remove(Object toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setItems(UniqueItemList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Replaces the contents of this list with {@code members}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code members} must not contain duplicate members."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void sort(Comparator\u003c? super T\u003e myComp) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        internalList.sort(myComp);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private boolean itemsAreUnique(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                if (items.get(i).isSameItem(items.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 46,
      "hiyingnn": 98,
      "limli": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private Path restaurantBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        setRestaurantBookFilePath(newUserPrefs.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return restaurantBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void setRestaurantBookFilePath(Path restaurantBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(restaurantBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.restaurantBookFilePath \u003d restaurantBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 restaurantBookFilePath.equals(o.restaurantBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return Objects.hash(guiSettings, restaurantBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + restaurantBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedRestaurantBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * {@code RestaurantBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class VersionedRestaurantBook extends RestaurantBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final List\u003cReadOnlyRestaurantBook\u003e restaurantBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public VersionedRestaurantBook(ReadOnlyRestaurantBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBookStateList.add(new RestaurantBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Saves a copy of the current {@code RestaurantBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBookStateList.add(new RestaurantBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBookStateList.subList(currentStatePointer + 1, restaurantBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Restores the restaurant book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        resetData(restaurantBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Restores the restaurant book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        resetData(restaurantBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if {@code undo()} has restaurant book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if {@code redo()} has restaurant book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return currentStatePointer \u003c restaurantBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!(other instanceof VersionedRestaurantBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook otherVersionedRestaurantBook \u003d (VersionedRestaurantBook) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return super.equals(otherVersionedRestaurantBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 restaurantBookStateList.equals(otherVersionedRestaurantBook.restaurantBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedRestaurantBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            super(\"Current state pointer at start of restaurantBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            super(\"Current state pointer at end of restaurantBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Booking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A class to represent restaurant bookings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class Booking implements Item, Comparable\u003cBooking\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingWindow bookingWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Member customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingSize numMembers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Booking(BookingWindow bookingWindow, Member customer, BookingSize numMembers) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.bookingWindow \u003d bookingWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.numMembers \u003d numMembers;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Updates the booking with a new member list,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * so that the customer details can change."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    public Booking editContacts(Member editedCustomer) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Booking(bookingWindow, editedCustomer, numMembers);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    public Member getCustomer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return bookingWindow.getStartTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return bookingWindow.getEndTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingWindow getBookingWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return bookingWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public String getStartTimeString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return bookingWindow.getStartTime().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingSize getNumMembers() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "        return numMembers;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean isSameItem(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (other instanceof Booking) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // take note, the .equals() instead of .isSameItem() from Customer class is being used here"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // as the isSameItem() method from Customer class is not transitive"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return bookingWindow.equals(((Booking) other).bookingWindow)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                    \u0026\u0026 customer.equals(((Booking) other).customer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public int compareTo(Booking other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return bookingWindow.compareTo(other.bookingWindow);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return \"Customer: \" + customer.getName().toString() + \" \" + customer.getPhone().toString() + \"  Start Time: \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + getStartTimeString() + \" Members: \" + numMembers.getSize();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof Booking // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 customer.equals(((Booking) other).customer)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 bookingWindow.equals(((Booking) other).bookingWindow)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 numMembers.equals(((Booking) other).numMembers));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 79,
      "limli": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingSize.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Represents the number of bookings made by a customer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class BookingSize {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final int MAX_BOOKING_SIZE \u003d 100;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Booking size should be an integer between 1 and \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + MAX_BOOKING_SIZE + \" inclusive.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingSize(int size) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        checkArgument(isValidSize(size), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        value \u003d size;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingSize(String size) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        checkArgument(isValidSize(size), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        value \u003d Integer.parseInt(size);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Checks if the size is within 1 and MAX_BOOKING_SIZE."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private boolean isValidSize(int size) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return size \u003e 0 \u0026\u0026 size \u003c\u003d MAX_BOOKING_SIZE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Check if the size is within 1 and MAX_BOOKING_SIZE."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private boolean isValidSize(String size) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return isValidSize(Integer.parseInt(size));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof BookingSize // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((BookingSize) other).value); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A booking window that represents the start and end times of a booking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class BookingWindow implements Comparable\u003cBookingWindow\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            \"Please follow the time format of yyyy-MM-ddTHH:mm or yyyy-MM-ddTHH:mm:SS, e.g. 2019-03-12T12:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final LocalDateTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final LocalDateTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Constructs a {@code BookingWindow}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @param startTimeString A valid date in the yyyy-MM-dd HH:mm format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingWindow(String startTimeString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            startTime \u003d LocalDateTime.parse(startTimeString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            endTime \u003d startTime.plusHours(1); // booking lasts for 1 hour"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingWindow(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.endTime \u003d startTime.plusHours(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return startTime.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof BookingWindow// instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 startTime.equals(((BookingWindow) other).startTime)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public int compareTo(BookingWindow other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return startTime.compareTo(other.startTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return startTime.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Capacity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Used to ensure that all bookings stays within the capacity of the restaurant."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * The restaurant will not be able to hold more bookings if the capacity is exceeded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class Capacity {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final int MAX_CAPACITY \u003d 10000;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final int DEFAULT_CAPACITY \u003d 200;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Capacity should be an integer between 1 and \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            + MAX_CAPACITY + \" inclusive.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Capacity(int intCapacity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        checkArgument(isValidCapacity(intCapacity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        value \u003d intCapacity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Capacity(String strCapacity) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        checkArgument(isValidCapacity(strCapacity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        value \u003d Integer.parseInt(strCapacity);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Represents the default capacity if no particular value has been chosen."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static Capacity getDefaultCapacity() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Capacity(DEFAULT_CAPACITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Checks if the capacity is valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static boolean isValidCapacity(int intCapacity) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return intCapacity \u003e 0 \u0026\u0026 intCapacity \u003c\u003d MAX_CAPACITY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Checks if strCapacity is valid after converting to an integer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static boolean isValidCapacity(String strCapacity) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        requireNonNull(strCapacity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return isValidCapacity(Integer.parseInt(strCapacity));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Checks if the capacity is sufficient to hold the bookings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canAccommodate(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        for (Booking booking: bookings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Event arrival \u003d new Event(booking.getNumMembers().getSize(), booking.getStartTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Event departure \u003d new Event(-booking.getNumMembers().getSize(), booking.getEndTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            events.add(arrival);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            events.add(departure);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        events.sort(Comparator.naturalOrder());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        int currentOccupancy \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        for (Event event: events) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            currentOccupancy +\u003d event.changeInPersons;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (currentOccupancy \u003e value) { // if this happens, the restaurant is full at this time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Represents the departure or arrival of customers at a specific time."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final int changeInPersons;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final LocalDateTime eventTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // For changeInPersons, positive values represent arrivals while negative values represent departures."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Event(int changeInPersons, LocalDateTime eventTime) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            this.changeInPersons \u003d changeInPersons;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public int compareTo(Event other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (eventTime.compareTo(other.eventTime) !\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                return eventTime.compareTo(other.eventTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                return changeInPersons - other.changeInPersons; // important: ensure that departures occur first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                || (other instanceof Capacity // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Capacity) other).value); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Ingredient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Represents an ingredient in the book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class Ingredient implements Item {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientName ingredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientUnit ingredientUnit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientWarningAmount ingredientWarningAmount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Ingredient(IngredientName name, IngredientQuantity quantity, IngredientUnit unit,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                      IngredientWarningAmount warningAmount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientName \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientQuantity \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientUnit \u003d unit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientWarningAmount \u003d warningAmount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientName getIngredientName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientQuantity getIngredientQuantity() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientQuantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientUnit getIngredientUnit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientUnit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientWarningAmount getIngredientWarningAmount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientWarningAmount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if both ingredients have same name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean isSameItem(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (other instanceof Ingredient) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return ingredientName.equals(((Ingredient) other).getIngredientName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientName.equals(((Ingredient) other).getIngredientName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 ingredientQuantity.equals(((Ingredient) other).getIngredientQuantity())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 ingredientUnit.equals(((Ingredient) other).getIngredientUnit())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 ingredientWarningAmount.equals(((Ingredient) other).getIngredientWarningAmount());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return Objects.hash(ingredientName, ingredientQuantity, ingredientUnit, ingredientWarningAmount);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        builder.append(\"Ingredient: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .append(getIngredientName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .append(getIngredientQuantity())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .append(\" Standard-Unit: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .append(getIngredientUnit())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .append(\"Warning amount: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .append(getIngredientWarningAmount());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A class to represent the ingredientName in an ingredient"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \"Ingredient\u0027s name should only contain alphabets and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String VALIDATION_REGEX_INGREDIENTNAME \u003d \"[a-zA-Z][a-zA-Z ]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final String ingredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Constructs a {@code IngredientName}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param name A valid ingredient name corresponding to VALIDATION_REGEX"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientName(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        checkArgument(isValidIngredientName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientName \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static boolean isValidIngredientName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return test.matches(VALIDATION_REGEX_INGREDIENTNAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || (other instanceof IngredientName// instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((IngredientName) other).getName())); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientNameAndWarningAmountPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Tests that a {@code Ingredient}\u0027s {@code IngredientName} matches any of the argument\u0027s keywords"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * and has IngredientQuantity less than IngredientWarningAmount"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * By default, list is not filtered by ingredientQuantity if INGREDIENT_WARNINGAMT prefix is not included"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientNameAndWarningAmountPredicate implements Predicate\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final boolean filterByWarningAmt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientNameAndWarningAmountPredicate(List\u003cString\u003e keywords, boolean filter) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.filterByWarningAmt \u003d filter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean test(Ingredient ingredient) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return (keywords.isEmpty() //short circuit if empty"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        .containsWordIgnoreCase(ingredient.getIngredientName().getName(), keyword)))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 !(filterByWarningAmt \u0026\u0026 ingredient.getIngredientWarningAmount().getWarningAmount()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u003c\u003d ingredient.getIngredientQuantity().getQuantity());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || (other instanceof IngredientNameAndWarningAmountPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 keywords.equals(((IngredientNameAndWarningAmountPredicate) other).keywords)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 filterByWarningAmt \u003d\u003d ((IngredientNameAndWarningAmountPredicate) other)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .filterByWarningAmt); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientQuantity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A class to represent the ingredientQuantity in an ingredient"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientQuantity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \"Ingredient\u0027s quantity should be non-negative integer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private int ingredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Constructs a {@code IngredientQuantity}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param quantity A valid quantity, an integer that is non-negative."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientQuantity(int quantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        checkArgument(isValidIngredientQuantity(Integer.toString(quantity)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientQuantity \u003d quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientQuantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if ingredientQuantity is valid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static boolean isValidIngredientQuantity(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return StringUtil.isUnsignedInteger(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || (other instanceof IngredientQuantity// instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 ingredientQuantity \u003d\u003d ((IngredientQuantity) other).getQuantity()); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return Integer.toString(ingredientQuantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientUnit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A class to represent the ingredientUnit in an ingredient"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientUnit {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \"Ingredient\u0027s unit should only contain alphabets and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String VALIDATION_REGEX_INGREDIENTUNIT \u003d \"[a-zA-Z][a-zA-Z ]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final String ingredientUnit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Constructs a {@code IngredientUnit}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param unit A valid ingredient unit corresponding to VALIDATION_REGEX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientUnit(String unit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        checkArgument(isValidIngredientUnit(unit), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientUnit \u003d unit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String getUnit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientUnit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if ingredientUnit is valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static boolean isValidIngredientUnit(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return test.matches(VALIDATION_REGEX_INGREDIENTUNIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                || (other instanceof IngredientUnit// instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 ingredientUnit.equals(((IngredientUnit) other).getUnit())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientUnit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientWarningAmount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A class to represent the ingredientWarningAmount in an ingredient"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientWarningAmount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \"Ingredient\u0027s warning amount should be non-negative integer.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private int ingredientWarningAmount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Constructs a {@code IngredientWarningAmount}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param warningAmount A valid warningAmount, an integer that is non-negative."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientWarningAmount(int warningAmount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        checkArgument(isValidIngredientWarningAmount(Integer.toString(warningAmount)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientWarningAmount \u003d warningAmount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public int getWarningAmount() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ingredientWarningAmount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns true if ingredientWarningAmount is valid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static boolean isValidIngredientWarningAmount(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return StringUtil.isUnsignedInteger(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        boolean isitEquals \u003d other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            || (other instanceof IngredientWarningAmount// instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \u0026\u0026 ingredientWarningAmount \u003d\u003d ((IngredientWarningAmount) other).getWarningAmount()); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return isitEquals;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return Integer.toString(ingredientWarningAmount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Represents a Staff\u0027s appointment in the restaurant book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAppointmentName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            \"Appointment names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * The first character of the appointment name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public final String appointmentName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Constructs a {@code Appointment}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @param appointmentName A valid appointment name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Appointment(String appointmentName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireNonNull(appointmentName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        checkArgument(isValidAppointmentName(appointmentName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.appointmentName \u003d appointmentName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static boolean isValidAppointmentName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return appointmentName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                || (other instanceof Appointment // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 appointmentName.equals(((Appointment) other).appointmentName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return appointmentName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": " * Represents a Member\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/LoyaltyPoints.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": " * Represents a Member\u0027s points in the restaurant book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "public class LoyaltyPoints {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "            \"Loyalty points should be a non-negative integer\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "     * The first character of the appointment name must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]*$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Constructs a {@code Appointment}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @param points The amount of loyalty points."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    public LoyaltyPoints(int points) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.value \u003d points;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if a given int is a valid loyalty points."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static boolean isValidLoyaltyPoints(int points) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        return 0 \u003c\u003d points; //TODO might want to set upper bound"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if a given string is a valid loyalty points."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static boolean isValidLoyaltyPoints(String points) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        int integerPoints;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "            integerPoints \u003d Integer.parseInt(points);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        return integerPoints \u003e\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "                || (other instanceof LoyaltyPoints // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((LoyaltyPoints) other).value); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        return Integer.valueOf(value).hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Member.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Represents a Member in the restaurant book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class Member extends Person {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "    private LoyaltyPoints loyaltyPoints;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    public Member(Name name, Phone phone, Email email, LoyaltyPoints loyaltyPoints) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        super(name, phone, email);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.loyaltyPoints \u003d loyaltyPoints;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    public LoyaltyPoints getLoyaltyPoints() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "        return loyaltyPoints;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setLoyaltyPoints(LoyaltyPoints loyaltyPoints) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.loyaltyPoints \u003d loyaltyPoints;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if both members of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "     * This defines a weaker notion of equality between two members."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean isSameMember(Member otherMember) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (otherMember \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        return otherMember !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 otherMember.getName().equals(getName())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 (otherMember.getPhone().equals(getPhone()) || otherMember.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean isSameItem(Object otherItem) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        return otherItem instanceof Member \u0026\u0026 isSameMember((Member) otherItem);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if both members have the same identity and data fields."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "     * This defines a stronger notion of equality between two members."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!(other instanceof Member)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member otherMember \u003d (Member) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        return otherMember.getName().equals(getName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 otherMember.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 otherMember.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return Objects.hash(name, phone, email);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "                .append(\" Loyalty Points: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "                .append(getLoyaltyPoints());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "lingyanhao": 5,
      "-": 48,
      "limli": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": " * Represents a Member\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "-": 58,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameAndLoyaltyPointsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": " * Tests that a {@code Member}\u0027s {@code Name} matches any of the keywords given"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * and has at least the amount of loyalty points specified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class NameAndLoyaltyPointsPredicate implements Predicate\u003cMember\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final int minLoyaltyPoints;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    public NameAndLoyaltyPointsPredicate(List\u003cString\u003e keywords, int minLoyaltyPoints) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.minLoyaltyPoints \u003d minLoyaltyPoints;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean test(Member member) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "        return (keywords.isEmpty() //short circuit if empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(member.getName().fullName, keyword)))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 member.getLoyaltyPoints().value \u003e\u003d minLoyaltyPoints;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "                || (other instanceof NameAndLoyaltyPointsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameAndLoyaltyPointsPredicate) other).keywords)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 minLoyaltyPoints \u003d\u003d ((NameAndLoyaltyPointsPredicate) other).minLoyaltyPoints); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": " * Tests that a {@code Member}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cMember\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean test(Member member) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(member.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "limli": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Represents a Person in the restaurant book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public abstract class Person implements Item {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    protected final Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    protected final Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Person(Name name, Phone phone, Email email) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        requireAllNonNull(name, phone, email);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return Objects.hash(name, phone, email);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 10,
      "lingyanhao": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": " * Represents a Member\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "limli": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Staff.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Represents a Staff in the restaurant book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class Staff extends Person {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Appointment appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Staff(Name name, Phone phone, Email email, Appointment appointment) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        super(name, phone, email);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Appointment getAppointment() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if both staff of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * This defines a weaker notion of equality between two staff."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean isSameStaff(Staff otherStaff) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (otherStaff \u003d\u003d this) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return otherStaff !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 otherStaff.getName().equals(getName())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 (otherStaff.getPhone().equals(getPhone()) || otherStaff.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean isSameItem(Object otherItem) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return otherItem instanceof Staff \u0026\u0026 isSameStaff((Staff) otherItem);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if both staff have the same identity and data fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * This defines a stronger notion of equality between two staff."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!(other instanceof Staff)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff otherStaff \u003d (Staff) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return otherStaff.getName().equals(getName())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 otherStaff.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 otherStaff.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 otherStaff.getAppointment().equals(getAppointment());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return Objects.hash(name, phone, email, appointment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .append(\" Appointment: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .append(getAppointment());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 82,
      "lingyanhao": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateItemException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": " * Signals that the operation will result in duplicate Members (Members are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(\"Operation would result in duplicate members\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "-": 7,
      "limli": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/ItemNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "lingyanhao": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/RestaurantOverbookedException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Signals that the operation will result in an overbooked restaurant."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class RestaurantOverbookedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public RestaurantOverbookedException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        super(\"Operation would result overbooked restaurant\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Contains utility methods for populating {@code RestaurantBook} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static Member[] getSampleMembers() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new Member[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "            new Member(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "                    new LoyaltyPoints(1)),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "            new Member(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "                    new LoyaltyPoints(1)),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "            new Member(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "                    new LoyaltyPoints(1)),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            new Member(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "                    new LoyaltyPoints(1)),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "            new Member(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "                    new LoyaltyPoints(1)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "            new Member(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "                    new LoyaltyPoints(1))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static ReadOnlyRestaurantBook getSampleRestaurantBook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook sampleAb \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (Member sampleMember : getSampleMembers()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            sampleAb.addMember(sampleMember);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 1,
      "hiyingnn": 5,
      "-": 17,
      "limli": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBooking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Jackson-friendly version of {@link Booking}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class JsonAdaptedBooking {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final String customerName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final String customerPhone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final String customerEmail;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final int customerLoyaltyPoints;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final int numPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Constructs a {@code JsonAdaptedBooking} with the given booking details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public JsonAdaptedBooking (@JsonProperty(\"customerName\") String customerName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                               @JsonProperty(\"customerPhone\") String customerPhone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                               @JsonProperty(\"customerEmail\") String customerEmail,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "                               @JsonProperty(\"customerLoyaltyPoints\") int customerLoyaltyPoints,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                               @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                               @JsonProperty(\"numPersons\") int numPersons) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.customerPhone \u003d customerPhone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.customerEmail \u003d customerEmail;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.customerLoyaltyPoints \u003d customerLoyaltyPoints;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.numPersons \u003d numPersons;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public JsonAdaptedBooking(Booking source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        customerName \u003d source.getCustomer().getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        customerPhone \u003d source.getCustomer().getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        customerEmail \u003d source.getCustomer().getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "        customerLoyaltyPoints \u003d source.getCustomer().getLoyaltyPoints().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        startTime \u003d source.getStartTimeString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.numPersons \u003d source.getNumMembers().getSize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Booking} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted booking."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Booking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final Name modelName \u003d parseName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final Phone modelPhone \u003d parsePhone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final Email modelEmail \u003d parseEmail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "        final LoyaltyPoints loyaltyPoints \u003d parseLoyaltyPoints();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final Member modelCustomer \u003d new Member(modelName, modelPhone, modelEmail, loyaltyPoints);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final BookingWindow modelBookingWindow;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final BookingSize modelBookingSize;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            modelBookingWindow \u003d ParserUtil.parseBookingWindow(startTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            modelBookingSize \u003d ParserUtil.parseBookingSize(Integer.toString(numPersons));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Booking(modelBookingWindow, modelCustomer, modelBookingSize);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the name and converts into a Name object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Name parseName() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (customerName \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!Name.isValidName(customerName)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Name(customerName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the phone and converts into a Phone object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Phone parsePhone() throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (customerPhone \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!Phone.isValidPhone(customerPhone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Phone(customerPhone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the email and converts into a Email object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Email parseEmail() throws IllegalValueException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (customerEmail \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        if (!Email.isValidEmail(customerEmail)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Email(customerEmail);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Parses the loyalty points and converts into a LoyaltyPoints object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "    private LoyaltyPoints parseLoyaltyPoints() throws IllegalValueException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!LoyaltyPoints.isValidLoyaltyPoints(customerLoyaltyPoints)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new IllegalValueException(LoyaltyPoints.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new LoyaltyPoints(customerLoyaltyPoints);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 124,
      "limli": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientWarningAmount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final String ingredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final int ingredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final String ingredientUnit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final int ingredientWarningAmount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given ingredient details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param unit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public JsonAdaptedIngredient (@JsonProperty(\"ingredientName\") String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                                  @JsonProperty(\"ingredientQuantity\") int quantity,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                                  @JsonProperty(\"ingredientUnit\") String unit,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                                  @JsonProperty(\"ingredientWarningAmount\") int warningAmount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientQuantity \u003d quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientUnit \u003d unit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredientWarningAmount \u003d warningAmount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientName \u003d source.getIngredientName().getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientQuantity \u003d source.getIngredientQuantity().getQuantity();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientUnit \u003d source.getIngredientUnit().getUnit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientWarningAmount \u003d source.getIngredientWarningAmount().getWarningAmount();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (ingredientName \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    Ingredient.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (ingredientUnit \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    Ingredient.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!IngredientName.isValidIngredientName(ingredientName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new IllegalValueException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!IngredientUnit.isValidIngredientUnit(ingredientUnit)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new IllegalValueException(IngredientUnit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!IngredientQuantity.isValidIngredientQuantity(Integer.toString(ingredientQuantity))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new IllegalValueException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new Ingredient(new IngredientName(ingredientName), new IngredientQuantity(ingredientQuantity),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientUnit(ingredientUnit) , new IngredientWarningAmount(ingredientWarningAmount));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMember.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": " * Jackson-friendly version of {@link Member}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "class JsonAdaptedMember {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Member\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final int loyaltyPoints;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Constructs a {@code JsonAdaptedMember} with the given member details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    public JsonAdaptedMember(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"loyaltyPoints\") int loyaltyPoints) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.loyaltyPoints \u003d loyaltyPoints;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Converts a given {@code Member} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    public JsonAdaptedMember(Member source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        loyaltyPoints \u003d source.getLoyaltyPoints().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Converts this Jackson-friendly adapted member object into the model\u0027s {@code Member} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted member."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "    public Member toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!LoyaltyPoints.isValidLoyaltyPoints(loyaltyPoints)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new IllegalValueException(LoyaltyPoints.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "        final LoyaltyPoints modelLoyaltyPoints \u003d new LoyaltyPoints(loyaltyPoints);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new Member(modelName, modelPhone, modelEmail, modelLoyaltyPoints);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "limli": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStaff.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Jackson-friendly version of {@link Staff}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "class JsonAdaptedStaff {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Staff\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final String appointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Constructs a {@code JsonAdaptedStaff} with the given staff details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public JsonAdaptedStaff(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"appointment\") String appointment) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Converts a given {@code Staff} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public JsonAdaptedStaff(Staff source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        appointment \u003d source.getAppointment().appointmentName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Converts this Jackson-friendly adapted staff object into the model\u0027s {@code Staff} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted staff."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Staff toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    Appointment.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!Appointment.isValidAppointmentName(appointment)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        final Appointment modelAppointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return new Staff(modelName, modelPhone, modelEmail, modelAppointment);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRestaurantBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A class to access RestaurantBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class JsonRestaurantBookStorage implements RestaurantBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRestaurantBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public JsonRestaurantBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return readRestaurantBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Similar to {@link RestaurantBookStorage#readRestaurantBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Optional\u003cJsonSerializableRestaurantBook\u003e jsonRestaurantBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                filePath, JsonSerializableRestaurantBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        if (!jsonRestaurantBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return Optional.of(jsonRestaurantBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        saveRestaurantBook(restaurantBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Similar to {@link RestaurantBookStorage#saveRestaurantBook(ReadOnlyRestaurantBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(restaurantBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRestaurantBook(restaurantBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRestaurantBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * An Immutable RestaurantBook that is serializable to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "class JsonSerializableRestaurantBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"Members list contains duplicate member(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"Bookings list contains duplicate booking(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Ingredient list contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STAFF \u003d \"Staff list contains duplicate staff(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final List\u003cJsonAdaptedMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final List\u003cJsonAdaptedStaff\u003e staff \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final List\u003cJsonAdaptedBooking\u003e bookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private final int intCapacity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Constructs a {@code JsonSerializableRestaurantBook} with the given members."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "    public JsonSerializableRestaurantBook(@JsonProperty(\"members\") List\u003cJsonAdaptedMember\u003e members,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                                          @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                                          @JsonProperty(\"staff\") List\u003cJsonAdaptedStaff\u003e staff,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                                          @JsonProperty(\"bookings\") List\u003cJsonAdaptedBooking\u003e bookings,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                                          @JsonProperty(\"capacity\") int intCapacity) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.members.addAll(members);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.staff.addAll(staff);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.bookings.addAll(bookings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.intCapacity \u003d intCapacity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Converts a given {@code ReadOnlyRestaurantBook} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRestaurantBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public JsonSerializableRestaurantBook(ReadOnlyRestaurantBook source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        members.addAll(source.getMemberList().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "                .map(JsonAdaptedMember::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ingredients.addAll(source.getIngredientList().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .map(JsonAdaptedIngredient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        staff.addAll(source.getStaffList().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .map(JsonAdaptedStaff::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookings.addAll(source.getBookingList().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                .map(JsonAdaptedBooking::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        intCapacity \u003d source.getCapacity().getValue();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Converts this address book into the model\u0027s {@code RestaurantBook} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public RestaurantBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (JsonAdaptedMember jsonAdaptedMember : members) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "            Member member \u003d jsonAdaptedMember.toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (restaurantBook.hasMember(member)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            restaurantBook.addMember(member);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (restaurantBook.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            restaurantBook.addIngredient(ingredient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        for (JsonAdaptedStaff jsonAdaptedStaff : staff) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Staff staff \u003d jsonAdaptedStaff.toModelType();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (restaurantBook.hasStaff(staff)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STAFF);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            restaurantBook.addStaff(staff);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        for (JsonAdaptedBooking jsonAdaptedBooking : bookings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Booking booking \u003d jsonAdaptedBooking.toModelType();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            if (restaurantBook.hasBooking(booking)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOKING);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            restaurantBook.addBooking(booking);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Capacity capacity \u003d new Capacity(intCapacity);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            restaurantBook.setCapacity(capacity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new IllegalArgumentException(Capacity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return restaurantBook;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 10,
      "lingyanhao": 40,
      "hiyingnn": 25,
      "-": 37,
      "limli": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RestaurantBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Represents a storage for {@link RestaurantBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public interface RestaurantBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns RestaurantBook data as a {@link ReadOnlyRestaurantBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see #getRestaurantBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Saves the given {@link ReadOnlyRestaurantBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @param restaurantBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see #saveRestaurantBook(ReadOnlyRestaurantBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public interface Storage extends RestaurantBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Path getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Manages storage of RestaurantBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private RestaurantBookStorage restaurantBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public StorageManager(RestaurantBookStorage restaurantBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.restaurantBookStorage \u003d restaurantBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return restaurantBookStorage.getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return readRestaurantBook(restaurantBookStorage.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantBook\u003e readRestaurantBook(Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return restaurantBookStorage.readRestaurantBook(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        saveRestaurantBook(restaurantBook, restaurantBookStorage.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBookStorage.saveRestaurantBook(restaurantBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 17,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookingCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * An UI component that displays information of a {@code Member}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class BookingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String FXML \u003d \"BookingListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    public final Booking booking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label numMembers;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    public BookingCard(Booking booking, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.booking \u003d booking;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        name.setText(booking.getCustomer().getName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        numMembers.setText(\"(\" + booking.getNumMembers().getSize() + \" person(s))\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        phone.setText(booking.getCustomer().getPhone().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        date.setText(booking.getStartTimeString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!(other instanceof BookingCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        BookingCard card \u003d (BookingCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 booking.equals(card.booking);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 3,
      "limli": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookingListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": " * Panel containing the list of members."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "public class BookingListPanel extends ItemListPanel\u003cBooking\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    public BookingListPanel(ObservableList\u003cBooking\u003e memberList, ObservableValue\u003cBooking\u003e selectedMember,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "                            Consumer\u003cBooking\u003e onSelectedMemberChange) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(memberList, selectedMember, onSelectedMemberChange, listview -\u003e new BookingListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "        title.setText(\"Booking\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": " * Custom {@code ListCell} that displays the graphics of a {@code Member} using a {@code MemberCard}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "class BookingListViewCell extends ListCell\u003cBooking\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    protected void updateItem(Booking booking, boolean empty) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        super.updateItem(booking, empty);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (empty || booking \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "            setText(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "            setGraphic(new BookingCard(booking, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * An UI component that displays information of a {@code Ingredient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String FXML \u003d \"IngredientListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RestaurantBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label unit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private Label warningamt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    public IngredientCard(Ingredient ingredient, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        name.setText(ingredient.getIngredientName().getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        quantity.setText(Integer.toString(ingredient.getIngredientQuantity().getQuantity()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        unit.setText(ingredient.getIngredientUnit().getUnit());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        warningamt.setText(Integer.toString(ingredient.getIngredientWarningAmount().getWarningAmount()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!(other instanceof IngredientCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 ingredient.equals(card.ingredient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 8,
      "limli": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": " * Panel containing the list of Ingredients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "public class IngredientListPanel extends ItemListPanel\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    public IngredientListPanel(ObservableList\u003cIngredient\u003e ingredientList,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "                               ObservableValue\u003cIngredient\u003e selectedIngredient,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "                               Consumer\u003cIngredient\u003e onSelectedIngredientChange) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(ingredientList, selectedIngredient, onSelectedIngredientChange, listview -\u003e new IngredientListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "        title.setText(\"Ingredient\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": " * Custom {@code ListCell} that displays the graphics of a {@code Ingredient} using a {@code IngredientCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "class IngredientListViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    protected void updateItem(Ingredient ingredient, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        super.updateItem(ingredient, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (empty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "            setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "            setGraphic(new IngredientCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "public abstract class ItemListPanel\u003cT extends Item\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItemListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    private ListView\u003cT\u003e itemListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ItemListPanel(ObservableList\u003cT\u003e itemList, ObservableValue\u003cT\u003e selectedItem,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "                         Consumer\u003cT\u003e onSelectedItemChange, Callback\u003cListView\u003cT\u003e, ListCell\u003cT\u003e\u003e callback) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        itemListView.setCellFactory(callback);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        itemListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "            logger.fine(\"Selection in item list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "            onSelectedItemChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        selectedItem.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "            logger.fine(\"Selected item changed to: \" + newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected item,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "            if (Objects.equals(itemListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "                itemListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "                int index \u003d itemListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "                itemListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "                itemListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    private MemberListPanel memberListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    private BookingListPanel bookingListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "    private IngredientListPanel ingredientListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private StaffListPanel staffListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "    private StackPane memberListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "    private StackPane bookingListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "    private StackPane ingredientListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private StackPane staffListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "        memberListPanel \u003d new MemberListPanel(logic.getFilteredMemberList(), logic.selectedMemberProperty(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "                logic::setSelectedMember);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limli"
        },
        "content": "        memberListPanelPlaceholder.getChildren().add(memberListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": "        bookingListPanel \u003d new BookingListPanel(logic.getFilteredBookingList(), logic.selectedBookingProperty(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limli"
        },
        "content": "                logic::setSelectedBooking);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "        bookingListPanelPlaceholder.getChildren().add(bookingListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limli"
        },
        "content": "        ingredientListPanel \u003d new IngredientListPanel(logic.getFilteredIngredientList(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limli"
        },
        "content": "                logic.selectedIngredientProperty(), logic::setSelectedIngredient);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "        ingredientListPanelPlaceholder.getChildren().add(ingredientListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        staffListPanel \u003d new StaffListPanel(logic.getFilteredStaffList(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                logic.selectedStaffProperty(), logic::setSelectedStaff);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        staffListPanelPlaceholder.getChildren().add(staffListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new StatusBarFooter(logic.getRestaurantBookFilePath(), logic.getRestaurantBook());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberListPanel getMemberListPanel() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limli"
        },
        "content": "        return memberListPanel;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 6,
      "hiyingnn": 2,
      "-": 189,
      "limli": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MemberCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * An UI component that displays information of a {@code Member}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String FXML \u003d \"MemberListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RestaurantBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    public final Member member;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label points;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberCard(Member member, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.member \u003d member;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        name.setText(member.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        phone.setText(member.getPhone().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        email.setText(member.getEmail().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        points.setText(Integer.toString(member.getLoyaltyPoints().value));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!(other instanceof MemberCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberCard card \u003d (MemberCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 member.equals(card.member);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 1,
      "-": 52,
      "limli": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MemberListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": " * Panel containing the list of members."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberListPanel extends ItemListPanel\u003cMember\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberListPanel(ObservableList\u003cMember\u003e memberList, ObservableValue\u003cMember\u003e selectedMember,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "                           Consumer\u003cMember\u003e onSelectedMemberChange) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(memberList, selectedMember, onSelectedMemberChange, listview -\u003e new MemberListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "        title.setText(\"Member\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": " * Custom {@code ListCell} that displays the graphics of a {@code Member} using a {@code MemberCard}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "class MemberListViewCell extends ListCell\u003cMember\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    protected void updateItem(Member member, boolean empty) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        super.updateItem(member, empty);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (empty || member \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "            setText(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "            setGraphic(new MemberCard(member, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StaffCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * An UI component that displays information of a {@code Staff}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String FXML \u003d \"StaffListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RestaurantBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public final Staff staff;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Label appointment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffCard(Staff staff, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.staff \u003d staff;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        name.setText(staff.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        phone.setText(staff.getPhone().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        email.setText(staff.getEmail().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        appointment.setText(staff.getAppointment().appointmentName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!(other instanceof StaffCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffCard card \u003d (StaffCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 staff.equals(card.staff);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StaffListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Panel containing the list of staff."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffListPanel extends ItemListPanel\u003cStaff\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffListPanel(ObservableList\u003cStaff\u003e memberList, ObservableValue\u003cStaff\u003e selectedMember,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                           Consumer\u003cStaff\u003e onSelectedMemberChange) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super(memberList, selectedMember, onSelectedMemberChange, listview -\u003e new StaffListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "        title.setText(\"Staff\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Custom {@code ListCell} that displays the graphics of a {@code Staff} using a {@code StaffCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "class StaffListViewCell extends ListCell\u003cStaff\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    protected void updateItem(Staff staff, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super.updateItem(staff, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (empty || staff \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            setGraphic(new StaffCard(staff, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 36,
      "limli": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": " * Controller for the stats page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "public class StatsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String FXML \u003d \"StatsWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    private StackPane mystackpane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    public StatsWindow(Stage root, List\u003cXYChart.Data\u003cString, Integer\u003e\u003e graphData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        final String austria \u003d \"Austria\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        final String brazil \u003d \"Brazil\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        final String france \u003d \"France\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        final String italy \u003d \"Italy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        final String usa \u003d \"USA\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        final BarChart\u003cString, Number\u003e bc \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        bc.setTitle(\"Bookings Summary\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        xAxis.setLabel(\"Date\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        yAxis.setLabel(\"Number of Customers from Bookings\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        XYChart.Series series1 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (XYChart.Data\u003cString, Integer\u003e data : graphData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "            series1.getData().add(data);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        series1.setName(\"apple\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        bc.setLegendVisible(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        bc.getData().addAll(series1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "        mystackpane.getChildren().add(bc);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "    public StatsWindow(List\u003cXYChart.Data\u003cString, Integer\u003e\u003e graphData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        this(new Stage(), graphData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Shows the stats window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyRestaurantBook restaurantBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/BookingListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cLabel fx:id\u003d\"numMembers\" text\u003d\"\\$numMembers\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limli": 34
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limli"
        },
        "content": "#filterField, #memberListPanel, #memberWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limli"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limli"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limli"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limli"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limli"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limli"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limli"
        },
        "content": "    -fx-tick-label-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "limli"
        },
        "content": ".chart {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limli"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limli"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "-": 351,
      "limli": 18
    }
  },
  {
    "path": "src/main/resources/view/IngredientListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cLabel fx:id\u003d\"unit\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$unit\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cLabel text\u003d\"Warning Amount: \" styleClass\u003d\"cell_small_label\"/\u003e\u003cLabel fx:id\u003d\"warningamt\" text\u003d\"\\$warningamt\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limli": 38
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "  \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "  \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "limli": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "         title\u003d\"Booking App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003cVBox fx:id\u003d\"memberList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cStackPane fx:id\u003d\"memberListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003cVBox fx:id\u003d\"bookingList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bookingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003cVBox fx:id\u003d\"ingredientList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cStackPane fx:id\u003d\"ingredientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "          \u003cVBox fx:id\u003d\"staffList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            \u003cStackPane fx:id\u003d\"staffListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 7,
      "-": 63,
      "limli": 20
    }
  },
  {
    "path": "src/main/resources/view/MemberListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "      \u003cLabel fx:id\u003d\"points\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$points\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "limli": 1
    }
  },
  {
    "path": "src/main/resources/view/StaffListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 34
    }
  },
  {
    "path": "src/main/resources/view/StatsWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "         title\u003d\"Statistics\" minWidth\u003d\"400\" minHeight\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"mystackpane\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "                    prefWidth\u003d\"800\" prefHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "                    \u003cLabel text\u003d\"asdas\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limli": 35
    }
  },
  {
    "path": "src/test/data/JsonRestaurantBookStorageTest/invalidAndValidMemberAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": "  \"members\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "    \"name\": \"Valid Member\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "    \"name\": \"Member With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "limli": 3
    }
  },
  {
    "path": "src/test/data/JsonRestaurantBookStorageTest/invalidMemberAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": "  \"members\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "    \"name\": \"Member with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "limli": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableRestaurantBookTest/duplicateMemberAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": "  \"members\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\": \"alice@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\": \"pauline@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "  \"ingredients\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"staff\" : [ ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"bookings\" : [ ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"intCapacity\" : 200"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "lingyanhao": 3,
      "hiyingnn": 1,
      "-": 7,
      "limli": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableRestaurantBookTest/invalidMemberAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": "  \"members\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\": \"invalid@email!3e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "  \"ingredients\" : [ ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"staff\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"bookings\" : [ ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"intCapacity\" : 200"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 2,
      "lingyanhao": 3,
      "hiyingnn": 2,
      "-": 4,
      "limli": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableRestaurantBookTest/typicalBookingsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"members\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"loyaltyPoints\" : 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"loyaltyPoints\" : 0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"loyaltyPoints\" : 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"loyaltyPoints\" : 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"loyaltyPoints\" : 0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"loyaltyPoints\" : 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"loyaltyPoints\" : 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"ingredients\" : [ ],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"staff\" : [ ],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"bookings\" : [ {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerName\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerPhone\" : \"87652533\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerEmail\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerLoyaltyPoints\" : 0,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"startTime\" : \"2019-02-22T15:30\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"numPersons\" : 5"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerName\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerPhone\" : \"94351253\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerEmail\" : \"alice@example.com\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerLoyaltyPoints\" : 0,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"startTime\" : \"2019-02-23T14:30\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"numPersons\" : 5"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerName\" : \"Benson Meier\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerPhone\" : \"98765432\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerEmail\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerLoyaltyPoints\" : 0,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"startTime\" : \"2019-02-23T15:30\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"numPersons\" : 7"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerName\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerPhone\" : \"95352563\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerEmail\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"customerLoyaltyPoints\" : 0,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"startTime\" : \"2019-02-24T15:30\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    \"numPersons\" : 10"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"intCapacity\" : 200"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 70
    }
  },
  {
    "path": "src/test/data/JsonSerializableRestaurantBookTest/typicalMembersAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Member values as in TypicalMembers#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "  \"members\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\" : \"alice@example.com\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\" : \"johnd@example.com\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\" : \"heinz@example.com\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\" : \"cornelia@example.com\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\" : \"werner@example.com\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\" : \"lydia@example.com\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    \"email\" : \"anna@example.com\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "  \"ingredients\" : [ ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"staff\" : [ ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"bookings\" : [ ],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "  \"intCapacity\" : 200"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 8,
      "lingyanhao": 3,
      "hiyingnn": 1,
      "-": 22,
      "limli": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BookingCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Provides a handle to a booking card in the booking list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class BookingCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String NUM_MEMBERS_FIELD_ID \u003d \"#numMembers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label numMembersLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public BookingCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        numMembersLabel \u003d getChildNode(NUM_MEMBERS_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getNumMembers() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return numMembersLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if this handle contains {@code booking}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Booking booking) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getName().equals(booking.getCustomer().getName().fullName)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 getNumMembers().equals(booking.getNumMembers())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 getPhone().equals(booking.getCustomer().getPhone())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 getDate().equals(booking.getStartTimeString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/IngredientCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Provides a handle to a ingredient card in the ingredient list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class IngredientCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String UNIT_FIELD_ID \u003d \"#unit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String QUANTITY_FIELD_ID \u003d \"#quantity\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String WARNINGAMT_FIELD_ID \u003d \"#warningamt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label unitLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label quantityLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final Label warningamtLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public IngredientCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        unitLabel \u003d getChildNode(UNIT_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        quantityLabel \u003d getChildNode(QUANTITY_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        warningamtLabel \u003d getChildNode(WARNINGAMT_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getUnit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return unitLabel.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getQuantity() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return quantityLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public String getWarningAmt() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return warningamtLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if this handle contains {@code ingredient}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Ingredient ingredient) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return getName().equals(ingredient.getIngredientName().getName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 getUnit().equals(ingredient.getIngredientUnit().getUnit())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 getQuantity().equals(Integer.toString(ingredient.getIngredientQuantity().getQuantity()))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                \u0026\u0026 getWarningAmt().equals(Integer.toString(ingredient.getIngredientWarningAmount().getWarningAmount()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 51,
      "hiyingnn": 15
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/IngredientListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Provides a handle for {@code StaffListPanel} containing the list of {@code StaffCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class IngredientListPanelHandle extends NodeHandle\u003cListView\u003cIngredient\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String INGREDIENT_LIST_VIEW_ID \u003d \"#itemListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Optional\u003cIngredient\u003e lastRememberedSelectedIngredientCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public IngredientListPanelHandle(ListView\u003cIngredient\u003e ingredientListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super(ingredientListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns a handle to the selected {@code IngredientCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public IngredientCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cIngredient\u003e selectedIngredientList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedIngredientList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new AssertionError(\"Ingredient list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .map(IngredientCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedIngredientList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cIngredient\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Navigates the listview to display {@code ingredient}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void navigateToCard(Ingredient ingredient) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!getRootNode().getItems().contains(ingredient)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalArgumentException(\"Ingredient does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            getRootNode().scrollTo(ingredient);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Selects the {@code IngredientCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the ingredient card handle of an ingredient associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public IngredientCardHandle getIngredientCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .map(IngredientCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .filter(handle -\u003e handle.equals(getIngredient(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Ingredient getIngredient(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Remembers the selected {@code Ingredient} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void rememberSelectedIngredientCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cIngredient\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            lastRememberedSelectedIngredientCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            lastRememberedSelectedIngredientCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if the selected {@code IngredientCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code rememberSelectedIngredientCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean isSelectedIngredientCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cIngredient\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return lastRememberedSelectedIngredientCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return !lastRememberedSelectedIngredientCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    || !lastRememberedSelectedIngredientCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final MemberListPanelHandle memberListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "        memberListPanel \u003d new MemberListPanelHandle(getChildNode(MemberListPanelHandle.MEMBER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberListPanelHandle getMemberListPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "        return memberListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "limli": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MemberCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": " * Provides a handle to a member card in the member list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if this handle contains {@code member}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean equals(Member member) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "        return getName().equals(member.getName().fullName)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 getPhone().equals(member.getPhone().value)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "                \u0026\u0026 getEmail().equals(member.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "limli": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MemberListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": " * Provides a handle for {@code MemberListPanel} containing the list of {@code MemberCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberListPanelHandle extends NodeHandle\u003cListView\u003cMember\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String MEMBER_LIST_VIEW_ID \u003d \"#itemListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Optional\u003cMember\u003e lastRememberedSelectedMemberCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberListPanelHandle(ListView\u003cMember\u003e memberListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(memberListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns a handle to the selected {@code MemberCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e selectedMemberList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (selectedMemberList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new AssertionError(\"Member list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "                .map(MemberCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedMemberList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Navigates the listview to display {@code member}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void navigateToCard(Member member) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "        if (!getRootNode().getItems().contains(member)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "            throw new IllegalArgumentException(\"Member does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "            getRootNode().scrollTo(member);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Selects the {@code MemberCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns the member card handle of a member associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberCardHandle getMemberCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limli"
        },
        "content": "                .map(MemberCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limli"
        },
        "content": "                .filter(handle -\u003e handle.equals(getMember(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Member getMember(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Remembers the selected {@code MemberCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void rememberSelectedMemberCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "            lastRememberedSelectedMemberCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limli"
        },
        "content": "            lastRememberedSelectedMemberCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if the selected {@code MemberCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code rememberSelectedMemberCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limli"
        },
        "content": "    public boolean isSelectedMemberCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limli"
        },
        "content": "            return lastRememberedSelectedMemberCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limli"
        },
        "content": "            return !lastRememberedSelectedMemberCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limli"
        },
        "content": "                    || !lastRememberedSelectedMemberCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "limli": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StaffCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Provides a handle to a staff card in the staff list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String APPOINTMENT_FIELD_ID \u003d \"#appointment\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final Label appointmentLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        appointmentLabel \u003d getChildNode(APPOINTMENT_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public String getAppointment() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return appointmentLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if this handle contains {@code staff}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean equals(Staff staff) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getName().equals(staff.getName().fullName)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 getPhone().equals(staff.getPhone().value)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 getEmail().equals(staff.getEmail().value)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                \u0026\u0026 getAppointment().equals(staff.getAppointment().appointmentName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StaffListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Provides a handle for {@code StaffListPanel} containing the list of {@code StaffCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffListPanelHandle extends NodeHandle\u003cListView\u003cStaff\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String STAFF_LIST_VIEW_ID \u003d \"#itemListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Optional\u003cStaff\u003e lastRememberedSelectedStaffCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffListPanelHandle(ListView\u003cStaff\u003e staffListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        super(staffListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns a handle to the selected {@code StaffCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cStaff\u003e selectedStaffList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedStaffList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new AssertionError(\"Staff list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .map(StaffCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedStaffList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cStaff\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Navigates the listview to display {@code staff}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void navigateToCard(Staff staff) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (!getRootNode().getItems().contains(staff)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalArgumentException(\"Staff does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            getRootNode().scrollTo(staff);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Selects the {@code StaffCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the staff card handle of a staff associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffCardHandle getStaffCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .map(StaffCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .filter(handle -\u003e handle.equals(getStaff(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Staff getStaff(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Remembers the selected {@code StaffCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void rememberSelectedStaffCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cStaff\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            lastRememberedSelectedStaffCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            lastRememberedSelectedStaffCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns true if the selected {@code StaffCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code rememberSelectedStaffCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public boolean isSelectedStaffCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        List\u003cStaff\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return lastRememberedSelectedStaffCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return !lastRememberedSelectedStaffCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                    || !lastRememberedSelectedStaffCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatsWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": " * A handle to the {@code StatsWindow} of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "public class StatsWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final String STATS_WINDOW_TITLE \u003d \"Statistics\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "    public StatsWindowHandle(Stage statsWindowStage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "        super(statsWindowStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new GuiRobot().isWindowShown(STATS_WINDOW_TITLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    protected Supplier\u003cReadOnlyRestaurantBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyRestaurantBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            JsonRestaurantBookStorage jsonAddressBookStorage \u003d new JsonRestaurantBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                jsonAddressBookStorage.saveRestaurantBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userPrefs.setRestaurantBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public RestaurantBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new RestaurantBook(storage.readRestaurantBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            throw new AssertionError(\"Data is not in the RestaurantBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return storage.getRestaurantBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model copy \u003d new ModelManager((model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredMemberList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 1,
      "hiyingnn": 13,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "        final Index fifthMemberIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(fifthMemberIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(fifthMemberIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(fifthMemberIndex.equals(fifthMemberIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(fifthMemberIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(fifthMemberIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(fifthMemberIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "limli": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        JsonRestaurantBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new JsonRestaurantBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        String deleteCommand \u003d \"deletemember 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // Setup LogicManager with JsonRestaurantBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        JsonRestaurantBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new JsonRestaurantBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String addCommand \u003d AddMemberCommand.COMMAND_WORD + MEMBER_NAME_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member expectedMember \u003d new MemberBuilder(AMY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.addMember(expectedMember);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void getFilteredMemberList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "        logic.getFilteredMemberList().remove(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static class JsonRestaurantBookIoExceptionThrowingStub extends JsonRestaurantBookStorage {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        private JsonRestaurantBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        public void saveRestaurantBook(ReadOnlyRestaurantBook restaurantBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 3,
      "hiyingnn": 16,
      "-": 161,
      "limli": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddMemberCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_newMember_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member validMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.addMember(validMember);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(new AddMemberCommand(validMember), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                String.format(AddMemberCommand.MESSAGE_SUCCESS, validMember), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_duplicateMember_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberInList \u003d model.getRestaurantBook().getMemberList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(new AddMemberCommand(memberInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                AddMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 8,
      "hiyingnn": 2,
      "-": 34,
      "limli": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMemberCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddMemberCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void constructor_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        new AddMemberCommand(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_memberAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        ModelStubAcceptingMemberAdded modelStub \u003d new ModelStubAcceptingMemberAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member validMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CommandResult commandResult \u003d new AddMemberCommand(validMember).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(String.format(AddMemberCommand.MESSAGE_SUCCESS, validMember), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(Arrays.asList(validMember), modelStub.membersAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_duplicateMember_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member validMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddMemberCommand addMemberCommand \u003d new AddMemberCommand(validMember);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithMember(validMember);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expectMessage(AddMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        addMemberCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member alice \u003d new MemberBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member bob \u003d new MemberBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddMemberCommand addAliceCommand \u003d new AddMemberCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddMemberCommand addBobCommand \u003d new AddMemberCommand(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddMemberCommand addAliceCommandCopy \u003d new AddMemberCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different member -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "     * A Model stub that contains a single member."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": "    private class ModelStubWithMember extends ModelStub {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "        private final Member member;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "        ModelStubWithMember(Member member) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "            this.member \u003d member;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return this.member.isSameItem(member);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limli"
        },
        "content": "     * A Model stub that always accept the member being added."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limli"
        },
        "content": "    private class ModelStubAcceptingMemberAdded extends ModelStub {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limli"
        },
        "content": "        final ArrayList\u003cMember\u003e membersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return membersAdded.stream().anyMatch(member::isSameItem);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public void addMember(Member member) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(member);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            membersAdded.add(member);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        public void commitRestaurantBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // called by {@code AddMemberCommand#execute()}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new RestaurantBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 21,
      "hiyingnn": 5,
      "-": 85,
      "limli": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.setRestaurantBook(new RestaurantBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 4,
      "-": 32,
      "limli": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_UNIT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_WARNINGAMOUNT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.EditMemberDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    //General"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String VALID_INDEX_DESC \u003d \" \" + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INVALID_INDEX_DESC \u003d \" \" + PREFIX_INDEX + \"-1\"; //negative not allowed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    //Related to persons"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final int MEMBER_VALID_LOYALTY_POINTS_AMY \u003d 11;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final int MEMBER_VALID_LOYALTY_POINTS_BOB \u003d 22;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String STAFF_VALID_APPOINTMENT_AMY \u003d \"Server\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String STAFF_VALID_APPOINTMENT_BOB \u003d \"Cook\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + MEMBER_VALID_NAME_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + MEMBER_VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + MEMBER_VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_LOYALTY_POINTS_DESC_AMY \u003d \" \" + PREFIX_LOYALTY_POINTS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + MEMBER_VALID_LOYALTY_POINTS_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_LOYALTY_POINTS_DESC_BOB \u003d \" \" + PREFIX_LOYALTY_POINTS"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + MEMBER_VALID_LOYALTY_POINTS_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String STAFF_APPOINTMENT_DESC_AMY \u003d \" \" + PREFIX_APPOINTMENT + STAFF_VALID_APPOINTMENT_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String STAFF_APPOINTMENT_DESC_BOB \u003d \" \" + PREFIX_APPOINTMENT + STAFF_VALID_APPOINTMENT_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String STAFF_INVALID_APPOINTMENT_DESC \u003d \" \" + PREFIX_APPOINTMENT"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"amaz!ngC00k\"; // ! not allowed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String MEMBER_INVALID_LOYALTY_POINTS_DESC \u003d \" \" + PREFIX_LOYALTY_POINTS"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"26.0\"; // . not allowed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    //Related to ingredients"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_NAME_CHEESE \u003d \"cheese\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_NAME_TOMATO \u003d \"tomato\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_QUANTITY_CHEESE \u003d \"4\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_QUANTITY_TOMATO \u003d \"5\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_UNIT_CHEESE \u003d \"pounds\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_UNIT_TOMATO \u003d \"pieces\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_WARNINGAMT_CHEESE \u003d \"3\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_VALID_WARNINGAMT_TOMATO \u003d \"2\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_CHEESE \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_NAME + INGREDIENT_VALID_NAME_CHEESE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_CHEESE \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_QUANTITY + INGREDIENT_VALID_QUANTITY_CHEESE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_UNIT_DESC_CHEESE \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_UNIT + INGREDIENT_VALID_UNIT_CHEESE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_WARNINGAMT_DESC_CHEESE \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_WARNINGAMOUNT + INGREDIENT_VALID_WARNINGAMT_CHEESE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_TOMATO \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_NAME + INGREDIENT_VALID_NAME_TOMATO;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_TOMATO \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_QUANTITY + INGREDIENT_VALID_QUANTITY_TOMATO;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_UNIT_DESC_TOMATO \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_UNIT + INGREDIENT_VALID_UNIT_TOMATO;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_WARNINGAMT_DESC_TOMATO \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_WARNINGAMOUNT + INGREDIENT_VALID_WARNINGAMT_TOMATO;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_INVALID_NAME_DESC \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"1\"; // integers not allowed in ingredientName"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_INVALID_QUANTITY_NONINTEGER_DESC \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"potato\"; // non-integers not allowed in IngredientQuantity"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_INVALID_QUANTITY_NEGATIVES_DESC \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"-1\"; // negative values not allowed in IngredientQuantity"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_INVALID_UNIT_DESC \u003d \" \" + PREFIX_INGREDIENT_UNIT"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            + \"3@\"; // symbols not allowed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String INGREDIENT_INVALID_WARNINGAMOUNT_DESC \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            \" \" + PREFIX_INGREDIENT_WARNINGAMOUNT + \"3.0\"; // decimals not allowed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final EditMemberCommand.EditMemberDescriptor MEMBER_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final EditMemberCommand.EditMemberDescriptor MEMBER_DESC_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        MEMBER_DESC_AMY \u003d new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "                .withPhone(MEMBER_VALID_PHONE_AMY).withEmail(MEMBER_VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withLoyaltyPoints(MEMBER_VALID_LOYALTY_POINTS_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        MEMBER_DESC_BOB \u003d new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": "                .withPhone(MEMBER_VALID_PHONE_BOB).withEmail(MEMBER_VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withLoyaltyPoints(MEMBER_VALID_LOYALTY_POINTS_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limli"
        },
        "content": "     * - the address book, filtered member list and selected member in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook expectedRestaurantBook \u003d new RestaurantBook(actualModel.getRestaurantBook());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cMember\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMemberList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Member expectedSelectedMember \u003d actualModel.getSelectedMember();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            assertEquals(expectedRestaurantBook, actualModel.getRestaurantBook());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredMemberList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            assertEquals(expectedSelectedMember, actualModel.getSelectedMember());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the member at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void showMemberAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member member \u003d model.getFilteredMemberList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limli"
        },
        "content": "        final String[] splitName \u003d member.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(1, model.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the booking at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static void showBookingAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking booking \u003d model.getFilteredBookingList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredBookingList(b -\u003e b.equals(booking));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(1, model.getFilteredBookingList().size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the ingredient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code model}\u0027s restaurant book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static void showIngredientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredient \u003d model.getFilteredIngredientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String ingredientName \u003d ingredient.getIngredientName().getName();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.updateFilteredIngredientList(p -\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                p.getIngredientName().getName().equalsIgnoreCase(ingredientName));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(1, model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Deletes the first member in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void deleteFirstMember(Model model) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member firstMember \u003d model.getFilteredMemberList().get(0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.deleteMember(firstMember);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.commitRestaurantBook();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 4,
      "lingyanhao": 19,
      "hiyingnn": 103,
      "-": 103,
      "limli": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteMemberCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMemberAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": " * {@code DeleteMemberCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "public class DeleteMemberCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteMemberCommand.MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(deleteMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(deleteMemberCommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "                Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteMemberCommand.MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        showNoMember(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(deleteMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRestaurantBook().getMemberList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(deleteMemberCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "                Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "        // delete -\u003e first member deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteMemberCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limli"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered member list to show all members"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "        // redo -\u003e same first member deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limli"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(deleteMemberCommand, model, commandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limli"
        },
        "content": "                Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 1. Deletes a {@code Member} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted member in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the member object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameMemberDeleted() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteMemberCommand deleteMemberCommand \u003d new DeleteMemberCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteMember(memberToDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limli"
        },
        "content": "        // delete -\u003e deletes second member in unfiltered member list / first member in filtered member list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteMemberCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limli"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered member list to show all members"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertNotEquals(memberToDelete, model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limli"
        },
        "content": "        // redo -\u003e deletes same second member in unfiltered member list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteMemberCommand deleteFirstCommand \u003d new DeleteMemberCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteMemberCommand deleteSecondCommand \u003d new DeleteMemberCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteMemberCommand deleteFirstCommandCopy \u003d new DeleteMemberCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different member -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void showNoMember(Model model) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(p -\u003e false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(model.getFilteredMemberList().isEmpty());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "lingyanhao": 26,
      "hiyingnn": 12,
      "-": 108,
      "limli": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditMemberCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_LOYALTY_POINTS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMemberAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.EditMemberDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": " * and unit tests for EditMemberCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "public class EditMemberCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(editedMember).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.setMember(model.getFilteredMemberList().get(0), editedMember);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(editMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index indexLastMember \u003d Index.fromOneBased(model.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member lastMember \u003d model.getFilteredMemberList().get(indexLastMember.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberBuilder memberInList \u003d new MemberBuilder(lastMember);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedMember \u003d memberInList.withName(MEMBER_VALID_NAME_BOB).withPhone(MEMBER_VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "                .withLoyaltyPoints(MEMBER_VALID_LOYALTY_POINTS_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "                .withPhone(MEMBER_VALID_PHONE_BOB).withLoyaltyPoints(MEMBER_VALID_LOYALTY_POINTS_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(indexLastMember, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.setMember(lastMember, editedMember);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(editMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(INDEX_FIRST, new EditMemberDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member editedMember \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(editMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberInFilteredList \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Member editedMember \u003d new MemberBuilder(memberInFilteredList).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.setMember(model.getFilteredMemberList().get(0), editedMember);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(editMemberCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_duplicateMemberUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member firstMember \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(firstMember).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(editMemberCommand, model, commandHistory, EditMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_duplicateMemberFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "        // edit member in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member memberInList \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                model.getRestaurantBook().getMemberList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": "                new EditMemberDescriptorBuilder(memberInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(editMemberCommand, model, commandHistory, EditMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_invalidMemberIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(editMemberCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_invalidMemberIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRestaurantBook().getMemberList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(editMemberCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberToEdit \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(editedMember).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.setMember(memberToEdit, editedMember);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limli"
        },
        "content": "        // edit -\u003e first member edited"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limli"
        },
        "content": "        editMemberCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limli"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered member list to show all members"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limli"
        },
        "content": "        // redo -\u003e same first member edited again"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(editMemberCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 1. Edits a {@code Member} from a filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited member in the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the member object regardless of indexing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameMemberEdited() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedMember \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(editedMember).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberToEdit \u003d model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.setMember(memberToEdit, editedMember);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limli"
        },
        "content": "        // edit -\u003e edits second member in unfiltered member list / first member in filtered member list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limli"
        },
        "content": "        editMemberCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limli"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered member list to show all members"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertNotEquals(model.getFilteredMemberList().get(INDEX_FIRST.getZeroBased()), memberToEdit);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limli"
        },
        "content": "        // redo -\u003e edits same second member in unfiltered member list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        final EditMemberCommand standardCommand \u003d new EditMemberCommand(INDEX_FIRST, MEMBER_DESC_AMY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor copyDescriptor \u003d new EditMemberDescriptor(MEMBER_DESC_AMY);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditMemberCommand commandWithSameValues \u003d new EditMemberCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditMemberCommand(INDEX_SECOND, MEMBER_DESC_AMY)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditMemberCommand(INDEX_FIRST, MEMBER_DESC_BOB)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 35,
      "hiyingnn": 28,
      "-": 130,
      "limli": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditMemberDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.EditMemberDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "public class EditMemberDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptorWithSameValues \u003d new EditMemberDescriptor(MEMBER_DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(MEMBER_DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(MEMBER_DESC_AMY.equals(MEMBER_DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(MEMBER_DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(MEMBER_DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(MEMBER_DESC_AMY.equals(MEMBER_DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new EditMemberDescriptorBuilder(MEMBER_DESC_AMY).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(MEMBER_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAmy \u003d new EditMemberDescriptorBuilder(MEMBER_DESC_AMY).withPhone(MEMBER_VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(MEMBER_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAmy \u003d new EditMemberDescriptorBuilder(MEMBER_DESC_AMY).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(MEMBER_DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 18,
      "-": 29,
      "limli": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different member -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_zeroKeywords_noMemberFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEMBERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        expectedModel.updateFilteredMemberList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredMemberList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void execute_multipleKeywords_multipleMembersFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEMBERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        expectedModel.updateFilteredMemberList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredMemberList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 2,
      "lingyanhao": 2,
      "-": 71,
      "limli": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.MESSAGE_SHOWING_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SHOWING_HELP, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "limli": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMemberAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "hiyingnn": 1,
      "-": 36,
      "limli": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Path getRestaurantBookFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setRestaurantBookFilePath(Path restaurantBookFilePath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addMember(Member member) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addBooking(Booking booking) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void addStaff(Staff staff) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setRestaurantBook(ReadOnlyRestaurantBook newData) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasMember(Member member) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canAccommodate(Booking booking) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean hasStaff(Staff staff) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteMember(Member target) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteBooking(Booking target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void deleteStaff(Staff target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setMember(Member target, Member editedMember) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setBooking(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setStaff(Staff target, Staff editedStaff) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canAccommodateEdit(Booking target, Booking editedBooking) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedMember) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cMember\u003e getFilteredMemberList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ObservableList\u003cStaff\u003e getFilteredStaffList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void updateFilteredStaffList(Predicate\u003cStaff\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canUndoRestaurantBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canRedoRestaurantBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void undoRestaurantBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void redoRestaurantBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void commitRestaurantBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cMember\u003e selectedMemberProperty() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cBooking\u003e selectedBookingProperty() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cIngredient\u003e selectedIngredientProperty() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ReadOnlyProperty\u003cStaff\u003e selectedStaffProperty() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Member getSelectedMember() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Booking getSelectedBooking() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Ingredient getSelectedIngredient() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Staff getSelectedStaff() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedMember(Member member) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedBooking(Booking booking) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void setSelectedStaff(Staff staff) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Capacity getCapacity() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void setCapacity(Capacity newCapacity) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public boolean canUpdateCapacity(Capacity newCapacity) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 61,
      "lingyanhao": 230
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.undoRestaurantBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        model.undoRestaurantBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 6,
      "-": 37,
      "limli": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMemberAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index lastMemberIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertExecutionSuccess(lastMemberIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showMemberAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getRestaurantBook().getMemberList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different member -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "     * and checks that the model\u0027s selected member is set to the member at {@code index} in the filtered member list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_MEMBER_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        expectedModel.setSelectedMember(model.getFilteredMemberList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "lingyanhao": 17,
      "-": 82,
      "limli": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteFirstMember(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 2,
      "-": 37,
      "limli": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/booking/AddBookingCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CustomerIndexedBooking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddBookingCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.testutil.CustomerIndexedBookingBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Contains integration tests (interaction with the Model)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * and unit tests for AddBookingCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddBookingCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void constructor_nullBooking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        new AddBookingCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void execute_bookingAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CustomerIndexedBooking validBooking \u003d new CustomerIndexedBookingBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CommandResult commandResult \u003d new AddBookingCommand(validBooking).execute(model, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking expectedBooking \u003d validBooking.getBooking(model).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(String.format(AddBookingCommand.MESSAGE_SUCCESS, expectedBooking),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(Arrays.asList(expectedBooking), model.getFilteredBookingList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void execute_duplicateBooking_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CustomerIndexedBooking validBooking \u003d new CustomerIndexedBookingBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddBookingCommand addBookingCommand \u003d new AddBookingCommand(validBooking);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        addBookingCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expectMessage(AddBookingCommand.MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        addBookingCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void execute_customerIndexOutOfBounds_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromZeroBased(model.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CustomerIndexedBooking invalidBooking \u003d new CustomerIndexedBookingBuilder().withIndex(outOfBoundsIndex).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddBookingCommand invalidAddBookingCommand \u003d new AddBookingCommand(invalidBooking);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        invalidAddBookingCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddBookingCommand defaultBookingCommand \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddBookingCommand(new CustomerIndexedBookingBuilder().build());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddBookingCommand duplicateDefaultBookingCommand \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddBookingCommand(new CustomerIndexedBookingBuilder().build());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddBookingCommand differentBookingCommand \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddBookingCommand(new CustomerIndexedBookingBuilder().withIndex(INDEX_SECOND).build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // same object -\u003e equal"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(defaultBookingCommand, defaultBookingCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // duplicate object -\u003e equal"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(defaultBookingCommand, duplicateDefaultBookingCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // change customer index -\u003e not equal"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertNotEquals(defaultBookingCommand, differentBookingCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // different type -\u003e not equal"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertNotEquals(defaultBookingCommand, 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertNotEquals(defaultBookingCommand, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/booking/DeleteBookingCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.commands.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookingAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalBookings.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * {@code DeleteBookingCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class DeleteBookingCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking bookingToDelete \u003d model.getFilteredBookingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBookingCommand.MESSAGE_DELETE_BOOKING_SUCCESS, bookingToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteBooking(bookingToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(deleteBookingCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookingList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(deleteBookingCommand, model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showBookingAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking bookingToDelete \u003d model.getFilteredBookingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBookingCommand.MESSAGE_DELETE_BOOKING_SUCCESS, bookingToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteBooking(bookingToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showNoBooking(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(deleteBookingCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showBookingAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRestaurantBook().getBookingList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(deleteBookingCommand, model, commandHistory,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking bookingToDelete \u003d model.getFilteredBookingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteBooking(bookingToDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // delete -\u003e first booking deleted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        deleteBookingCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered booking list to show all bookings"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // redo -\u003e same first booking deleted again"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookingList().size() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(deleteBookingCommand, model, commandHistory,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * 1. Deletes a {@code Booking} from a filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted booking in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the booking object regardless of indexing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameBookingDeleted() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        showBookingAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Booking bookingToDelete \u003d model.getFilteredBookingList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.deleteBooking(bookingToDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // delete -\u003e deletes second booking in unfiltered booking list / first booking in filtered booking list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        deleteBookingCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // undo -\u003e reverts restaurant book back to previous state and filtered booking list to show all bookings"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertNotEquals(bookingToDelete, model.getFilteredBookingList().get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // redo -\u003e deletes same second booking in unfiltered bookings list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteFirstCommand \u003d new DeleteBookingCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteSecondCommand \u003d new DeleteBookingCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        DeleteBookingCommand deleteFirstCommandCopy \u003d new DeleteBookingCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private void showNoBooking(Model model) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.updateFilteredBookingList(p -\u003e false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(model.getFilteredBookingList().isEmpty());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredient/AddIngredientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHEESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddIngredientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Add Ingredient Command test to check if ingredients are properly added into the model."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_ingredientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ModelStubAcceptingIngredientAdded modelStub \u003d new ModelStubAcceptingIngredientAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CommandResult commandResult \u003d new AddIngredientCommand(validIngredient).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(String.format(AddIngredientCommand.MESSAGE_SUCCESS, validIngredient),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(Arrays.asList(validIngredient), modelStub.ingredientsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_duplicateIngredient_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder(CHEESE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddIngredientCommand addCommand \u003d new AddIngredientCommand(validIngredient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithIngredient(validIngredient);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expectMessage(AddIngredientCommand.MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient cheese \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder().withIngredientName(\"cheese\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientQuantity(4).withIngredientUnit(\"pounds\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientWarningAmount(2).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient tomato \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder().withIngredientName(\"tomato\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientQuantity(5).withIngredientUnit(\"pieces\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientWarningAmount(5).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient modifiedCheeseQuantity \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder().withIngredientName(\"cheese\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientQuantity(6).withIngredientUnit(\"pounds\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientWarningAmount(2).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient modifiedCheeseUnit \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder().withIngredientName(\"cheese\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientQuantity(4).withIngredientUnit(\"kg\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientWarningAmount(2).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient modifiedCheeseWarningAmt \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder().withIngredientName(\"cheese\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientQuantity(4).withIngredientUnit(\"pounds\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientWarningAmount(3).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddIngredientCommand addCheeseCommand \u003d new AddIngredientCommand(cheese);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddIngredientCommand addTomatoCommand \u003d new AddIngredientCommand(tomato);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(addCheeseCommand, addCheeseCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // same ingredient name, quantity, unit, warningamt -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddIngredientCommand addCheeseCommandCopy \u003d new AddIngredientCommand(cheese);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(addCheeseCommandCopy, addCheeseCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //all same fields except unit -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        AddIngredientCommand addCheeseCommandModifiedUnit \u003d new AddIngredientCommand(modifiedCheeseUnit);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotEquals(addCheeseCommand, addCheeseCommandModifiedUnit);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //all same fields except quantity -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        AddIngredientCommand addCheeseCommandModifiedQty \u003d new AddIngredientCommand(modifiedCheeseQuantity);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotEquals(addCheeseCommand, addCheeseCommandModifiedQty);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //all same fields except warningamt -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        AddIngredientCommand addCheeseCommandModifiedWarningAmt \u003d new AddIngredientCommand(modifiedCheeseWarningAmt);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotEquals(addCheeseCommand, addCheeseCommandModifiedWarningAmt);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotEquals(addCheeseCommand, 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotEquals(addCheeseCommand, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotEquals(addCheeseCommand, addTomatoCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * A Model stub that contains an ingredient."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private class ModelStubWithIngredient extends ModelStub {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        private final Ingredient ingredient;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ModelStubWithIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return this.ingredient.isSameItem(ingredient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * A Model stub that always accept the ingredient being added."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private class ModelStubAcceptingIngredientAdded extends ModelStub {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        final ArrayList\u003cIngredient\u003e ingredientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return ingredientsAdded.stream().anyMatch(ingredient::isSameItem);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            ingredientsAdded.add(ingredient);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        public void commitRestaurantBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // called by {@code AddIngredientCommand#execute()}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            return new RestaurantBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 19,
      "hiyingnn": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredient/ConsumeIngredientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHEESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.TYPICAL_CONSUME_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.ConsumeIngredientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class ConsumeIngredientCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_indexAndQuantityPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient consumedIngredient \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientName(\"cheese\").withIngredientQuantity(3)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientUnit(\"pounds\").withIngredientWarningAmount(3).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ConsumeIngredientCommand consumeIngredientCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new ConsumeIngredientCommand(INDEX_FIRST_INGREDIENT, new IngredientQuantity(TYPICAL_CONSUME_AMOUNT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String expectedMessage \u003d String.format(ConsumeIngredientCommand.MESSAGE_SUCCESS, consumedIngredient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.setIngredient(model.getFilteredIngredientList().get(0), consumedIngredient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(consumeIngredientCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ConsumeIngredientCommand consumeCommand \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new ConsumeIngredientCommand(outOfBoundIndex, new IngredientQuantity(TYPICAL_CONSUME_AMOUNT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(consumeCommand, model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_invalidConsumeQuantity_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        int invalidConsumeQuantity \u003d CHEESE.getIngredientQuantity().getQuantity() + 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ConsumeIngredientCommand consumeCommand \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new ConsumeIngredientCommand(INDEX_FIRST_INGREDIENT, new IngredientQuantity(invalidConsumeQuantity));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(consumeCommand, model, commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ConsumeIngredientCommand.MESSAGE_EXCEEDS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredient/DeleteIngredientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showIngredientAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INGREDIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * {@code DeleteIngredientCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredientToDelete \u003d model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                String.format(DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENT_SUCCESS, ingredientToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(deleteIngredientCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(deleteIngredientCommand, model, commandHistory,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredientToDelete \u003d model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // delete -\u003e first ingredient deleted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        deleteIngredientCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // undo -\u003e reverts restaurantbook back to previous state and filtered ingredient list to show all ingredient"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // redo -\u003e same first ingredient deleted again"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // execution failed -\u003e restaurant book state not added into model"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(deleteIngredientCommand, model, commandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // single restaurant book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * 1. Deletes a {@code Ingredient} from a filtered list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously ingredient in the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the ingredient object regardless of indexing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameIngredientDeleted() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestaurantBook(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        showIngredientAtIndex(model, INDEX_SECOND_INGREDIENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredientToDelete \u003d model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // delete -\u003e deletes second ingredient in unfiltered ingredientlist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // first ingredient in filtered ingredient list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        deleteIngredientCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered ingredient list to show all ingredients"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.undoRestaurantBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotEquals(ingredientToDelete,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // redo -\u003e deletes same second ingredient in unfiltered ingredient list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.redoRestaurantBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteFirstCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteSecondCommand \u003d new DeleteIngredientCommand(INDEX_SECOND_INGREDIENT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        DeleteIngredientCommand deleteFirstCommandCopy \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredient/RestockIngredientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.commands.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHEESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.TYPICAL_RESTOCK_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.RestockIngredientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * Contains tests for RestockIngredientCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestockIngredientCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_indexAndQuantityPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient restockedIngredient \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientName(\"cheese\").withIngredientQuantity(5)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientUnit(\"pounds\").withIngredientWarningAmount(3).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestockIngredientCommand restockCommand \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new RestockIngredientCommand(INDEX_FIRST_INGREDIENT, new IngredientQuantity(TYPICAL_RESTOCK_AMOUNT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String expectedMessage \u003d String.format(RestockIngredientCommand.MESSAGE_SUCCESS, restockedIngredient);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.setIngredient(model.getFilteredIngredientList().get(0), restockedIngredient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(restockCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestockIngredientCommand restockCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new RestockIngredientCommand(outOfBoundIndex, new IngredientQuantity(TYPICAL_RESTOCK_AMOUNT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(restockCommand, model, commandHistory,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_invalidRestockQuantity_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        long invalidRestockQuantity \u003d (new Long(Integer.MAX_VALUE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                - new Long(CHEESE.getIngredientQuantity().getQuantity())) + 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestockIngredientCommand restockCommand \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new RestockIngredientCommand(INDEX_FIRST_INGREDIENT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        new IngredientQuantity((int) invalidRestockQuantity));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(restockCommand, model, commandHistory, RestockIngredientCommand.MESSAGE_EXCEEDS_MAXIMUM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_validRestockQuantity_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        long invalidRestockQuantity \u003d (new Long(Integer.MAX_VALUE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                - new Long(CHEESE.getIngredientQuantity().getQuantity())) + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestockIngredientCommand restockCommand \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new RestockIngredientCommand(INDEX_FIRST_INGREDIENT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        new IngredientQuantity((int) invalidRestockQuantity));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandFailure(restockCommand, model, commandHistory, RestockIngredientCommand.MESSAGE_EXCEEDS_MAXIMUM);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void execute_validQBoundaryQuantity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient restockedIngredient \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientName(\"cheese\").withIngredientQuantity(Integer.MAX_VALUE)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientUnit(\"pounds\").withIngredientWarningAmount(3).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        long validRestockQuantity \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new Long(Integer.MAX_VALUE) - new Long(CHEESE.getIngredientQuantity().getQuantity());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestockIngredientCommand restockCommand \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new RestockIngredientCommand(INDEX_FIRST_INGREDIENT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        new IngredientQuantity((int) validRestockQuantity));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String expectedMessage \u003d String.format(RestockIngredientCommand.MESSAGE_SUCCESS, restockedIngredient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RestaurantBook(model.getRestaurantBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.setIngredient(model.getFilteredIngredientList().get(0), restockedIngredient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        expectedModel.commitRestaurantBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertCommandSuccess(restockCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "hiyingnn": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/staff/AddStaffCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.logic.commands.staff;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddStaffCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.StaffBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * Add Staff Command test to check if staff are properly added into the model."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class AddStaffCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void execute_staffAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ModelStubAcceptingStaffAdded modelStub \u003d new ModelStubAcceptingStaffAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff validStaff \u003d new StaffBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CommandResult commandResult \u003d new AddStaffCommand(validStaff).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(String.format(AddStaffCommand.MESSAGE_SUCCESS, validStaff),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(Arrays.asList(validStaff), modelStub.staffAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void execute_duplicateStaff_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff validStaff \u003d new StaffBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddStaffCommand addStaffCommand \u003d new AddStaffCommand(validStaff);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStaff(validStaff);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expectMessage(AddStaffCommand.MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        addStaffCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff amyStaff \u003d new StaffBuilder(AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff bobStaff \u003d new StaffBuilder(BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddStaffCommand addAmyCommand \u003d new AddStaffCommand(amyStaff);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddStaffCommand addBobCommand \u003d new AddStaffCommand(bobStaff);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(addAmyCommand.equals(addAmyCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddStaffCommand addBobCommandCopy \u003d new AddStaffCommand(bobStaff);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(addBobCommand.equals(addBobCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(addBobCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(addBobCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different staff -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(addBobCommand.equals(addAmyCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * A Model stub that contains an staff."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private class ModelStubWithStaff extends ModelStub {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        private final Staff staff;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ModelStubWithStaff(Staff staff) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            requireNonNull(staff);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            this.staff \u003d staff;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean hasStaff(Staff staff) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(staff);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return this.staff.isSameItem(staff);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * A Model stub that always accept the staff being added."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private class ModelStubAcceptingStaffAdded extends ModelStub {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        final ArrayList\u003cStaff\u003e staffAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public boolean hasStaff(Staff staff) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(staff);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return staffAdded.stream().anyMatch(staff::isSameItem);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public void addStaff(Staff staff) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            requireNonNull(staff);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            staffAdded.add(staff);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public void commitRestaurantBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // called by {@code AddStaffCommand#execute()}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        public ReadOnlyRestaurantBook getRestaurantBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            return new RestaurantBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 116,
      "lingyanhao": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddMemberCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "public class AddMemberCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    private AddMemberCommandParser parser \u003d new AddMemberCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member expectedMember \u003d new MemberBuilder(BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MEMBER_NAME_DESC_BOB"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddMemberCommand(expectedMember));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_AMY + MEMBER_NAME_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddMemberCommand(expectedMember));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_AMY"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddMemberCommand(expectedMember));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_AMY + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddMemberCommand(expectedMember));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member expectedMember \u003d new MemberBuilder(AMY).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_AMY + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddMemberCommand(expectedMember));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_VALID_NAME_BOB + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_VALID_PHONE_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB + MEMBER_VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_VALID_NAME_BOB + MEMBER_VALID_PHONE_BOB + MEMBER_VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_INVALID_NAME_DESC + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_INVALID_PHONE_DESC + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB + MEMBER_INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_INVALID_NAME_DESC + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MEMBER_NAME_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "lingyanhao": 8,
      "hiyingnn": 31,
      "-": 61,
      "limli": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddStaffCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STAFF_APPOINTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STAFF_APPOINTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STAFF_INVALID_APPOINTMENT_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STAFF_VALID_APPOINTMENT_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddStaffCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.StaffBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class AddStaffCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private AddStaffCommandParser parser \u003d new AddStaffCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff expectedStaff \u003d new StaffBuilder(AMY).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MEMBER_NAME_DESC_AMY"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + STAFF_APPOINTMENT_DESC_AMY, new AddStaffCommand(expectedStaff));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_BOB + MEMBER_NAME_DESC_AMY"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + STAFF_APPOINTMENT_DESC_AMY, new AddStaffCommand(expectedStaff));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_AMY + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + STAFF_APPOINTMENT_DESC_AMY, new AddStaffCommand(expectedStaff));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_AMY + MEMBER_PHONE_DESC_AMY"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB + MEMBER_EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + STAFF_APPOINTMENT_DESC_AMY, new AddStaffCommand(expectedStaff));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // multiple appointments - last appointment accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_AMY + MEMBER_PHONE_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB + MEMBER_EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + STAFF_APPOINTMENT_DESC_BOB + STAFF_APPOINTMENT_DESC_AMY, new AddStaffCommand(expectedStaff));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff expectedStaff \u003d new StaffBuilder(BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddStaffCommand(expectedStaff));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStaffCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_VALID_NAME_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_VALID_PHONE_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_VALID_EMAIL_BOB + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // missing appointment prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_VALID_APPOINTMENT_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_VALID_NAME_BOB + MEMBER_VALID_PHONE_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_VALID_EMAIL_BOB + STAFF_VALID_APPOINTMENT_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_INVALID_NAME_DESC + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_INVALID_EMAIL_DESC + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // invalid appointment"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_INVALID_APPOINTMENT_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Appointment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_INVALID_NAME_DESC + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + MEMBER_EMAIL_DESC_BOB + STAFF_APPOINTMENT_DESC_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MEMBER_NAME_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + STAFF_APPOINTMENT_DESC_BOB, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                AddStaffCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 83,
      "lingyanhao": 9,
      "hiyingnn": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteMemberCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": " * outside of the DeleteMemberCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": " * same path through the DeleteMemberCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "public class DeleteMemberCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    private DeleteMemberCommandParser parser \u003d new DeleteMemberCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteMemberCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "                DeleteMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "-": 24,
      "limli": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditMemberCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_LOYALTY_POINTS_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_LOYALTY_POINTS_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_LOYALTY_POINTS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.EditMemberDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "public class EditMemberCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMemberCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, MEMBER_VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\", EditMemberCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, \"-5\" + MEMBER_NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, \"0\" + MEMBER_NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEMBER_INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEMBER_INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEMBER_INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEMBER_INVALID_LOYALTY_POINTS_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "                LoyaltyPoints.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEMBER_INVALID_PHONE_DESC + MEMBER_EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEMBER_PHONE_DESC_BOB + MEMBER_INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"1\" + MEMBER_INVALID_NAME_DESC + MEMBER_INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "                        + MEMBER_VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_EMAIL_DESC_AMY + MEMBER_NAME_DESC_AMY + MEMBER_LOYALTY_POINTS_DESC_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_AMY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limli"
        },
        "content": "                .withPhone(MEMBER_VALID_PHONE_BOB).withEmail(MEMBER_VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limli"
        },
        "content": "                .withLoyaltyPoints(MEMBER_VALID_LOYALTY_POINTS_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withPhone(MEMBER_VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withEmail(MEMBER_VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEMBER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(MEMBER_VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        descriptor \u003d new EditMemberDescriptorBuilder().withPhone(MEMBER_VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        descriptor \u003d new EditMemberDescriptorBuilder().withEmail(MEMBER_VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY + MEMBER_PHONE_DESC_BOB + MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withPhone(MEMBER_VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withEmail(MEMBER_VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEMBER_INVALID_PHONE_DESC + MEMBER_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withPhone(MEMBER_VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MEMBER_EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_INVALID_PHONE_DESC + MEMBER_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        descriptor \u003d new EditMemberDescriptorBuilder().withPhone(MEMBER_VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedCommand \u003d new EditMemberCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 8,
      "hiyingnn": 37,
      "-": 97,
      "limli": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListMembersCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.ListMembersCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.NameAndLoyaltyPointsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "public class ListMembersCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    private ListMembersCommandParser parser \u003d new ListMembersCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parse_emptyArg_returnsListMembersCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "        ListMembersCommand expectedListMembersCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "                new ListMembersCommand(new NameAndLoyaltyPointsPredicate(new ArrayList\u003c\u003e(), 0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseSuccess(parser, \"     \", expectedListMembersCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"     \", expectedListMembersCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parse_validArgs_returnsListMembersCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        ListMembersCommand expectedListMembersCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "                new ListMembersCommand(new NameAndLoyaltyPointsPredicate(Arrays.asList(\"Alice\", \"Bob\"), 4));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"  Alice   Bob    \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "                + PREFIX_LOYALTY_POINTS + \"  4  \", expectedListMembersCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"   trash\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "                ListMembersCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.model.booking.BookingSize.MAX_BOOKING_SIZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientUnit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientWarningAmount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String INVALID_LOYALTY_POINTS \u003d \"-123\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String VALID_LOYALTY_POINTS \u003d \"1234\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final int VALID_LOYALTY_POINTS_INT \u003d 1234;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_NAME_INTEGER \u003d \"10\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_NAME_SYMBOLS \u003d \"cheese@4\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_UNIT_INTEGER \u003d \"1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_UNIT_SYMBOLS \u003d \"sac3`k\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_QUANTITY_NEGATIVE \u003d \"-1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_QUANTITY_PLUS_SIGN \u003d \"+1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_WARNINGAMT_NEGATIVE \u003d \"-1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String INVALID_INGREDIENT_WARNINGAMT_PLUS_SIGN \u003d \"+1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String VALID_INGREDIENT_NAME \u003d \"cheese\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String VALID_INGREDIENT_QUANTITY_POSITIVEINT \u003d \"1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String VALID_INGREDIENT_QUANTITY_ZERO \u003d \"0\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String VALID_INGREDIENT_UNIT \u003d \"sacks\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String VALID_INGREDIENT_WARNINGAMT_POSITIVEINT \u003d \"1\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String VALID_INGREDIENT_WARNINGAMT_ZERO \u003d \"0\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private static final String INVALID_FEB_29 \u003d \"2019-02-29T12:00\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private static final String WRONG_DATE_FORMAT \u003d \"2019-02-28T1200\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private static final String VALID_FEB_29 \u003d \"2020-02-29T12:00\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ParserUtil.parseIndex(Long.toString((long) Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parseLoyaltyPoints_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseLoyaltyPoints(INVALID_LOYALTY_POINTS));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parseLoyaltyPoints_validValueWithoutWhitespace_returnsLoyaltyPoints() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limli"
        },
        "content": "        LoyaltyPoints expectedLoyaltyPoints \u003d new LoyaltyPoints(VALID_LOYALTY_POINTS_INT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedLoyaltyPoints, ParserUtil.parseLoyaltyPoints(VALID_LOYALTY_POINTS));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parseLoyaltyPoints_validValueWithWhitespace_returnsLoyaltyPoints() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limli"
        },
        "content": "        String loyaltyPointsWithWhitespace \u003d WHITESPACE + VALID_LOYALTY_POINTS + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limli"
        },
        "content": "        LoyaltyPoints expectedLoyaltyPoints \u003d new LoyaltyPoints(VALID_LOYALTY_POINTS_INT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedLoyaltyPoints, ParserUtil.parseLoyaltyPoints(loyaltyPointsWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseIngredientName_invalidNonAlphabetValue_throwsException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientName(INVALID_INGREDIENT_NAME_INTEGER);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseIngredientName_invalidSymbolsValue_throwsExcetpion() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientName(INVALID_INGREDIENT_NAME_SYMBOLS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientName_null_throwsException() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredientName((String) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientName_validValue_returnsIngredientName() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String ingredientNameWithWhiteSpace \u003d WHITESPACE + VALID_INGREDIENT_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientName expectedIngredientName \u003d new IngredientName(VALID_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //with white space"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(expectedIngredientName, ParserUtil.parseIngredientName((ingredientNameWithWhiteSpace)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //without white space"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(expectedIngredientName, ParserUtil.parseIngredientName((VALID_INGREDIENT_NAME)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientQuantity_invalidNegativeValue_throwsExcepion() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientQuantity(INVALID_INGREDIENT_QUANTITY_NEGATIVE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientQuantity_invalidPlusValue_throwsExcepion() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientQuantity(INVALID_INGREDIENT_QUANTITY_PLUS_SIGN);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientQuantity_invalidOutOfRange_throwsExcepion() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ParserUtil.parseIngredientQuantity(Long.toString((long) Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientQuantity_null_throwsException() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredientQuantity((String) null));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientQuantity_validValue_returnsIngredientQuantity() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String posIngredientQuantityWithWhiteSpace \u003d WHITESPACE + VALID_INGREDIENT_QUANTITY_POSITIVEINT + WHITESPACE;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientQuantity posExpectedIngredientQuantity \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientQuantity(Integer.parseInt(VALID_INGREDIENT_QUANTITY_POSITIVEINT));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //positive integer with white space"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(posExpectedIngredientQuantity,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientQuantity((posIngredientQuantityWithWhiteSpace)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //positive integer without white space"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(posExpectedIngredientQuantity,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientQuantity(VALID_INGREDIENT_QUANTITY_POSITIVEINT));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String zeroIngredientQuantityWithWhiteSpace \u003d WHITESPACE + VALID_INGREDIENT_QUANTITY_ZERO + WHITESPACE;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientQuantity zeroExpectedIngredientQuantity \u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientQuantity(Integer.parseInt(VALID_INGREDIENT_QUANTITY_ZERO));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //zero with white space"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(zeroExpectedIngredientQuantity,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientQuantity((zeroIngredientQuantityWithWhiteSpace)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //zero without white space"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(zeroExpectedIngredientQuantity,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientQuantity(VALID_INGREDIENT_QUANTITY_ZERO));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientUnit_invalidNonAlphabetValue_throwsException() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientUnit(INVALID_INGREDIENT_UNIT_INTEGER);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientUnit_invalidSymbolsValue_throwsException() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientUnit(INVALID_INGREDIENT_UNIT_SYMBOLS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientUnit_null_throwsException() throws Exception {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredientUnit((String) null));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientUnit_validValue_returnsIngredientUnit() throws Exception {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String ingredientUnitWithWhiteSpace \u003d WHITESPACE + VALID_INGREDIENT_UNIT + WHITESPACE;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientUnit expectedIngredientUnit \u003d new IngredientUnit(VALID_INGREDIENT_UNIT);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //with white space"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(expectedIngredientUnit, ParserUtil.parseIngredientUnit((ingredientUnitWithWhiteSpace)));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //without white space"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(expectedIngredientUnit, ParserUtil.parseIngredientUnit((VALID_INGREDIENT_UNIT)));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientWarningAmount_invalidNegativeValue_throwsExcepion() throws Exception {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientWarningAmount(INVALID_INGREDIENT_WARNINGAMT_NEGATIVE);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientWarningAmount_invalidPlusValue_throwsExcepion() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ParserUtil.parseIngredientQuantity(INVALID_INGREDIENT_WARNINGAMT_PLUS_SIGN);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientWarningAmount_invalidOutOfRange_throwsExcepion() throws Exception {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ParserUtil.parseIngredientWarningAmount(Long.toString((long) Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parseIngredientWarningAmount_validValue_returnsIngredientWarning() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String posIngredientWarningAmtWithWhiteSpace \u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                WHITESPACE + VALID_INGREDIENT_WARNINGAMT_POSITIVEINT + WHITESPACE;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientWarningAmount posExpectedIngredientWarningAmount \u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientWarningAmount(Integer.parseInt(VALID_INGREDIENT_WARNINGAMT_POSITIVEINT));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //positive integer with white space"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(posExpectedIngredientWarningAmount,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientWarningAmount((posIngredientWarningAmtWithWhiteSpace)));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //positive integer without white space"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(posExpectedIngredientWarningAmount,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientWarningAmount(VALID_INGREDIENT_WARNINGAMT_POSITIVEINT));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String zeroIngredientWarningAmtWithWhiteSpace \u003d WHITESPACE + VALID_INGREDIENT_WARNINGAMT_ZERO + WHITESPACE;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        IngredientWarningAmount zeroExpectedIngredientWarningAmt \u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientWarningAmount(Integer.parseInt(VALID_INGREDIENT_WARNINGAMT_ZERO));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //zero with white space"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(zeroExpectedIngredientWarningAmt,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientWarningAmount((zeroIngredientWarningAmtWithWhiteSpace)));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //zero without white space"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(zeroExpectedIngredientWarningAmt,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                ParserUtil.parseIngredientWarningAmount(VALID_INGREDIENT_WARNINGAMT_ZERO));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseBookingWindow_invalidDate_throwsParseException() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseBookingWindow(INVALID_FEB_29));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseBookingWindow_wrongDateFormat_throwsParseException() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseBookingWindow(WRONG_DATE_FORMAT));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseBookingWindow_validDate_returnsBookingWindow() throws Exception {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        BookingWindow expectedBookingWindow \u003d new BookingWindow(LocalDateTime.of(2020, Month.FEBRUARY, 29, 12, 0));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedBookingWindow, ParserUtil.parseBookingWindow(VALID_FEB_29));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseBookingSize_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseBookingSize(\"0\"));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseBookingSize(\"-1\"));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                ParseException.class, () -\u003e ParserUtil.parseBookingSize(Integer.toString(MAX_BOOKING_SIZE + 1)));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseBookingSize_validBookingSize_returnsBookingSize() throws Exception {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // test boundary values"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        BookingSize expectedBookingSize \u003d new BookingSize(1);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedBookingSize, ParserUtil.parseBookingSize(\"1\"));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedBookingSize \u003d new BookingSize(MAX_BOOKING_SIZE);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedBookingSize, ParserUtil.parseBookingSize(Integer.toString(MAX_BOOKING_SIZE)));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 52,
      "hiyingnn": 143,
      "-": 158,
      "limli": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RestaurantBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.EditMemberDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestaurantBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final RestaurantBookParser parser \u003d new RestaurantBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member member \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        AddMemberCommand command \u003d (AddMemberCommand) parser.parseCommand(MemberUtil.getAddCommand(member));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new AddMemberCommand(member), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d (AddMemberCommand) parser.parseCommand(MemberUtil.getAddCommandAlias(member));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new AddMemberCommand(member), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "        DeleteMemberCommand command \u003d (DeleteMemberCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                DeleteMemberCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new DeleteMemberCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d (DeleteMemberCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                DeleteMemberCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new DeleteMemberCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member member \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(member).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": "        EditMemberCommand command \u003d (EditMemberCommand) parser.parseCommand(EditMemberCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + MemberUtil.getEditMemberDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new EditMemberCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d (EditMemberCommand) parser.parseCommand(EditMemberCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + MemberUtil.getEditMemberDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new EditMemberCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parseUpperCaseCommand() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member member \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limli"
        },
        "content": "        Command command \u003d parser.parseCommand(\"aDdmEmBEr\" + \" \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MemberUtil.getMemberDetails(member));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(new AddMemberCommand(member), command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d parser.parseCommand(\"DELETEMEMBER 1\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(new DeleteMemberCommand(Index.fromOneBased(1)), command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 18,
      "lingyanhao": 26,
      "hiyingnn": 2,
      "-": 118,
      "limli": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": " * Test scope: similar to {@code DeleteMemberCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": " * @see DeleteMemberCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "-": 25,
      "limli": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewStatsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.ViewStatsCommand.MESSAGE_SIZE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.ViewStatsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class ViewStatsCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "    private ViewStatsCommandParser parser \u003d new ViewStatsCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"   \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "                ViewStatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parse_validArgs_returnsListMembersCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "        ViewStatsCommand expectedViewStatsCommand \u003d new ViewStatsCommand(30);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseSuccess(parser, \" 30  \", expectedViewStatsCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"   asd  \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "                ViewStatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertParseFailure(parser, \"   0  \", MESSAGE_SIZE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/booking/AddBookingCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.CustomerIndexedBookingBuilder.DEFAULT_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CustomerIndexedBooking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddBookingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.AddBookingCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.testutil.CustomerIndexedBookingBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddBookingCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private AddBookingCommandParser parser \u003d new AddBookingCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CustomerIndexedBooking expectedBooking \u003d new CustomerIndexedBookingBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String commandString \u003d \" \" + PREFIX_START_TIME + DEFAULT_START_TIME + \" \" + PREFIX_CUSTOMER"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + \"1 \" + PREFIX_NUMBER_PERSONS + \"5\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseSuccess(parser, commandString, new AddBookingCommand(expectedBooking));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // missing start time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String commandString \u003d \" \" + PREFIX_CUSTOMER + \"1 \" + PREFIX_NUMBER_PERSONS + \"5\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, commandString, expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // missing member index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        commandString \u003d \" \" + PREFIX_START_TIME + DEFAULT_START_TIME + \" \" + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + PREFIX_NUMBER_PERSONS + \"5\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, commandString, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // missing number of persons"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        commandString \u003d \" \" + PREFIX_START_TIME + DEFAULT_START_TIME + \" \" + PREFIX_CUSTOMER + \"1 \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, commandString, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/booking/DeleteBookingCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.DeleteBookingCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * outside of the DeleteBookingCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * same path through the DeleteBookingCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class DeleteBookingCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private DeleteBookingCommandParser parser \u003d new DeleteBookingCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteBookingCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                DeleteBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/booking/EditBookingCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.logic.parser.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.EditBookingCommand.EditBookingDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.EditBookingCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class EditBookingCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private EditBookingCommandParser parser \u003d new EditBookingCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \" n/5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \"1\", EditBookingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \"-5\" + \" \" + PREFIX_NUMBER_PERSONS + \"5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \"0\" + \" \" + PREFIX_NUMBER_PERSONS + \"5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_numPersonsOnly_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditBookingDescriptor ebd \u003d new EditBookingDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ebd.setBookingSize(new BookingSize(5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String userInput \u003d \"2 \" + PREFIX_NUMBER_PERSONS + \"5\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditBookingCommand expected \u003d new EditBookingCommand(INDEX_SECOND, ebd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseSuccess(parser, userInput, expected);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_startTimeOnly_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditBookingDescriptor ebd \u003d new EditBookingDescriptor();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String startTimeString \u003d \"2019-03-24T10:00\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ebd.setBookingWindow(new BookingWindow(startTimeString));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String userInput \u003d \"1 \" + PREFIX_START_TIME + startTimeString;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditBookingCommand expected \u003d new EditBookingCommand(INDEX_FIRST, ebd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseSuccess(parser, userInput, expected);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void parse_bothFieldsPresent_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditBookingDescriptor ebd \u003d new EditBookingDescriptor();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String startTimeString \u003d \"2019-03-24T10:00\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ebd.setBookingWindow(new BookingWindow(startTimeString));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        ebd.setBookingSize(new BookingSize(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String userInput \u003d \"3 \" + PREFIX_NUMBER_PERSONS + \"5 \" + PREFIX_START_TIME + startTimeString;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        EditBookingCommand expected \u003d new EditBookingCommand(INDEX_THIRD, ebd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertParseSuccess(parser, userInput, expected);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ingredient/AddIngredientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_INVALID_QUANTITY_NEGATIVES_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_INVALID_QUANTITY_NONINTEGER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_INVALID_UNIT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_INVALID_WARNINGAMOUNT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_NAME_DESC_CHEESE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_NAME_DESC_TOMATO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_QUANTITY_DESC_CHEESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_QUANTITY_DESC_TOMATO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_UNIT_DESC_CHEESE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_UNIT_DESC_TOMATO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_VALID_NAME_CHEESE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_VALID_UNIT_CHEESE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_WARNINGAMT_DESC_CHEESE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_WARNINGAMT_DESC_TOMATO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHEESE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHEESE_BASIC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddIngredientCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.AddIngredientCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientUnit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class AddIngredientCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private AddIngredientCommandParser parser \u003d new AddIngredientCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient expectedIngredient \u003d new IngredientBuilder(CHEESE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_CHEESE + INGREDIENT_UNIT_DESC_CHEESE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_WARNINGAMT_DESC_CHEESE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddIngredientCommand(expectedIngredient));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // multiple ingredient names last ingredient name recorded"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INGREDIENT_NAME_DESC_TOMATO"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_NAME_DESC_CHEESE + INGREDIENT_QUANTITY_DESC_CHEESE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_UNIT_DESC_CHEESE + INGREDIENT_WARNINGAMT_DESC_CHEESE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddIngredientCommand(expectedIngredient));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // multiple ingredient quantities last ingredient quantity recorded"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_TOMATO + INGREDIENT_QUANTITY_DESC_CHEESE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_UNIT_DESC_CHEESE + INGREDIENT_WARNINGAMT_DESC_CHEESE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                new AddIngredientCommand(expectedIngredient));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // multiple ingredient units last ingredient unit recorded"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_CHEESE + INGREDIENT_UNIT_DESC_TOMATO"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_UNIT_DESC_CHEESE + INGREDIENT_WARNINGAMT_DESC_CHEESE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new AddIngredientCommand(expectedIngredient));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // multiple ingredient warning amts last ingredient unit recorded"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + INGREDIENT_QUANTITY_DESC_CHEESE + INGREDIENT_UNIT_DESC_CHEESE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + INGREDIENT_WARNINGAMT_DESC_TOMATO + INGREDIENT_WARNINGAMT_DESC_CHEESE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            new AddIngredientCommand(expectedIngredient));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //ingredient quantity and ingredient warning amount missing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient expectedIngredient \u003d new IngredientBuilder(CHEESE_BASIC).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, INGREDIENT_NAME_DESC_CHEESE + INGREDIENT_UNIT_DESC_CHEESE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new AddIngredientCommand(expectedIngredient));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIngredientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // missing ingredientName"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_QUANTITY_DESC_CHEESE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + INGREDIENT_UNIT_DESC_CHEESE, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // missing ingredientName prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_VALID_NAME_CHEESE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_CHEESE + INGREDIENT_UNIT_DESC_CHEESE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // missing ingredientUnit"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_NAME_DESC_CHEESE + INGREDIENT_QUANTITY_DESC_CHEESE, expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // missing ingredientUnit prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_CHEESE + INGREDIENT_VALID_UNIT_CHEESE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientName"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_INVALID_NAME_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_CHEESE + INGREDIENT_UNIT_DESC_CHEESE"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_WARNINGAMT_DESC_CHEESE, IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientQuantity, quantity is non-numerical"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_INVALID_QUANTITY_NONINTEGER_DESC + INGREDIENT_UNIT_DESC_CHEESE"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_WARNINGAMT_DESC_CHEESE, IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientQuantity, quantity is non-positive"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_INVALID_QUANTITY_NEGATIVES_DESC"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_UNIT_DESC_CHEESE + INGREDIENT_WARNINGAMT_DESC_CHEESE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientUnit"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_CHEESE + INGREDIENT_INVALID_UNIT_DESC"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_WARNINGAMT_DESC_CHEESE, IngredientUnit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //invalid ingredientWarningAmount"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_NAME_DESC_CHEESE"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_QUANTITY_DESC_CHEESE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + INGREDIENT_INVALID_UNIT_DESC + INGREDIENT_INVALID_WARNINGAMOUNT_DESC,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                IngredientUnit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 6,
      "hiyingnn": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ingredient/ConsumeIngredientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_QUANTITY_DESC_CHEESE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_VALID_QUANTITY_CHEESE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.ConsumeIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.ConsumeIngredientCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class ConsumeIngredientCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConsumeIngredientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private ConsumeIngredientCommandParser parser \u003d new ConsumeIngredientCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_missingArguments_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //missing ingredientQuantity and its prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //missing index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_QUANTITY_DESC_CHEESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_validArgs_returnsConsumeIngredientCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_DESC + INGREDIENT_QUANTITY_DESC_CHEESE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new ConsumeIngredientCommand(INDEX_FIRST_INGREDIENT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        new IngredientQuantity(Integer.parseInt(INGREDIENT_VALID_QUANTITY_CHEESE))));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ingredient/DeleteIngredientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.DeleteIngredientCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * outside of the DeleteIngredientCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * same path through the DeleteIngredientCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class DeleteIngredientCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private DeleteIngredientCommandParser parser \u003d new DeleteIngredientCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ingredient/RestockIngredientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.logic.parser.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_QUANTITY_DESC_CHEESE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.TYPICAL_CONSUME_AMOUNT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.commands.RestockIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.logic.parser.RestockIngredientCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestockIngredientCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RestockIngredientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private RestockIngredientCommandParser parser \u003d new RestockIngredientCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_missingArguments_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //missing ingredientQuantity and its prefix"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //missing index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseFailure(parser, INGREDIENT_QUANTITY_DESC_CHEESE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void parse_validArgs_returnsRestockIngredientCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_DESC + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        + PREFIX_INGREDIENT_QUANTITY + TYPICAL_CONSUME_AMOUNT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new RestockIngredientCommand(INDEX_FIRST_INGREDIENT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        new IngredientQuantity(TYPICAL_CONSUME_AMOUNT)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(new RestaurantBook(), new RestaurantBook(modelManager.getRestaurantBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(null, modelManager.getSelectedMember());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userPrefs.setRestaurantBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userPrefs.setRestaurantBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        modelManager.setRestaurantBookFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        modelManager.setRestaurantBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(path, modelManager.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void hasMember_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.hasMember(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void hasMember_memberNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(modelManager.hasMember(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void hasMember_memberInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.addMember(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(modelManager.hasMember(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void deleteMember_memberIsSelectedAndFirstMemberInFilteredMemberList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.addMember(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        modelManager.setSelectedMember(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.deleteMember(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(null, modelManager.getSelectedMember());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void deleteMember_memberIsSelectedAndSecondMemberInFilteredMemberList_firstMemberSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.addMember(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.addMember(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredMemberList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        modelManager.setSelectedMember(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.deleteMember(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedMember());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_memberIsSelected_selectedMemberUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.addMember(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        modelManager.setSelectedMember(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Member updatedAlice \u003d new MemberBuilder(ALICE).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.setMember(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedMember());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void getFilteredMemberList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.getFilteredMemberList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setSelectedMember_memberNotInFilteredMemberList_throwsMemberNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(ItemNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        modelManager.setSelectedMember(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setSelectedMember_memberInFilteredMemberList_setsSelectedMember() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        modelManager.addMember(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredMemberList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        modelManager.setSelectedMember(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedMember());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limli"
        },
        "content": "        RestaurantBook restaurantBook \u003d new AddressBookBuilder().withMember(ALICE).withMember(BENSON).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook differentRestaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        modelManager \u003d new ModelManager(restaurantBook, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(restaurantBook, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different restaurantBook -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentRestaurantBook, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        modelManager.updateFilteredMemberList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(restaurantBook, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        modelManager.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        differentUserPrefs.setRestaurantBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(restaurantBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 13,
      "lingyanhao": 17,
      "hiyingnn": 16,
      "-": 127,
      "limli": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RestaurantBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class RestaurantBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(Collections.emptyList(), restaurantBook.getMemberList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(newData, restaurantBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void resetData_withDuplicateMembers_throwsDuplicateMemberException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        // Two members with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e newMembers \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        RestaurantBookStub newData \u003d new RestaurantBookStub(newMembers);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(DuplicateItemException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void hasMember_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        restaurantBook.hasMember(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void hasMember_memberNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(restaurantBook.hasMember(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void hasMember_memberInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        restaurantBook.addMember(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(restaurantBook.hasMember(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void hasMember_memberWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        restaurantBook.addMember(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(restaurantBook.hasMember(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void getMemberList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        restaurantBook.getMemberList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        restaurantBook.addMember(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        restaurantBook.addMember(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limli"
        },
        "content": "     * A stub ReadOnlyRestaurantBook whose members list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static class RestaurantBookStub implements ReadOnlyRestaurantBook {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limli"
        },
        "content": "        private final ObservableList\u003cMember\u003e members \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limli"
        },
        "content": "        RestaurantBookStub(Collection\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "            this.members.setAll(members);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public ObservableList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            return members;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public ObservableList\u003cStaff\u003e getStaffList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        public Capacity getCapacity() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 39,
      "hiyingnn": 11,
      "-": 92,
      "limli": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/StatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.TypicalMembers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final ObservableList\u003cBooking\u003e emptyBookings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final ObservableList\u003cBooking\u003e bookings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        bookings.add(new Booking(new BookingWindow(LocalDateTime.now()), TypicalMembers.ALICE, new BookingSize(5)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        bookings.add(new Booking(new BookingWindow(LocalDateTime.now().minusDays(1)), TypicalMembers.ALICE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "                new BookingSize(6)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        bookings.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Statistics(null, 30));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void constructor_invalidDays_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(emptyBookings, 0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(emptyBookings,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "                Statistics.getMaxDays() + 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void generateGraphData_valid_returnsList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cXYChart.Data\u003cString, Integer\u003e\u003e datas \u003d new Statistics(emptyBookings, 10).generateGraphData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(datas.size() \u003d\u003d 10);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (XYChart.Data\u003cString, Integer\u003e data : datas) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "            assertEquals(data.getYValue(), Integer.valueOf(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        datas \u003d new Statistics(bookings, 2).generateGraphData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(datas.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(datas.get(0).getYValue(), Integer.valueOf(6));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(datas.get(1).getYValue(), Integer.valueOf(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setRestaurantBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedRestaurantBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class VersionedRestaurantBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final ReadOnlyRestaurantBook addressBookWithAmy \u003d new AddressBookBuilder().withMember(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final ReadOnlyRestaurantBook addressBookWithBob \u003d new AddressBookBuilder().withMember(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final ReadOnlyRestaurantBook addressBookWithCarl \u003d new AddressBookBuilder().withMember(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final ReadOnlyRestaurantBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertThrows(VersionedRestaurantBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertThrows(VersionedRestaurantBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertThrows(VersionedRestaurantBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertThrows(VersionedRestaurantBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook differentAddressBookList \u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private void assertAddressBookListStatus(VersionedRestaurantBook versionedAddressBook,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                                             List\u003cReadOnlyRestaurantBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                                             ReadOnlyRestaurantBook expectedCurrentState,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                                             List\u003cReadOnlyRestaurantBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(new RestaurantBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        for (ReadOnlyRestaurantBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            assertEquals(expectedAddressBook, new RestaurantBook(versionedAddressBook));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        for (ReadOnlyRestaurantBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            assertEquals(expectedAddressBook, new RestaurantBook(versionedAddressBook));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Creates and returns a {@code VersionedRestaurantBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code VersionedRestaurantBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private VersionedRestaurantBook prepareAddressBookList(ReadOnlyRestaurantBook... addressBookStates) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        VersionedRestaurantBook versionedAddressBook \u003d new VersionedRestaurantBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedRestaurantBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 44,
      "-": 249,
      "limli": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/booking/CapacityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class CapacityTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Capacity(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void constructor_invalidCapacity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String invalidCapacity \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Capacity(invalidCapacity));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void isValidCapacity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // null capacity"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Capacity.isValidCapacity(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // valid integer values"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(Capacity.isValidCapacity(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(Capacity.isValidCapacity(Capacity.MAX_CAPACITY));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // valid string values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(Capacity.isValidCapacity(\"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(Capacity.isValidCapacity(Integer.toString(Capacity.MAX_CAPACITY)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // invalid integer values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(-1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(Integer.MAX_VALUE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(Integer.MIN_VALUE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(Capacity.MAX_CAPACITY + 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // strings that do not correspond to any integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(\"abc\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(\"\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(\"-\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // strings that correspond to an integer, not in range"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(\"0\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(\"-1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(\"99999999999999999\")); // integer overflow test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(\"-99999999999999999\")); // integer underflow test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(Capacity.isValidCapacity(Integer.toString(Capacity.MAX_CAPACITY + 1)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void canAccommodate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cBooking\u003e bookingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        LocalDateTime startTime0600 \u003d LocalDateTime.of(2019, Month.MARCH, 16, 6, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        LocalDateTime startTime0630 \u003d LocalDateTime.of(2019, Month.MARCH, 16, 6, 30);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        LocalDateTime startTime0659 \u003d LocalDateTime.of(2019, Month.MARCH, 16, 6, 59);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        LocalDateTime startTime0700 \u003d LocalDateTime.of(2019, Month.MARCH, 16, 7, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookingList.add(new Booking(new BookingWindow(startTime0600), ALICE, new BookingSize(5)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookingList.add(new Booking(new BookingWindow(startTime0630), BOB, new BookingSize(3)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookingList.add(new Booking(new BookingWindow(startTime0659), CARL, new BookingSize(2)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        bookingList.add(new Booking(new BookingWindow(startTime0700), DANIEL, new BookingSize(5)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // at 0700, alice would have left. there are at most 10 persons in the restaurant at any point in time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // therefore a capacity of 9 would be insufficient"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(new Capacity(9).canAccommodate(bookingList));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // a capacity of 10 is sufficient"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(new Capacity(10).canAccommodate(bookingList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new IngredientName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void constructor_invalidIngredientName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String emptyName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new IngredientName(emptyName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void testIsValidIngredientName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // null ingredientName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e IngredientName.isValidIngredientName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"^\")); // only contains non-alphabet symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"2\")); // only contains non-alphabet integers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"chee*3se\")); // contains non-alphabet characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"tomato\")); //alphabets only no space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"tomato sauce\")); // alphabets only with space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientQuantityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientQuantityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void constructor_invalidIngredientQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            -\u003e new IngredientQuantity(-1)); //negative not allowed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void testIsValidIngredientQuantity() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientQuantity"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"-1\")); // negative not allowed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"+1\")); // positive sign not allowed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Long outOfRange \u003d new Long(Integer.MAX_VALUE) + 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientQuantity"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .isValidIngredientQuantity(Long.toString(outOfRange))); // out of range not allowed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // valid ingredientQuantity"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"943\")); // positive integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_VALID_NAME_TOMATO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_VALID_QUANTITY_TOMATO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_VALID_UNIT_TOMATO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_VALID_WARNINGAMT_TOMATO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHEESE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.TOMATO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void testIsSameIngredient() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(CHEESE.isSameItem(CHEESE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.isSameItem(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //different ingredient -- \u003e false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.isSameItem(TOMATO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //different ingredient name, all else the same -\u003e false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientNameCheese \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder(CHEESE).withIngredientName(INGREDIENT_VALID_NAME_TOMATO).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.isSameItem(editedIngredientNameCheese));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //different ingredient quantity, all else the same -\u003e true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientQuantityCheese \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder(CHEESE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        .withIngredientQuantity(Integer.parseInt(INGREDIENT_VALID_QUANTITY_TOMATO)).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(CHEESE.isSameItem(editedIngredientQuantityCheese));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //different ingredient warning amount, all else the same -\u003e true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientWarningAmtCheese \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder(CHEESE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                        .withIngredientWarningAmount(Integer.parseInt(INGREDIENT_VALID_WARNINGAMT_TOMATO)).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(CHEESE.isSameItem(editedIngredientWarningAmtCheese));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        //different ingredient unit, all else the same -\u003e true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientUnitCheese \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new IngredientBuilder(CHEESE).withIngredientUnit(INGREDIENT_VALID_UNIT_TOMATO).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(CHEESE.isSameItem(editedIngredientUnitCheese));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient cheeseCopy \u003d new IngredientBuilder(CHEESE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(CHEESE.equals(cheeseCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(CHEESE.equals(CHEESE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.equals(TOMATO));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different ingredient name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientNameCheese \u003d new IngredientBuilder(CHEESE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientName(INGREDIENT_VALID_NAME_TOMATO).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.equals(editedIngredientNameCheese));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different ingredient quantity -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientQuantityCheese \u003d new IngredientBuilder(CHEESE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientQuantity(Integer.parseInt(INGREDIENT_VALID_QUANTITY_TOMATO)).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.equals(editedIngredientQuantityCheese));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different ingredient unit -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientUnitCheese \u003d new IngredientBuilder(CHEESE)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientUnit(INGREDIENT_VALID_UNIT_TOMATO).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.equals(editedIngredientUnitCheese));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // different ignredient warning amount -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient editedIngredientWarningAmtCheese \u003d new IngredientBuilder(CHEESE)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientWarningAmount(Integer.parseInt(INGREDIENT_VALID_WARNINGAMT_TOMATO)).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(CHEESE.equals(editedIngredientWarningAmtCheese));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new IngredientUnit(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void constructor_invalidIngredientUnit_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        String emptyName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new IngredientUnit(emptyName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void testIsValidIngredientUnit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // null unit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e IngredientUnit.isValidIngredientUnit(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientUnit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientUnit.isValidIngredientUnit(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientUnit.isValidIngredientUnit(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientUnit.isValidIngredientUnit(\"^\")); // only contains non-alphabet symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientUnit.isValidIngredientUnit(\"2\")); // only contains non-alphabet integers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientUnit.isValidIngredientUnit(\"sac$k\")); // contains non-alphabet characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // valid ingredientUnit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(IngredientUnit.isValidIngredientUnit(\"sacks\")); //alphabets only no space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(IngredientUnit.isValidIngredientUnit(\"full sacks\")); // alphabets only with space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientWarningAmountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientWarningAmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void constructor_invalidIngredientWarningAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            -\u003e new IngredientWarningAmount(-1)); //negative not allowed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public void testIsValidIngredientWarningAmount() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // invalid ingredientWarningAmount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientWarningAmount.isValidIngredientWarningAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientWarningAmount.isValidIngredientWarningAmount(\"-1\")); // negative not allowed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientWarningAmount.isValidIngredientWarningAmount(\"+1\")); // positive sign not allowed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Long outOfRange \u003d new Long(Integer.MAX_VALUE) + 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertFalse(IngredientQuantity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .isValidIngredientQuantity(Long.toString(outOfRange))); // out of range not allowed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        // valid ingredientWarningAmount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertTrue(IngredientWarningAmount.isValidIngredientWarningAmount(\"943\")); // positive integer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Appointment(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void constructor_invalidAppointment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String invalidAppointment \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Appointment(invalidAppointment));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void isValidAppointment() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // null appointment name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // invalid appointment name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(Appointment.isValidAppointmentName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(Appointment.isValidAppointmentName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(Appointment.isValidAppointmentName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(Appointment.isValidAppointmentName(\"server*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // valid appointment name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(Appointment.isValidAppointmentName(\"floor manager\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(Appointment.isValidAppointmentName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(Appointment.isValidAppointmentName(\"Table 2 Server\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(Appointment.isValidAppointmentName(\"Floor Manager\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(Appointment.isValidAppointmentName(\"Manager of the 2nd Branch\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MemberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void isSameMember() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(ALICE.isSameMember(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(ALICE.isSameMember(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Member editedAlice \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new MemberBuilder(ALICE).withPhone(MEMBER_VALID_PHONE_BOB).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(ALICE.isSameMember(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new MemberBuilder(ALICE).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(ALICE.isSameMember(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new MemberBuilder(ALICE).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(ALICE.isSameMember(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new MemberBuilder(ALICE).withPhone(MEMBER_VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(ALICE.isSameMember(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        editedAlice \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(ALICE.isSameMember(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member aliceCopy \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different member -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(ALICE).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new MemberBuilder(ALICE).withPhone(MEMBER_VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new MemberBuilder(ALICE).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 11,
      "-": 55,
      "limli": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different member -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "-": 65,
      "limli": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/StaffTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STAFF_VALID_APPOINTMENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.StaffBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void isSameStaff() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ALICE.isSameStaff(ALICE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.isSameStaff(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different phone, email and appointment-\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Staff editedAlice \u003d new StaffBuilder(ALICE).withPhone(MEMBER_VALID_PHONE_BOB).withEmail(MEMBER_VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withAppointment(STAFF_VALID_APPOINTMENT_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.isSameStaff(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new StaffBuilder(ALICE).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.isSameStaff(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same name, same phone, same appointment, different email -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new StaffBuilder(ALICE).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ALICE.isSameStaff(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same name, same email, same appointment, different phone -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new StaffBuilder(ALICE).withPhone(MEMBER_VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ALICE.isSameStaff(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same name, same email, same phone, different appointment -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new StaffBuilder(ALICE).withAppointment(STAFF_VALID_APPOINTMENT_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ALICE.isSameStaff(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff aliceCopy \u003d new StaffBuilder(ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different staff -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Staff editedAlice \u003d new StaffBuilder(ALICE).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new StaffBuilder(ALICE).withPhone(MEMBER_VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new StaffBuilder(ALICE).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedAlice \u003d new StaffBuilder(ALICE).withAppointment(STAFF_VALID_APPOINTMENT_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 72,
      "hiyingnn": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueItemListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.UniqueItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final UniqueItemList\u003cMember\u003e uniqueItemList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_memberNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(uniqueItemList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_memberInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(uniqueItemList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_memberWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(uniqueItemList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void add_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void add_duplicateMember_throwsDuplicateMemberException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(DuplicateItemException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_nullTargetMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItem(null, ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_nullEditedMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItem(ALICE, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_targetMemberNotInList_throwsMemberNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(ItemNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItem(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberIsSameMember_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItem(ALICE, ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueItemList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedUniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItem(ALICE, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueItemList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedUniqueItemList.add(editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItem(ALICE, BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueItemList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberHasNonUniqueIdentity_throwsDuplicateMemberException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(DuplicateItemException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItem(ALICE, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void remove_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.remove(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void remove_memberDoesNotExist_throwsMemberNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(ItemNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void remove_existingMember_removesMember() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.remove(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_nullUniqueMemberList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItems((UniqueItemList\u003cMember\u003e) null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItems((List\u003cMember\u003e) null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_uniqueMemberList_replacesOwnListWithProvidedUniqueMemberList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueItemList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.setItems(expectedUniqueItemList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueItemList.setItems((List\u003cMember\u003e) null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e memberList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueItemList.setItems(memberList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueItemList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_listWithDuplicateMembers_throwsDuplicateMemberException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e listWithDuplicateMembers \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(DuplicateItemException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueItemList.setItems(listWithDuplicateMembers);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        uniqueItemList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 151,
      "limli": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueMemberListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.UniqueItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "public class UniqueMemberListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final UniqueItemList\u003cMember\u003e uniqueMemberList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_memberNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(uniqueMemberList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_memberInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(uniqueMemberList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void contains_memberWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(uniqueMemberList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void add_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void add_duplicateMember_throwsDuplicateMemberException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(DuplicateItemException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_nullTargetMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItem(null, ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_nullEditedMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItem(ALICE, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_targetMemberNotInList_throwsMemberNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(ItemNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItem(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberIsSameMember_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItem(ALICE, ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueMemberList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedUniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedAlice \u003d new MemberBuilder(ALICE).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItem(ALICE, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limli"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueMemberList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedUniqueMemberList.add(editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItem(ALICE, BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limli"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueMemberList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedUniqueMemberList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMember_editedMemberHasNonUniqueIdentity_throwsDuplicateMemberException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(BOB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(DuplicateItemException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItem(ALICE, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void remove_nullMember_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.remove(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void remove_memberDoesNotExist_throwsMemberNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(ItemNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void remove_existingMember_removesMember() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.remove(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueMemberList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_nullUniqueMemberList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItems((UniqueItemList\u003cMember\u003e) null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_uniqueMemberList_replacesOwnListWithProvidedUniqueMemberList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limli"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueMemberList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedUniqueMemberList.add(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItems(expectedUniqueMemberList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItems((List\u003cMember\u003e) null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.add(ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e memberList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItems(memberList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limli"
        },
        "content": "        UniqueItemList\u003cMember\u003e expectedUniqueMemberList \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedUniqueMemberList.add(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedUniqueMemberList, uniqueMemberList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void setMembers_listWithDuplicateMembers_throwsDuplicateMemberException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limli"
        },
        "content": "        List\u003cMember\u003e listWithDuplicateMembers \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(DuplicateItemException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.setItems(listWithDuplicateMembers);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limli"
        },
        "content": "        uniqueMemberList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedMemberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.storage.JsonAdaptedMember.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "public class JsonAdaptedMemberTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final int INVALID_LOYALTY_POINTS \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final int VALID_LOYALTY_POINTS \u003d BENSON.getLoyaltyPoints().value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void toModelType_validMemberDetails_returnsMember() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d new JsonAdaptedMember(BENSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(BENSON, member.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "                new JsonAdaptedMember(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d new JsonAdaptedMember(null, VALID_PHONE, VALID_EMAIL, VALID_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "                new JsonAdaptedMember(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d new JsonAdaptedMember(VALID_NAME, null, VALID_EMAIL, VALID_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "                new JsonAdaptedMember(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d new JsonAdaptedMember(VALID_NAME, VALID_PHONE, null, VALID_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void toModelType_invalidLoyaltyPoints_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonAdaptedMember member \u003d new JsonAdaptedMember(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedMessage \u003d LoyaltyPoints.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "limli": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStaffTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStaff.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class JsonAdaptedStaffTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String INVALID_NAME \u003d \"B3n$0n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+65456789\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String INVALID_APPOINTMENT \u003d \"A+ Head Chef\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d BENSON.getAppointment().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_validStaffDetails_returnsStaff() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d new JsonAdaptedStaff(BENSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(BENSON, staff.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                new JsonAdaptedStaff(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d new JsonAdaptedStaff(null, VALID_PHONE, VALID_EMAIL, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                new JsonAdaptedStaff(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d new JsonAdaptedStaff(VALID_NAME, null, VALID_EMAIL, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                new JsonAdaptedStaff(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d new JsonAdaptedStaff(VALID_NAME, VALID_PHONE, null, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_invalidAppointment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                new JsonAdaptedStaff(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_APPOINTMENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d Appointment.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void toModelType_nullAppointment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        JsonAdaptedStaff staff \u003d new JsonAdaptedStaff(VALID_NAME, VALID_PHONE, VALID_EMAIL, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, staff::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonRestaurantBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class JsonRestaurantBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRestaurantBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRestaurantBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new JsonRestaurantBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .readRestaurantBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void readAddressBook_invalidMemberAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        readAddressBook(\"invalidMemberAddressBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void readAddressBook_invalidAndValidMemberAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "        readAddressBook(\"invalidAndValidMemberAddressBook.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        JsonRestaurantBookStorage jsonAddressBookStorage \u003d new JsonRestaurantBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        jsonAddressBookStorage.saveRestaurantBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ReadOnlyRestaurantBook readBack \u003d jsonAddressBookStorage.readRestaurantBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(original, new RestaurantBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        original.addMember(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        original.removeMember(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        jsonAddressBookStorage.saveRestaurantBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readRestaurantBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(original, new RestaurantBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        original.addMember(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        jsonAddressBookStorage.saveRestaurantBook(original); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readRestaurantBook().get(); // file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(original, new RestaurantBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private void saveAddressBook(ReadOnlyRestaurantBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new JsonRestaurantBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    .saveRestaurantBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        saveAddressBook(new RestaurantBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 3,
      "hiyingnn": 22,
      "-": 92,
      "limli": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableRestaurantBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.TypicalMembers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class JsonSerializableRestaurantBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRestaurantBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final Path TYPICAL_MEMBERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalMembersAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final Path INVALID_MEMBER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMemberAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final Path DUPLICATE_MEMBER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateMemberAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void toModelType_typicalMembersFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonSerializableRestaurantBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MEMBERS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                JsonSerializableRestaurantBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook restaurantBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        RestaurantBook typicalMembersRestaurantBook \u003d TypicalMembers.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(restaurantBookFromFile, typicalMembersRestaurantBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void toModelType_invalidMemberFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonSerializableRestaurantBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MEMBER_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                JsonSerializableRestaurantBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void toModelType_duplicateMembers_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        JsonSerializableRestaurantBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MEMBER_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                JsonSerializableRestaurantBook.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        thrown.expectMessage(JsonSerializableRestaurantBook.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 7,
      "-": 32,
      "limli": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        userPrefs.setRestaurantBookFilePath(Paths.get(\"data\", \"addressbook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        JsonRestaurantBookStorage addressBookStorage \u003d new JsonRestaurantBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "         * {@link JsonRestaurantBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonRestaurantBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        storageManager.saveRestaurantBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ReadOnlyRestaurantBook retrieved \u003d storageManager.readRestaurantBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(original, new RestaurantBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertNotNull(storageManager.getRestaurantBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 10,
      "-": 59,
      "limli": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": " *     {@code RestaurantBook ab \u003d new AddressBookBuilder().withMember(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private RestaurantBook restaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public AddressBookBuilder(RestaurantBook restaurantBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        this.restaurantBook \u003d restaurantBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Adds a new {@code Member} to the {@code RestaurantBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    public AddressBookBuilder withMember(Member member) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        restaurantBook.addMember(member);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public RestaurantBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return restaurantBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 1,
      "hiyingnn": 7,
      "-": 22,
      "limli": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookingBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A utility class to help with building Booking objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class BookingBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Member DEFAULT_CUSTOMER \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"2019-02-23T14:30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final int DEFAULT_BOOKING_SIZE \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Member customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingWindow bookingWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingSize numPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        customer \u003d DEFAULT_CUSTOMER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            bookingWindow \u003d ParserUtil.parseBookingWindow(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"This should not happen.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        numPersons \u003d new BookingSize(DEFAULT_BOOKING_SIZE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Sets the {@code Customer} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingBuilder withCustomer(Member customer) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Sets the {@code Date} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingBuilder withDate(String startTimeString) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.bookingWindow \u003d ParserUtil.parseBookingWindow(startTimeString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Sets the {@code numPersons} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public BookingBuilder withNumPersons(int numPersons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.numPersons \u003d new BookingSize(numPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public Booking build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new Booking(bookingWindow, customer, numPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookingUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddBookingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A utility class for Booking."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class BookingUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns an add command string for adding the {@code member}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static String getAddBookingCommand(String timeString, Index customerIndex, int numPersons) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return \" \" + PREFIX_START_TIME + timeString + \" \" + PREFIX_CUSTOMER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + customerIndex.getOneBased() + \" \" + PREFIX_NUMBER_PERSONS + numPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Returns an add command string for adding the {@code member}, using the command alias."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static String getAddBookingCommandAlias(String timeString, Index customerIndex, int numPersons) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return AddBookingCommand.COMMAND_ALIAS + \" \" + PREFIX_START_TIME + \"2019-02-23 14:30\" + PREFIX_CUSTOMER"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + customerIndex.getOneBased() + \" \" + PREFIX_NUMBER_PERSONS + numPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CustomerIndexedBookingBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CustomerIndexedBooking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A utility class to help with building {@code CustomerIndexedBooking} objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class CustomerIndexedBookingBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Index DEFAULT_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"2019-02-23T14:30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final int DEFAULT_BOOKING_SIZE \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private Index memberIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingWindow bookingWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private BookingSize numPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CustomerIndexedBookingBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        memberIndex \u003d DEFAULT_INDEX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            bookingWindow \u003d ParserUtil.parseBookingWindow(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"This should not happen.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        numPersons \u003d new BookingSize(DEFAULT_BOOKING_SIZE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Sets the {@code memberIndex} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CustomerIndexedBookingBuilder withIndex(Index memberIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.memberIndex \u003d memberIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Sets the {@code Date} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CustomerIndexedBookingBuilder withDate(String startTimeString) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.bookingWindow \u003d ParserUtil.parseBookingWindow(startTimeString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Sets the {@code numPersons} of the {@code Booking} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CustomerIndexedBookingBuilder withNumPersons(int numPersons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        this.numPersons \u003d new BookingSize(numPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public CustomerIndexedBooking build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new CustomerIndexedBooking(bookingWindow, memberIndex, numPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditMemberDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": " * A utility class to help with building EditMemberDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "public class EditMemberDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    private EditMemberDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor \u003d new EditMemberDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptorBuilder(EditMemberDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.descriptor \u003d new EditMemberDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns an {@code EditMemberDescriptor} with fields containing {@code member}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptorBuilder(Member member) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor \u003d new EditMemberDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.setName(member.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.setPhone(member.getPhone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.setEmail(member.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code Name} of the {@code EditMemberDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditMemberDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code Email} of the {@code EditMemberDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code LoyaltyPoints} of the {@code EditMemberDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptorBuilder withLoyaltyPoints(int loyaltyPoints) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.setLoyaltyPoints(new LoyaltyPoints(loyaltyPoints));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "    public EditMemberDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IngredientBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientWarningAmount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A utility class to help with building Ingredient objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_NAME \u003d \"cheese\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final int DEFAULT_INGREDIENT_QUANTITY \u003d 8;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_UNIT \u003d \"pounds\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final int DEFAULT_INGREDIENT_WARNINGAMOUNT \u003d \u00272\u0027;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientName ingredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientUnit ingredientUnit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private IngredientWarningAmount ingredientWarningAmount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientName \u003d new IngredientName(DEFAULT_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientQuantity \u003d new IngredientQuantity(DEFAULT_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientUnit \u003d new IngredientUnit(DEFAULT_INGREDIENT_UNIT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientWarningAmount \u003d new IngredientWarningAmount(DEFAULT_INGREDIENT_WARNINGAMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Initializes the IngredientBuilder with the data of {@code ingredientToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientBuilder(Ingredient ingredientToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientName \u003d ingredientToCopy.getIngredientName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientQuantity \u003d ingredientToCopy.getIngredientQuantity();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientUnit \u003d ingredientToCopy.getIngredientUnit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientWarningAmount \u003d ingredientToCopy.getIngredientWarningAmount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Sets the {@code ingredientName} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientBuilder withIngredientName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientName \u003d new IngredientName(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Sets the {@code ingredientQuantity} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientBuilder withIngredientQuantity(int quantity) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientQuantity \u003d new IngredientQuantity(quantity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Sets the {@code ingredientUnit} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientBuilder withIngredientUnit(String unit) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientUnit \u003d new IngredientUnit(unit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Sets the {@code ingredientWarningAmount} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public IngredientBuilder withIngredientWarningAmount(int warningAmount) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        ingredientWarningAmount \u003d new IngredientWarningAmount(warningAmount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new Ingredient(ingredientName, ingredientQuantity, ingredientUnit, ingredientWarningAmount);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MemberBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": " * A utility class to help with building Member objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final int DEFAULT_LOYALTY_POINTS \u003d 12;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "    private LoyaltyPoints loyaltyPoints;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "        loyaltyPoints \u003d new LoyaltyPoints(DEFAULT_LOYALTY_POINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Initializes the MemberBuilder with the data of {@code memberToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberBuilder(Member memberToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        name \u003d memberToCopy.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        phone \u003d memberToCopy.getPhone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        email \u003d memberToCopy.getEmail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        loyaltyPoints \u003d memberToCopy.getLoyaltyPoints();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code Name} of the {@code Member} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code Phone} of the {@code Member} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code Email} of the {@code Member} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Sets the {@code Email} of the {@code Member} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberBuilder withLoyaltyPoints(int loyaltyPoints) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "        this.loyaltyPoints \u003d new LoyaltyPoints(loyaltyPoints);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "    public Member build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "        return new Member(name, phone, email, loyaltyPoints);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "limli": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MemberUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOYALTY_POINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": " * A utility class for Member."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns an add command string for adding the {@code member}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static String getAddCommand(Member member) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return AddMemberCommand.COMMAND_WORD + \" \" + getMemberDetails(member);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns an add command string for adding the {@code member}, using the command alias."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static String getAddCommandAlias(Member member) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return AddMemberCommand.COMMAND_ALIAS + \" \" + getMemberDetails(member);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns the part of command string for the given {@code member}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static String getMemberDetails(Member member) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        sb.append(PREFIX_NAME + member.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        sb.append(PREFIX_PHONE + member.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        sb.append(PREFIX_EMAIL + member.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        sb.append(PREFIX_LOYALTY_POINTS + Integer.toString(member.getLoyaltyPoints().value) + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns the part of command string for the given {@code EditMemberDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static String getEditMemberDescriptorDetails(EditMemberDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        descriptor.getLoyaltyPoints().ifPresent("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "            loyaltyPoints -\u003e sb.append(PREFIX_LOYALTY_POINTS).append(loyaltyPoints.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 4,
      "lingyanhao": 3,
      "-": 29,
      "limli": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StaffBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * A utility class to help with building Staff objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Jack Smith\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"91234567\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"jacksmith@example.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String DEFAILT_APPOINTMENT \u003d \"Chef\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private Appointment appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        appointment \u003d new Appointment(DEFAILT_APPOINTMENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Initializes the StaffBuilder with the data of {@code staffToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffBuilder(Staff staffToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        name \u003d staffToCopy.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        phone \u003d staffToCopy.getPhone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        email \u003d staffToCopy.getEmail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        appointment \u003d staffToCopy.getAppointment();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the {@code Name} of the {@code Staff} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the {@code Phone} of the {@code Staff} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the {@code Email} of the {@code Staff} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Staff} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public StaffBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public Staff build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return new Staff(name, phone, email, appointment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StaffUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddStaffCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * A utility class for Staff."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns an add command string for adding the {@code staff}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static String getAddCommand(Staff staff) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return AddStaffCommand.COMMAND_WORD + \" \" + getStaffDetails(staff);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns an add command string for adding the {@code staff}, using the command alias."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static String getAddCommandAlias(Staff staff) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return AddStaffCommand.COMMAND_ALIAS + \" \" + getStaffDetails(staff);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns the part of command string for the given {@code staff}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static String getStaffDetails(Staff staff) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        sb.append(PREFIX_NAME + staff.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        sb.append(PREFIX_PHONE + staff.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        sb.append(PREFIX_EMAIL + staff.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        sb.append(PREFIX_APPOINTMENT + staff.getAppointment().appointmentName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 40,
      "lingyanhao": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns the middle index of the member in the {@code model}\u0027s member list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMemberList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns the last index of the member in the {@code model}\u0027s member list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns the member in the {@code model}\u0027s member list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static Member getMember(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return model.getFilteredMemberList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 3,
      "-": 47,
      "limli": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBookings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " * A utility class containing a list of {@code Booking} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class TypicalBookings {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final LocalDateTime START_TIME \u003d LocalDateTime.of(2019, 2, 23, 14, 30);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Booking ALICE_BOOKING \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            new Booking(new BookingWindow(START_TIME), ALICE, new BookingSize(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Booking BENSON_BOOKING \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            new Booking(new BookingWindow(START_TIME.plusHours(1)), BENSON, new BookingSize(5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Booking CARL_BOOKING \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            new Booking(new BookingWindow(START_TIME.plusHours(1).plusDays(1)), CARL, new BookingSize(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Booking DANIEL_BOOKING \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            new Booking(new BookingWindow(START_TIME.minusDays(1)), DANIEL, new BookingSize(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static RestaurantBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        RestaurantBook ab \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        // members should be loaded first before bookings"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        for (Member member: TypicalMembers.getTypicalMembers()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            ab.addMember(member);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        for (Booking booking: getTypicalBookings()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            ab.addBooking(booking);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static List\u003cBooking\u003e getTypicalBookings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DANIEL_BOOKING, ALICE_BOOKING, BENSON_BOOKING, CARL_BOOKING));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Index INDEX_FIRST_INGREDIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Index INDEX_SECOND_INGREDIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Index INDEX_THIRD_INGREDIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Index INDEX_FIRST_STAFF \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Index INDEX_SECOND_STAFF \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Index INDEX_THIRD_STAFF \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 4,
      "lingyanhao": 3,
      "hiyingnn": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredients.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A utility class containing a list of {@code Ingredient} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Ingredient CHEESE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new IngredientBuilder().withIngredientName(\"cheese\").withIngredientQuantity(4)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    .withIngredientUnit(\"pounds\").withIngredientWarningAmount(3).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Ingredient CHEESE_BASIC \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new IngredientBuilder().withIngredientName(\"cheese\").withIngredientQuantity(0)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    .withIngredientUnit(\"pounds\").withIngredientWarningAmount(0).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Ingredient TOMATO \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new IngredientBuilder().withIngredientName(\"tomato\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientQuantity(5).withIngredientUnit(\"pieces\").withIngredientWarningAmount(2).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Ingredient COFFEE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new IngredientBuilder().withIngredientName(\"coffee\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientQuantity(10).withIngredientUnit(\"sacks\").withIngredientWarningAmount(5).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Ingredient CHICKEN \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new IngredientBuilder().withIngredientName(\"chicken\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientQuantity(100).withIngredientUnit(\"full chickens\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientWarningAmount(20).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Ingredient RICE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new IngredientBuilder().withIngredientName(\"rice\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientQuantity(20).withIngredientUnit(\"sacks\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientWarningAmount(6).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Ingredient JUICE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new IngredientBuilder().withIngredientName(\"juice\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientQuantity(5).withIngredientUnit(\"bottles\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withIngredientWarningAmount(1).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final int TYPICAL_RESTOCK_AMOUNT \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final int TYPICAL_CONSUME_AMOUNT \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private TypicalIngredients() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * Returns an {@code RestaurantBook} with all the typical ingredients."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static RestaurantBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook ab \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        for (Ingredient ingred : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            ab.addIngredient(ingred);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CHEESE, TOMATO, COFFEE, CHICKEN, RICE, JUICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 1,
      "hiyingnn": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMembers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_LOYALTY_POINTS_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_LOYALTY_POINTS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": " * A utility class containing a list of {@code Member} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "public class TypicalMembers {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member ALICE \u003d new MemberBuilder().withName(\"Alice Pauline\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"alice@example.com\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member BENSON \u003d new MemberBuilder().withName(\"Benson Meier\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"johnd@example.com\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member CARL \u003d new MemberBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member DANIEL \u003d new MemberBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"cornelia@example.com\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member ELLE \u003d new MemberBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member FIONA \u003d new MemberBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member GEORGE \u003d new MemberBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member HOON \u003d new MemberBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static final Member IDA \u003d new MemberBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "    // Manually added - Member\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Member AMY \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new MemberBuilder().withName(MEMBER_VALID_NAME_AMY).withPhone(MEMBER_VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "            .withEmail(MEMBER_VALID_EMAIL_AMY).withLoyaltyPoints(MEMBER_VALID_LOYALTY_POINTS_AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Member BOB \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            new MemberBuilder().withName(MEMBER_VALID_NAME_BOB).withPhone(MEMBER_VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "            .withEmail(MEMBER_VALID_EMAIL_BOB).withLoyaltyPoints(MEMBER_VALID_LOYALTY_POINTS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "    private TypicalMembers() {} // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns an {@code RestaurantBook} with all the typical members."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static RestaurantBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        RestaurantBook ab \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (Member member : getTypicalMembers()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            ab.addMember(member);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static List\u003cMember\u003e getTypicalMembers() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 9,
      "lingyanhao": 1,
      "hiyingnn": 13,
      "-": 27,
      "limli": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStaff.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STAFF_VALID_APPOINTMENT_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STAFF_VALID_APPOINTMENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " * A utility class containing a list of {@code Staff} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class TypicalStaff {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff ALICE \u003d new StaffBuilder().withName(\"Alice Pauline\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"alice@example.com\").withAppointment(\"Server\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff BENSON \u003d new StaffBuilder().withName(\"Benson Meier\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"johnd@example.com\").withAppointment(\"Cook\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff CARL \u003d new StaffBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAppointment(\"Floor Manager\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff DANIEL \u003d new StaffBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAppointment(\"Bartender\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff ELLE \u003d new StaffBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"werner@example.com\").withAppointment(\"Cook\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff FIONA \u003d new StaffBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAppointment(\"Manager\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff GEORGE \u003d new StaffBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"anna@example.com\").withAppointment(\"Cleaner\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff HOON \u003d new StaffBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAppointment(\"Server\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final Staff IDA \u003d new StaffBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            .withEmail(\"hans@example.com\").withAppointment(\"Cook\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    // Manually added - Staff\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Staff AMY \u003d new StaffBuilder().withName(MEMBER_VALID_NAME_AMY).withPhone(MEMBER_VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withEmail(MEMBER_VALID_EMAIL_AMY).withAppointment(STAFF_VALID_APPOINTMENT_AMY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public static final Staff BOB \u003d new StaffBuilder().withName(MEMBER_VALID_NAME_BOB).withPhone(MEMBER_VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            .withEmail(MEMBER_VALID_EMAIL_BOB).withAppointment(STAFF_VALID_APPOINTMENT_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private TypicalStaff() {} // prevents instantiation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns an {@code RestaurantBook} with all the typical staff."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static RestaurantBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        RestaurantBook ab \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        for (Staff staff : getTypicalStaff()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            ab.addStaff(staff);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static List\u003cStaff\u003e getTypicalStaff() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 56,
      "lingyanhao": 1,
      "hiyingnn": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BookingCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysBooking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.BookingCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.BookingBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class BookingCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Booking booking \u003d new BookingBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        BookingCard bookingCard \u003d new BookingCard(booking, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        uiPartRule.setUiPart(bookingCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardDisplay(bookingCard, booking, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Booking booking \u003d new BookingBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        BookingCard bookingCard \u003d new BookingCard(booking, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same booking, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        BookingCard copy \u003d new BookingCard(booking, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(bookingCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(bookingCard.equals(bookingCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(bookingCard.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(bookingCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different booking, same index -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Booking differentBooking \u003d new BookingBuilder().withNumPersons(8).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(bookingCard.equals(new BookingCard(differentBooking, 0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same booking, different index -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(bookingCard.equals(new BookingCard(booking, 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code staffCard} displays the details of {@code expectedStaff} correctly and matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private void assertCardDisplay(BookingCard bookingCard, Booking expectedBooking, int expectedId) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        BookingCardHandle bookingCardHandle \u003d new BookingCardHandle(bookingCard.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", bookingCardHandle.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // verify staff details are displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardDisplaysBooking(expectedBooking, bookingCardHandle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A GUI unit test class for RestaurantBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/IngredientCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysIngredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.IngredientCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class IngredientCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredient \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientName(\"corn\").withIngredientQuantity(12)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientUnit(\"kg\").withIngredientWarningAmount(3).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        IngredientCard ingredientCard \u003d new IngredientCard(ingredient, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        uiPartRule.setUiPart(ingredientCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardDisplay(ingredientCard, ingredient, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        Ingredient ingredient \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientName(\"corn\").withIngredientQuantity(12)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientUnit(\"kg\").withIngredientWarningAmount(3).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        IngredientCard ingredientCard \u003d new IngredientCard(ingredient, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same ingredient, same index -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        IngredientCard copy \u003d new IngredientCard(ingredient, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ingredientCard.equals(copy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(ingredientCard.equals(ingredientCard));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ingredientCard.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ingredientCard.equals(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different ingredient, same index -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Ingredient differentIngredient \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientName(\"differentName\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientQuantity(3).withIngredientUnit(\"differentUnit\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withIngredientWarningAmount(1).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ingredientCard.equals(new IngredientCard(differentIngredient, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same ingredient, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(ingredientCard.equals(new IngredientCard(ingredient, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code ingredientCard} displays the details of {@code expectedIngredient} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private void assertCardDisplay(IngredientCard ingredientCard, Ingredient expectedIngredient, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        IngredientCardHandle ingredientCardHandle \u003d new IngredientCardHandle(ingredientCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", ingredientCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // verify ingredient details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardDisplaysIngredient(expectedIngredient, ingredientCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 63,
      "hiyingnn": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/IngredientListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INGREDIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalIngredients;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysIngredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.IngredientCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.IngredientListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientUnit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ingredient.IngredientWarningAmount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class IngredientListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final ObservableList\u003cIngredient\u003e TYPICAL_INGREDIENTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            FXCollections.observableList(getTypicalIngredients());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 3500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final SimpleObjectProperty\u003cIngredient\u003e selectedIngredient \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private IngredientListPanelHandle ingredientListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        initUi(TYPICAL_INGREDIENTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_INGREDIENTS.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            ingredientListPanelHandle.navigateToCard(TYPICAL_INGREDIENTS.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Ingredient expectedIngredient \u003d TYPICAL_INGREDIENTS.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            IngredientCardHandle actualCard \u003d ingredientListPanelHandle.getIngredientCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            assertCardDisplaysIngredient(expectedIngredient, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void selection_modelSelectedIngredientChanged_selectionChanges() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        initUi(TYPICAL_INGREDIENTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Ingredient secondIngredient \u003d TYPICAL_INGREDIENTS.get(INDEX_SECOND_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.interact(() -\u003e selectedIngredient.set(secondIngredient));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        IngredientCardHandle expectedIngredient \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                ingredientListPanelHandle.getIngredientCardHandle(INDEX_SECOND_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        IngredientCardHandle selectedStaff \u003d ingredientListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardEquals(expectedIngredient, selectedStaff);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Verifies that creating and deleting large number of ingredients in {@code IngredientListPanel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * requires lesser than {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ObservableList\u003cIngredient\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }, \"Creation and deletion of ingredient cards exceeded time limit\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns a list of staff containing {@code ingredientCount} ingredient that is used to populate the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code IngredientListPanel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private ObservableList\u003cIngredient\u003e createBackingList(int ingredientCount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ObservableList\u003cIngredient\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredientCount; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "            Ingredient ingredient \u003d new Ingredient(new IngredientName(\"aaa\"), new IngredientQuantity(5),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                    new IngredientUnit(\"bbb\"), new IngredientWarningAmount(4));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            backingList.add(ingredient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Initializes {@code ingredientListPanelHandle} with a {@code IngredientListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code IngredientListPanel}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private void initUi(ObservableList\u003cIngredient\u003e backingList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        IngredientListPanel ingredientListPanel \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                new IngredientListPanel(backingList, selectedIngredient, selectedIngredient::set);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        uiPartRule.setUiPart(ingredientListPanel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ingredientListPanelHandle \u003d new IngredientListPanelHandle(getChildNode(ingredientListPanel.getRoot(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                IngredientListPanelHandle.INGREDIENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 93,
      "hiyingnn": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.storage.JsonRestaurantBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        JsonRestaurantBookStorage jsonAddressBookStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                new JsonRestaurantBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 3,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MemberCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.guihandles.MemberCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member member \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberCard memberCard \u003d new MemberCard(member, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "        uiPartRule.setUiPart(memberCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCardDisplay(memberCard, member, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member member \u003d new MemberBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberCard memberCard \u003d new MemberCard(member, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "        // same member, same index -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberCard copy \u003d new MemberCard(member, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(memberCard.equals(copy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(memberCard.equals(memberCard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(memberCard.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(memberCard.equals(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        // different member, same index -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member differentMember \u003d new MemberBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(memberCard.equals(new MemberCard(differentMember, 0)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        // same member, different index -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(memberCard.equals(new MemberCard(member, 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that {@code memberCard} displays the details of {@code expectedMember} correctly and matches"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void assertCardDisplay(MemberCard memberCard, Member expectedMember, int expectedId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberCardHandle memberCardHandle \u003d new MemberCardHandle(memberCard.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", memberCardHandle.getId());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        // verify member details are displayed correctly"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCardDisplaysMember(expectedMember, memberCardHandle);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limli": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MemberListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.getTypicalMembers;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.guihandles.MemberCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.guihandles.MemberListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.LoyaltyPoints;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "public class MemberListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final ObservableList\u003cMember\u003e TYPICAL_MEMBERS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "            FXCollections.observableList(getTypicalMembers());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final SimpleObjectProperty\u003cMember\u003e selectedMember \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    private MemberListPanelHandle memberListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        initUi(TYPICAL_MEMBERS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_MEMBERS.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "            memberListPanelHandle.navigateToCard(TYPICAL_MEMBERS.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "            Member expectedMember \u003d TYPICAL_MEMBERS.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "            MemberCardHandle actualCard \u003d memberListPanelHandle.getMemberCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "            assertCardDisplaysMember(expectedMember, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void selection_modelSelectedMemberChanged_selectionChanges() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        initUi(TYPICAL_MEMBERS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member secondMember \u003d TYPICAL_MEMBERS.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        guiRobot.interact(() -\u003e selectedMember.set(secondMember));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        MemberCardHandle expectedMember \u003d memberListPanelHandle.getMemberCardHandle(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberCardHandle selectedMember \u003d memberListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCardEquals(expectedMember, selectedMember);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Verifies that creating and deleting large number of members in {@code MemberListPanel} requires lesser than"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "        ObservableList\u003cMember\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "        }, \"Creation and deletion of member cards exceeded time limit\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns a list of members containing {@code memberCount} members that is used to populate the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code MemberListPanel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "    private ObservableList\u003cMember\u003e createBackingList(int memberCount) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "        ObservableList\u003cMember\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (int i \u003d 0; i \u003c memberCount; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limli"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "            LoyaltyPoints loyaltyPoints \u003d new LoyaltyPoints(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "            Member member \u003d new Member(name, phone, email, loyaltyPoints);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "            backingList.add(member);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Initializes {@code memberListPanelHandle} with a {@code MemberListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code MemberListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void initUi(ObservableList\u003cMember\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        MemberListPanel memberListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limli"
        },
        "content": "                new MemberListPanel(backingList, selectedMember, selectedMember::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limli"
        },
        "content": "        uiPartRule.setUiPart(memberListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limli"
        },
        "content": "        memberListPanelHandle \u003d new MemberListPanelHandle(getChildNode(memberListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "                MemberListPanelHandle.MEMBER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 3,
      "limli": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StaffCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStaff;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.StaffCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.testutil.StaffBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff staff \u003d new StaffBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffCard staffCard \u003d new StaffCard(staff, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        uiPartRule.setUiPart(staffCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardDisplay(staffCard, staff, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff staff \u003d new StaffBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffCard staffCard \u003d new StaffCard(staff, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same staff, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffCard copy \u003d new StaffCard(staff, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(staffCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTrue(staffCard.equals(staffCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(staffCard.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(staffCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // different staff, same index -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff differentStaff \u003d new StaffBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(staffCard.equals(new StaffCard(differentStaff, 0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // same staff, different index -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertFalse(staffCard.equals(new StaffCard(staff, 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code staffCard} displays the details of {@code expectedStaff} correctly and matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private void assertCardDisplay(StaffCard staffCard, Staff expectedStaff, int expectedId) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffCardHandle staffCardHandle \u003d new StaffCardHandle(staffCard.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", staffCardHandle.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        // verify staff details are displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardDisplaysStaff(expectedStaff, staffCardHandle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StaffListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STAFF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.testutil.TypicalStaff.getTypicalStaff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStaff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.StaffCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.StaffListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "public class StaffListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final ObservableList\u003cStaff\u003e TYPICAL_STAFF \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            FXCollections.observableList(getTypicalStaff());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private final SimpleObjectProperty\u003cStaff\u003e selectedStaff \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private StaffListPanelHandle staffListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        initUi(TYPICAL_STAFF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_STAFF.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            staffListPanelHandle.navigateToCard(TYPICAL_STAFF.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Staff expectedStaff \u003d TYPICAL_STAFF.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            StaffCardHandle actualCard \u003d staffListPanelHandle.getStaffCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            assertCardDisplaysStaff(expectedStaff, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void selection_modelSelectedStaffChanged_selectionChanges() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        initUi(TYPICAL_STAFF);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        Staff secondStaff \u003d TYPICAL_STAFF.get(INDEX_SECOND_STAFF.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.interact(() -\u003e selectedStaff.set(secondStaff));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffCardHandle expectedStaff \u003d staffListPanelHandle.getStaffCardHandle(INDEX_SECOND_STAFF.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffCardHandle selectedStaff \u003d staffListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertCardEquals(expectedStaff, selectedStaff);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Verifies that creating and deleting large number of staff in {@code StaffListPanel} requires lesser than"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ObservableList\u003cStaff\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }, \"Creation and deletion of staff cards exceeded time limit\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Returns a list of staff containing {@code staffCount} staff that is used to populate the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * {@code StaffListPanel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private ObservableList\u003cStaff\u003e createBackingList(int staffCount) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        ObservableList\u003cStaff\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        for (int i \u003d 0; i \u003c staffCount; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Appointment appointment \u003d new Appointment(\"aaaa\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            Staff staff \u003d new Staff(name, phone, email, appointment);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "            backingList.add(staff);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Initializes {@code staffListPanelHandle} with a {@code StaffListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code StaffListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    private void initUi(ObservableList\u003cStaff\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        StaffListPanel staffListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                new StaffListPanel(backingList, selectedStaff, selectedStaff::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        uiPartRule.setUiPart(staffListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        staffListPanelHandle \u003d new StaffListPanelHandle(getChildNode(staffListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "                StaffListPanelHandle.STAFF_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    private final RestaurantBook restaurantBook \u003d new RestaurantBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, restaurantBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        guiRobot.interact(() -\u003e restaurantBook.addMember(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 1,
      "hiyingnn": 3,
      "-": 70,
      "limli": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.BookingCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.IngredientCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.guihandles.MemberCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.guihandles.MemberListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import guitests.guihandles.StaffCardHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import seedu.address.model.person.Staff;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void assertCardEquals(MemberCardHandle expectedCard, MemberCardHandle actualCard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static void assertCardEquals(StaffCardHandle expectedCard, StaffCardHandle actualCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getAppointment(), actualCard.getAppointment());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static void assertCardEquals(IngredientCardHandle expectedCard, IngredientCardHandle actualCard) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getUnit(), actualCard.getUnit());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getQuantity(), actualCard.getQuantity());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static void assertCardEquals(BookingCardHandle expectedCard, BookingCardHandle actualCard) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getNumMembers(), actualCard.getNumMembers());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedCard.getDate(), actualCard.getDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedMember}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void assertCardDisplaysMember(Member expectedMember, MemberCardHandle actualCard) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedMember.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedMember.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedMember.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedStaff}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static void assertCardDisplaysStaff(Staff expectedStaff, StaffCardHandle actualCard) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedStaff.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedStaff.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedStaff.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedStaff.getAppointment().appointmentName, actualCard.getAppointment());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedIngredient}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static void assertCardDisplaysIngredient(Ingredient expectedIngredient, IngredientCardHandle actualCard) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(expectedIngredient.getIngredientName().getName(), actualCard.getName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(expectedIngredient.getIngredientUnit().getUnit(), actualCard.getUnit());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(Integer.toString(expectedIngredient.getIngredientQuantity().getQuantity()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                actualCard.getQuantity());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(Integer.toString(expectedIngredient.getIngredientWarningAmount().getWarningAmount()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                actualCard.getWarningAmt());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedBooking}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "    public static void assertCardDisplaysBooking(Booking expectedBooking, BookingCardHandle actualCard) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedBooking.getCustomer().getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(\"(\" + expectedBooking.getNumMembers() + \" person(s))\", actualCard.getNumMembers());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedBooking.getCustomer().getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        assertEquals(expectedBooking.getStartTimeString(), actualCard.getDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that the list in {@code memberListPanelHandle} displays the details of {@code members} correctly and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void assertListMatching(MemberListPanelHandle memberListPanelHandle, Member... members) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limli"
        },
        "content": "        for (int i \u003d 0; i \u003c members.length; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limli"
        },
        "content": "            memberListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "            assertCardDisplaysMember(members[i], memberListPanelHandle.getMemberCardHandle(i));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that the list in {@code memberListPanelHandle} displays the details of {@code members} correctly and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void assertListMatching(MemberListPanelHandle memberListPanelHandle, List\u003cMember\u003e members) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertListMatching(memberListPanelHandle, members.toArray(new Member[0]));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts the size of the list in {@code memberListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void assertListSize(MemberListPanelHandle memberListPanelHandle, int size) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "        int numberOfPeople \u003d memberListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 60,
      "hiyingnn": 6,
      "-": 52,
      "limli": 20
    }
  },
  {
    "path": "src/test/java/systemtests/AddBookingCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.commands.add.AddBookingCommand.MESSAGE_DUPLICATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.commands.add.AddBookingCommand.MESSAGE_FULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.UpdateCapacityCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.AddBookingCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.parser.DeleteMemberCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingSize;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.BookingWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.booking.Capacity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.testutil.BookingUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddBookingCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    // TODO: write better test cases"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        List\u003cBooking\u003e expectedBookingList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        /* ------------------------ Perform addbooking operations on the shown unfiltered list ---------------------- */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        /* Case: add a member without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // initialize the capacity to 13"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            new UpdateCapacityCommand(new Capacity(13)).execute(model, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            final String startTimeString1430 \u003d \"2019-02-23T14:30\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            final BookingWindow startTime1430 \u003d ParserUtil.parseBookingWindow(startTimeString1430);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            final String startTimeString1400 \u003d \"2019-02-23T14:00\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            final BookingWindow startTime1400 \u003d ParserUtil.parseBookingWindow(startTimeString1400);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            String commandString \u003d BookingUtil.getAddBookingCommand(startTimeString1430, Index.fromOneBased(1), 5);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Booking aliceBooking \u003d new Booking(startTime1430, ALICE, new BookingSize(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            expectedBookingList \u003d Arrays.asList(aliceBooking);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // Add first booking, should pass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertCommandSuccess(commandString, model, commandHistory, expectedBookingList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // Add duplicate booking, should fail"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertCommandFailure(commandString, model, commandHistory, MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            commandString \u003d BookingUtil.getAddBookingCommand(startTimeString1400, Index.fromOneBased(1), 5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Booking alice1400 \u003d new Booking(startTime1400, ALICE, new BookingSize(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            expectedBookingList \u003d Arrays.asList(alice1400, aliceBooking);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // Add booking at different time, booking should be added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertCommandSuccess(commandString, model, commandHistory, expectedBookingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "            Member modifiedAlice \u003d new Member(ALICE.getName(), new Phone(\"12345678\"), ALICE.getEmail(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "                    ALICE.getLoyaltyPoints());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            String editCommandString \u003d \" 1 \" + PREFIX_PHONE + modifiedAlice.getPhone().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Command editCommand \u003d new EditCommandParser().parse(editCommandString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Booking modifiedAlice1400 \u003d new Booking(startTime1400, modifiedAlice, new BookingSize(5));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Booking modifiedAliceBooking \u003d new Booking(startTime1430, modifiedAlice, new BookingSize(5));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            expectedBookingList \u003d Arrays.asList(modifiedAlice1400, modifiedAliceBooking);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // Modify Alice\u0027s phone number, booking list should be updated accordingly"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertEquals(model.getFilteredBookingList(), expectedBookingList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // Restaurant is has 10 persons, capacity of 13 and should not accept booking of 4"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            commandString \u003d BookingUtil.getAddBookingCommand(startTimeString1400, Index.fromOneBased(2), 4);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertCommandFailure(commandString, model, commandHistory, MESSAGE_FULL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // But the restaurant should be able to accept a booking of 3"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            commandString \u003d BookingUtil.getAddBookingCommand(startTimeString1400, Index.fromOneBased(2), 3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Booking benson1400 \u003d new Booking(startTime1400, BENSON, new BookingSize(3));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            expectedBookingList \u003d Arrays.asList(modifiedAlice1400, benson1400, modifiedAliceBooking);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertCommandSuccess(commandString, model, commandHistory, expectedBookingList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            String deleteAliceCommandString \u003d \" 1\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "            Command deleteAliceCommand \u003d new DeleteMemberCommandParser().parse(deleteAliceCommandString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            deleteAliceCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            expectedBookingList \u003d Arrays.asList(benson1400);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            // All bookings made by Alice should be removed once Alice is deleted, benson\u0027s bookings should remain"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertEquals(model.getFilteredBookingList(), expectedBookingList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"Parsing should not fail.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"Command should successfully execute.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Asserts that the command is successfully executed and the model\u0027s new list matches {@code expectedBookingList}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @param commandString the command to execute as a String"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @param expectedBookingList the bookinglist to match"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            String commandString, Model model, CommandHistory commandHistory, List\u003cBooking\u003e expectedBookingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Command command \u003d new AddBookingCommandParser().parse(commandString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertEquals(expectedBookingList, model.getFilteredBookingList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"Command should not fail to execute.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"Parsing should not fail.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Asserts that the command fails to execute and throws CommandException"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @param commandString the command to execute as a String"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            String commandString, Model model, CommandHistory commandHistory, String exceptionMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            Command command \u003d new AddBookingCommandParser().parse(commandString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"Execution should throw CommandException.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            assertEquals(exceptionMessage, e.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "            throw new AssertionError(\"Parsing should not fail.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 145,
      "limli": 4
    }
  },
  {
    "path": "src/test/java/systemtests/AddMemberCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_LOYALTY_POINTS_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_LOYALTY_POINTS_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.CARL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.HOON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.IDA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import seedu.address.logic.commands.add.AddMemberCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "public class AddMemberCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a member to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member toAdd \u003d AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String command \u003d \"   \" + AddMemberCommand.COMMAND_WORD + \"  \" + MEMBER_NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + \" \" + MEMBER_EMAIL_DESC_AMY + \" \" + MEMBER_LOYALTY_POINTS_DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.addMember(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a member with all fields same as another member in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        toAdd \u003d new MemberBuilder(AMY).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_LOYALTY_POINTS_DESC_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a member with all fields same as another member in the address book except phone and email"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        toAdd \u003d new MemberBuilder(AMY).withPhone(MEMBER_VALID_PHONE_BOB).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d MemberUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteAllMembers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a member, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_LOYALTY_POINTS_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a member -\u003e added */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filters the member list before adding -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limli"
        },
        "content": "        showMembersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* ------------------------ Perform add operation while a member card is selected --------------------------- */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: selects first card in the member list, add a member -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "        selectMember(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a duplicate member -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d MemberUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(command, AddMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a duplicate member except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        toAdd \u003d new MemberBuilder(HOON).withPhone(MEMBER_VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d MemberUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(command, AddMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: add a duplicate member except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        toAdd \u003d new MemberBuilder(HOON).withEmail(MEMBER_VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d MemberUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(command, AddMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_NAME_DESC_AMY + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_NAME_DESC_AMY + MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d \"adds \" + MemberUtil.getMemberDetails(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_INVALID_NAME_DESC"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_NAME_DESC_AMY"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_INVALID_PHONE_DESC + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        command \u003d AddMemberCommand.COMMAND_WORD + MEMBER_NAME_DESC_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_PHONE_DESC_AMY + MEMBER_INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Executes the {@code AddMemberCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddMemberCommand} with the details of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 4. {@code Storage} and {@code MemberListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void assertCommandSuccess(Member toAdd) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(MemberUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Member)}. Executes {@code command}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @see AddMemberCommandSystemTest#assertCommandSuccess(Member)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void assertCommandSuccess(String command, Member toAdd) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.addMember(toAdd);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddMemberCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Member)} except asserts that"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 2. {@code Storage} and {@code MemberListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * @see AddMemberCommandSystemTest#assertCommandSuccess(String, Member)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 4. {@code Storage} and {@code MemberListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 23,
      "hiyingnn": 23,
      "-": 130,
      "limli": 45
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class ClearCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: selects first card in member list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "        selectMember(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filters the member list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        showMembersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "     * displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "hiyingnn": 5,
      "-": 85,
      "limli": 5
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteMemberCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.DeleteMemberCommand.MESSAGE_DELETE_MEMBER_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "public class DeleteMemberCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteMemberCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: delete the first member in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        String command \u003d \"     \" + DeleteMemberCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member deletedMember \u003d removeMember(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEMBER_SUCCESS, deletedMember);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: delete the last member in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        Index lastMemberIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(lastMemberIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: undo deleting the last member in the list -\u003e last member restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: redo deleting the last member in the list -\u003e last member deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        removeMember(modelBeforeDeletingLast, lastMemberIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: delete the middle member in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        Index middleMemberIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(middleMemberIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filtered member list, delete index within bounds of address book and member list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "        showMembersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredMemberList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filtered member list, delete index within bounds of address book but out of bounds of member list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "        showMembersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        int invalidIndex \u003d getModel().getRestaurantBook().getMemberList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d DeleteMemberCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* --------------------- Performing delete operation while a member card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: delete the selected member -\u003e member list panel selects the member before the deleted member */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "        showAllMembers();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "        selectMember(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d DeleteMemberCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "        deletedMember \u003d removeMember(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limli"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEMBER_SUCCESS, deletedMember);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d DeleteMemberCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d DeleteMemberCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                getModel().getRestaurantBook().getMemberList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d DeleteMemberCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(DeleteMemberCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(DeleteMemberCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Removes the {@code Member} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @return the removed member"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limli"
        },
        "content": "    private Member removeMember(Model model, Index index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member targetMember \u003d getMember(model, index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.deleteMember(targetMember);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limli"
        },
        "content": "        return targetMember;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Deletes the member at {@code toDelete} by creating a default {@code DeleteMemberCommand} using"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code toDelete} and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see DeleteMemberCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member deletedMember \u003d removeMember(expectedModel, toDelete);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEMBER_SUCCESS, deletedMember);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "                DeleteMemberCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see DeleteMemberCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 8,
      "hiyingnn": 5,
      "-": 126,
      "limli": 51
    }
  },
  {
    "path": "src/test/java/systemtests/EditMemberCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_LOYALTY_POINTS_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_LOYALTY_POINTS_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEMBER_VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.EditMemberCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.MemberUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "public class EditMemberCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "        String command \u003d \" \" + EditMemberCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + MEMBER_NAME_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "                + \"  \" + MEMBER_PHONE_DESC_BOB + \" \" + MEMBER_EMAIL_DESC_BOB + \" \" + MEMBER_LOYALTY_POINTS_DESC_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member editedMember \u003d new MemberBuilder(BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(command, index, editedMember);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: undo editing the last member in the list -\u003e last member restored */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: redo editing the last member in the list -\u003e last member edited again */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        model.setMember(getModel().getFilteredMemberList().get(INDEX_FIRST.getZeroBased()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": "                editedMember);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as another member\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(getModel().getRestaurantBook().getMemberList().contains(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertNotEquals(getModel().getFilteredMemberList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_AMY + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB + \" \" + MEMBER_LOYALTY_POINTS_DESC_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedMember \u003d new MemberBuilder(BOB).withName(MEMBER_VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(command, index, editedMember);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as another member\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_AMY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedMember \u003d new MemberBuilder(BOB).withPhone(MEMBER_VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                .withEmail(MEMBER_VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(command, index, editedMember);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit with invalid tag argument -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + \"t/\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filtered member list, edit index within bounds of address book and member list -\u003e edited */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limli"
        },
        "content": "        showMembersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredMemberList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + MEMBER_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        Member memberToEdit \u003d getModel().getFilteredMemberList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        editedMember \u003d new MemberBuilder(memberToEdit).withName(MEMBER_VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(command, index, editedMember);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filtered member list, edit index within bounds of address book but out of bounds of member list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limli"
        },
        "content": "        showMembersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        int invalidIndex \u003d getModel().getRestaurantBook().getMemberList().size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" \" + invalidIndex + MEMBER_NAME_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limli"
        },
        "content": "                Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* --------------------- Performing edit operation while a member card is selected -------------------------- */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: selects first card in the member list, edit a member -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limli"
        },
        "content": "        showAllMembers();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limli"
        },
        "content": "        selectMember(index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_AMY + MEMBER_PHONE_DESC_AMY"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_EMAIL_DESC_AMY + \" \" + MEMBER_LOYALTY_POINTS_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limli"
        },
        "content": "        // browser\u0027s url is updated to reflect the new member\u0027s name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" 0\" + MEMBER_NAME_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limli"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" -1\" + MEMBER_NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limli"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredMemberList().size() + 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" \" + invalidIndex + MEMBER_NAME_DESC_BOB,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limli"
        },
        "content": "                Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + MEMBER_NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limli"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limli"
        },
        "content": "                EditMemberCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + MEMBER_INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + MEMBER_INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(EditMemberCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + MEMBER_INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as another member\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limli"
        },
        "content": "        executeCommand(MemberUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(getModel().getRestaurantBook().getMemberList().contains(BOB));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(getModel().getFilteredMemberList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command, EditMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as another member\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command, EditMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as another member\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command, EditMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as another member\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command, EditMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: edit a member with new values same as another member\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d EditMemberCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limli"
        },
        "content": "                + MEMBER_NAME_DESC_BOB + MEMBER_PHONE_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "                + MEMBER_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(command, EditMemberCommand.MESSAGE_DUPLICATE_MEMBER);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Member, Index)} except that"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see EditMemberCommandSystemTest#assertCommandSuccess(String, Index, Member, Index)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Member editedMember) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedMember, null);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditMemberCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the member at index {@code toEdit} being"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limli"
        },
        "content": "     * updated to values specified {@code editedMember}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see EditMemberCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Member editedMember,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        expectedModel.setMember(expectedModel.getFilteredMemberList().get(toEdit.getZeroBased()), editedMember);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        expectedModel.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limli"
        },
        "content": "                String.format(EditMemberCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see EditMemberCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        expectedModel.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 3,
      "lingyanhao": 23,
      "hiyingnn": 30,
      "-": 146,
      "limli": 94
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class FindCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find multiple members in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "         * -\u003e 2 members found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: repeat previous find command where member list is displaying the members we are finding"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "         * -\u003e 2 members found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find member where member list is not displaying the member we are finding -\u003e 1 member found */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find multiple members in address book, 2 keywords -\u003e 2 members found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find multiple members in address book, 2 keywords in reversed order -\u003e 2 members found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find multiple members in address book, 2 keywords with 1 repeat -\u003e 2 members found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find multiple members in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": "         * -\u003e 2 members found"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find same members in address book after deleting 1 of them -\u003e 1 member found */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limli"
        },
        "content": "        executeCommand(DeleteMemberCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertFalse(getModel().getRestaurantBook().getMemberList().contains(BENSON));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find member in address book, keyword is same as name but of different case -\u003e 1 member found */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find member in address book, keyword is substring of name -\u003e 0 members found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find member in address book, name is substring of keyword -\u003e 0 members found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find member not in address book -\u003e 0 members found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find phone number of member in address book -\u003e 0 members found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find email of member in address book -\u003e 0 members found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find while a member is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limli"
        },
        "content": "        showAllMembers();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limli"
        },
        "content": "        selectMember(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(getMemberListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: find member in empty address book -\u003e 0 members found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteAllMembers();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limli"
        },
        "content": "     * box displays {@code Messages#MESSAGE_MEMBERS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                MESSAGE_MEMBERS_LISTED_OVERVIEW, expectedModel.getFilteredMemberList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 2,
      "hiyingnn": 5,
      "-": 137,
      "limli": 31
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class HelpCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        getMemberListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertNotEquals(HelpCommand.MESSAGE_SHOWING_HELP, getResultDisplay().getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertListMatching(getMemberListPanel(), getModel().getFilteredMemberList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        executeCommand(DeleteMemberCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 4,
      "hiyingnn": 1,
      "-": 93,
      "limli": 3
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final Predicate\u003cMember\u003e PREDICATE_MATCHING_NO_MEMBERS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cMember\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": "        Optional\u003cPredicate\u003cMember\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zj-cs2103"
        },
        "content": "        model.updateFilteredMemberList(predicate.orElse(PREDICATE_MATCHING_NO_MEMBERS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": "    public static void setFilteredList(Model model, Member... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Member} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static Predicate\u003cMember\u003e getPredicateMatching(Member other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        return member -\u003e member.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zj-cs2103": 1,
      "-": 30,
      "limli": 8
    }
  },
  {
    "path": "src/test/java/systemtests/RestaurantBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.guihandles.MemberListPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.testutil.TypicalMembers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": " * A system test class for RestaurantBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public abstract class RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    protected RestaurantBook getInitialData() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limli"
        },
        "content": "        return TypicalMembers.getTypicalAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "    public MemberListPanelHandle getMemberListPanel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limli"
        },
        "content": "        return mainWindowHandle.getMemberListPanel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Displays all members in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limli"
        },
        "content": "    protected void showAllMembers() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(getModel().getRestaurantBook().getMemberList().size(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                getModel().getFilteredMemberList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Displays all members with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "    protected void showMembersWithName(String keyword) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(getModel().getFilteredMemberList().size()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "                \u003c getModel().getRestaurantBook().getMemberList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Selects the member at {@code index} of the displayed list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limli"
        },
        "content": "    protected void selectMember(Index index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(index.getZeroBased(), getMemberListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Deletes all members in the address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limli"
        },
        "content": "    protected void deleteAllMembers() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertEquals(0, getModel().getRestaurantBook().getMemberList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same member objects as {@code expectedModel}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limli"
        },
        "content": "     * and the member list panel displays the members in the model correctly."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "        assertEquals(new RestaurantBook(expectedModel.getRestaurantBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertListMatching(getMemberListPanel(), expectedModel.getFilteredMemberList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Calls {@code MemberListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limli"
        },
        "content": "        getMemberListPanel().rememberSelectedMemberCard();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that the previously selected card is now deselected"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(getMemberListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see MemberListPanelHandle#isSelectedMemberCardChanged()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limli"
        },
        "content": "        getMemberListPanel().navigateToCard(getMemberListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getMemberListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that the selected card in the member list panel remain unchanged."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limli"
        },
        "content": "     * @see MemberListPanelHandle#isSelectedMemberCardChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(getMemberListPanel().isSelectedMemberCardChanged());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertListMatching(getMemberListPanel(), getModel().getFilteredMemberList());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 7,
      "hiyingnn": 5,
      "-": 219,
      "limli": 27
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.RestaurantBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.model.person.Member;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class SampleDataTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    protected RestaurantBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limli"
        },
        "content": "        Member[] expectedList \u003d SampleDataUtil.getSampleMembers();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertListMatching(getMemberListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 3,
      "-": 45,
      "limli": 3
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_MEMBER_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "public class SelectCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: select the first card in the member list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: select the last card in the member list -\u003e selected */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        Index memberCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + memberCount.getOneBased();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandSuccess(command, memberCount);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: select the middle card in the member list -\u003e selected */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filtered member list, select index within bounds of address book but out of bounds of member list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        showMembersWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        int invalidIndex \u003d getModel().getRestaurantBook().getMemberList().size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "        /* Case: filtered member list, select index within bounds of address book and member list -\u003e selected */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredMemberList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredMemberList().size() + 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limli"
        },
        "content": "        deleteAllMembers();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limli"
        },
        "content": "                MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limli"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected member.\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 4. {@code Storage} and {@code MemberListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limli"
        },
        "content": "                MESSAGE_SELECT_MEMBER_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limli"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getMemberListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limli"
        },
        "content": "     * 4. {@code Storage} and {@code MemberListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * {@code RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "     * @see RestaurantBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 7,
      "hiyingnn": 6,
      "-": 116,
      "limli": 21
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "import seedu.address.model.ReadOnlyRestaurantBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hiyingnn"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyRestaurantBook\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hiyingnn": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/systemtests/ViewStatsCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limli"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limli"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limli"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limli"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limli"
        },
        "content": "import guitests.guihandles.StatsWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.DeleteMemberCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.logic.commands.ViewStatsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limli"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limli"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limli"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limli"
        },
        "content": "public class ViewStatsCommandSystemTest extends RestaurantBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limli"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limli"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limli"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limli"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertStatsWindowNotOpen();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limli"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limli"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limli"
        },
        "content": "        executeCommand(ViewStatsCommand.COMMAND_WORD + \" 30\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertStatiWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limli"
        },
        "content": "        // assert that while the stats window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertNotEquals(ViewStatsCommand.MESSAGE_SHOWING_STATS, getResultDisplay().getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertListMatching(getMemberListPanel(), getModel().getFilteredMemberList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limli"
        },
        "content": "        // assert that the status bar too is updated correctly while the stats window is open"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limli"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lingyanhao"
        },
        "content": "        executeCommand(DeleteMemberCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that the stats window is open, and closes it after checking."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void assertStatiWindowOpen() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertTrue(ERROR_MESSAGE, StatsWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limli"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limli"
        },
        "content": "        new StatsWindowHandle(guiRobot.getStage(StatsWindowHandle.STATS_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limli"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limli"
        },
        "content": "     * Asserts that the stats window isn\u0027t open."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limli"
        },
        "content": "    private void assertStatsWindowNotOpen() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limli"
        },
        "content": "        assertFalse(ERROR_MESSAGE, StatsWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limli"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lingyanhao": 3,
      "limli": 67
    }
  }
]
